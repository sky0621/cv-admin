// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescriptions = []string

// キャリアグループを一意に識別するID
type CareerGroupId = string

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`

	// スキルバージョン
	Version *SkillVersion `json:"version"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキルグループ群
type CareerSkillGroups = interface{}

// １キャリアのスキル群
type CareerSkills = interface{}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Message *string `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescriptions `json:"description"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *CareerSkillGroups `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *UserCareers `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// １ユーザーのキャリアグループのキャリア群
type UserCareers = []UserCareer

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKUserActivities = UserActivities

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = UserCareers

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersUserIdActivitiesJSONBody defines parameters for PutUsersUserIdActivities.
type PutUsersUserIdActivitiesJSONBody = UserActivities

// PutUsersUserIdAttributesJSONBody defines parameters for PutUsersUserIdAttributes.
type PutUsersUserIdAttributesJSONBody = UserAttribute

// PostUsersUserIdCareergroupsJSONBody defines parameters for PostUsersUserIdCareergroups.
type PostUsersUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersUserIdCareergroupsCareerGroupIdJSONBody defines parameters for PutUsersUserIdCareergroupsCareerGroupId.
type PutUsersUserIdCareergroupsCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody defines parameters for PutUsersUserIdCareergroupsCareerGroupIdCareers.
type PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody = UserCareers

// PostUsersUserIdNotesJSONBody defines parameters for PostUsersUserIdNotes.
type PostUsersUserIdNotesJSONBody = UserNote

// PutUsersUserIdNotesNoteIdJSONBody defines parameters for PutUsersUserIdNotesNoteId.
type PutUsersUserIdNotesNoteIdJSONBody = UserNoteOwn

// PutUsersUserIdNotesNoteIdItemsJSONBody defines parameters for PutUsersUserIdNotesNoteIdItems.
type PutUsersUserIdNotesNoteIdItemsJSONBody = UserNoteItems

// PutUsersUserIdQualificationsJSONBody defines parameters for PutUsersUserIdQualifications.
type PutUsersUserIdQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersUserIdActivitiesJSONRequestBody defines body for PutUsersUserIdActivities for application/json ContentType.
type PutUsersUserIdActivitiesJSONRequestBody = PutUsersUserIdActivitiesJSONBody

// PutUsersUserIdAttributesJSONRequestBody defines body for PutUsersUserIdAttributes for application/json ContentType.
type PutUsersUserIdAttributesJSONRequestBody = PutUsersUserIdAttributesJSONBody

// PostUsersUserIdCareergroupsJSONRequestBody defines body for PostUsersUserIdCareergroups for application/json ContentType.
type PostUsersUserIdCareergroupsJSONRequestBody = PostUsersUserIdCareergroupsJSONBody

// PutUsersUserIdCareergroupsCareerGroupIdJSONRequestBody defines body for PutUsersUserIdCareergroupsCareerGroupId for application/json ContentType.
type PutUsersUserIdCareergroupsCareerGroupIdJSONRequestBody = PutUsersUserIdCareergroupsCareerGroupIdJSONBody

// PutUsersUserIdCareergroupsCareerGroupIdCareersJSONRequestBody defines body for PutUsersUserIdCareergroupsCareerGroupIdCareers for application/json ContentType.
type PutUsersUserIdCareergroupsCareerGroupIdCareersJSONRequestBody = PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody

// PostUsersUserIdNotesJSONRequestBody defines body for PostUsersUserIdNotes for application/json ContentType.
type PostUsersUserIdNotesJSONRequestBody = PostUsersUserIdNotesJSONBody

// PutUsersUserIdNotesNoteIdJSONRequestBody defines body for PutUsersUserIdNotesNoteId for application/json ContentType.
type PutUsersUserIdNotesNoteIdJSONRequestBody = PutUsersUserIdNotesNoteIdJSONBody

// PutUsersUserIdNotesNoteIdItemsJSONRequestBody defines body for PutUsersUserIdNotesNoteIdItems for application/json ContentType.
type PutUsersUserIdNotesNoteIdItemsJSONRequestBody = PutUsersUserIdNotesNoteIdItemsJSONBody

// PutUsersUserIdQualificationsJSONRequestBody defines body for PutUsersUserIdQualifications for application/json ContentType.
type PutUsersUserIdQualificationsJSONRequestBody = PutUsersUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId UserId) error
	// アクティビティ群取得
	// (GET /users/{userId}/activities)
	GetUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{userId}/activities)
	PutUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// 属性取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 属性更新
	// (PUT /users/{userId}/attributes)
	PutUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// キャリアグループ群取得
	// (GET /users/{userId}/careergroups)
	GetUsersUserIdCareergroups(ctx echo.Context, userId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{userId}/careergroups)
	PostUsersUserIdCareergroups(ctx echo.Context, userId UserId) error
	// キャリアグループ削除
	// (DELETE /users/{userId}/careergroups/{careerGroupId})
	DeleteUsersUserIdCareergroupsCareerGroupId(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{userId}/careergroups/{careerGroupId})
	PutUsersUserIdCareergroupsCareerGroupId(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{userId}/careergroups/{careerGroupId}/careers)
	PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{userId}/notes)
	GetUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈新規登録
	// (POST /users/{userId}/notes)
	PostUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈削除
	// (DELETE /users/{userId}/notes/{noteId})
	DeleteUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈更新
	// (PUT /users/{userId}/notes/{noteId})
	PutUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{userId}/notes/{noteId}/items)
	PutUsersUserIdNotesNoteIdItems(ctx echo.Context, userId UserId, noteId NoteId) error
	// 資格情報群取得
	// (GET /users/{userId}/qualifications)
	GetUsersUserIdQualifications(ctx echo.Context, userId UserId) error
	// 資格情報群最新化
	// (PUT /users/{userId}/qualifications)
	PutUsersUserIdQualifications(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdActivities(ctx, userId)
	return err
}

// PutUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdActivities(ctx, userId)
	return err
}

// GetUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdAttributes(ctx, userId)
	return err
}

// PutUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdAttributes(ctx, userId)
	return err
}

// GetUsersUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdCareergroups(ctx, userId)
	return err
}

// PostUsersUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersUserIdCareergroups(ctx, userId)
	return err
}

// DeleteUsersUserIdCareergroupsCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdCareergroupsCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserIdCareergroupsCareerGroupId(ctx, userId, careerGroupId)
	return err
}

// PutUsersUserIdCareergroupsCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdCareergroupsCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdCareergroupsCareerGroupId(ctx, userId, careerGroupId)
	return err
}

// PutUsersUserIdCareergroupsCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx, userId, careerGroupId)
	return err
}

// GetUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdNotes(ctx, userId)
	return err
}

// PostUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersUserIdNotes(ctx, userId)
	return err
}

// DeleteUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteIdItems(ctx, userId, noteId)
	return err
}

// GetUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdQualifications(ctx, userId)
	return err
}

// PutUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdQualifications(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/activities", wrapper.GetUsersUserIdActivities)
	router.PUT(baseURL+"/users/:userId/activities", wrapper.PutUsersUserIdActivities)
	router.GET(baseURL+"/users/:userId/attributes", wrapper.GetUsersUserIdAttributes)
	router.PUT(baseURL+"/users/:userId/attributes", wrapper.PutUsersUserIdAttributes)
	router.GET(baseURL+"/users/:userId/careergroups", wrapper.GetUsersUserIdCareergroups)
	router.POST(baseURL+"/users/:userId/careergroups", wrapper.PostUsersUserIdCareergroups)
	router.DELETE(baseURL+"/users/:userId/careergroups/:careerGroupId", wrapper.DeleteUsersUserIdCareergroupsCareerGroupId)
	router.PUT(baseURL+"/users/:userId/careergroups/:careerGroupId", wrapper.PutUsersUserIdCareergroupsCareerGroupId)
	router.PUT(baseURL+"/users/:userId/careergroups/:careerGroupId/careers", wrapper.PutUsersUserIdCareergroupsCareerGroupIdCareers)
	router.GET(baseURL+"/users/:userId/notes", wrapper.GetUsersUserIdNotes)
	router.POST(baseURL+"/users/:userId/notes", wrapper.PostUsersUserIdNotes)
	router.DELETE(baseURL+"/users/:userId/notes/:noteId", wrapper.DeleteUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId", wrapper.PutUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId/items", wrapper.PutUsersUserIdNotesNoteIdItems)
	router.GET(baseURL+"/users/:userId/qualifications", wrapper.GetUsersUserIdQualifications)
	router.PUT(baseURL+"/users/:userId/qualifications", wrapper.PutUsersUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dPT4xEH2S3g6qJ+s/ycAAP//0JrCNDFQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
