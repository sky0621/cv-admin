// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// 資格名
type QualificationName = string

// 注釈
type QualificationNote = string

// 組織名
type QualificationOrg = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 注釈
	Note *QualificationNote `json:"note"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKGotUserActivities = UserActivities

// １ユーザーの属性
type N200OKGotUserAttribute = UserAttribute

// １ユーザーの資格情報群
type N200OKGotUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersUserIdActivitiesJSONBody defines parameters for PutUsersUserIdActivities.
type PutUsersUserIdActivitiesJSONBody = UserActivities

// PutUsersUserIdAttributesJSONBody defines parameters for PutUsersUserIdAttributes.
type PutUsersUserIdAttributesJSONBody = UserAttribute

// PutUsersUserIdQualificationsJSONBody defines parameters for PutUsersUserIdQualifications.
type PutUsersUserIdQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersUserIdActivitiesJSONRequestBody defines body for PutUsersUserIdActivities for application/json ContentType.
type PutUsersUserIdActivitiesJSONRequestBody = PutUsersUserIdActivitiesJSONBody

// PutUsersUserIdAttributesJSONRequestBody defines body for PutUsersUserIdAttributes for application/json ContentType.
type PutUsersUserIdAttributesJSONRequestBody = PutUsersUserIdAttributesJSONBody

// PutUsersUserIdQualificationsJSONRequestBody defines body for PutUsersUserIdQualifications for application/json ContentType.
type PutUsersUserIdQualificationsJSONRequestBody = PutUsersUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId UserId) error
	// アクティビティ群取得
	// (GET /users/{userId}/activities)
	GetUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// アクティビティ群更新
	// (PUT /users/{userId}/activities)
	PutUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// 属性取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 属性更新
	// (PUT /users/{userId}/attributes)
	PutUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 資格情報群取得
	// (GET /users/{userId}/qualifications)
	GetUsersUserIdQualifications(ctx echo.Context, userId UserId) error
	// 資格情報群更新
	// (PUT /users/{userId}/qualifications)
	PutUsersUserIdQualifications(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdActivities(ctx, userId)
	return err
}

// PutUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdActivities(ctx, userId)
	return err
}

// GetUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdAttributes(ctx, userId)
	return err
}

// PutUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdAttributes(ctx, userId)
	return err
}

// GetUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdQualifications(ctx, userId)
	return err
}

// PutUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdQualifications(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/activities", wrapper.GetUsersUserIdActivities)
	router.PUT(baseURL+"/users/:userId/activities", wrapper.PutUsersUserIdActivities)
	router.GET(baseURL+"/users/:userId/attributes", wrapper.GetUsersUserIdAttributes)
	router.PUT(baseURL+"/users/:userId/attributes", wrapper.PutUsersUserIdAttributes)
	router.GET(baseURL+"/users/:userId/qualifications", wrapper.GetUsersUserIdQualifications)
	router.PUT(baseURL+"/users/:userId/qualifications", wrapper.PutUsersUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RabXPTyB3/Kp5tXyqx7Jgj1rsLaSm9A9JM05kbhhcbeWOL0xOrFXNpxjO2REvgQqEp",
	"B5c2PSgX7pikOUiT9mCO4T7MIjl51a/QWUl+WEmWZc6UNxlb3v3//s9PyhqQDc00dKQTC0hrwIQYaogg",
	"HHyzLYTP1dgn9BnUTBUBCVS1CiprWLSVGTQLy6VTeqUOBKDoQAImJA0gAB1q7GR0WwAYXbUVjGpAIthG",
	"ArDkBtIgI/tzjFaABH5W7HNRDH+1ikvh9WazyShYpqFbKOCqLIpTFz+aOmsQduRDmSjXFKKEv8mGTpBO",
	"2EdomqoiQ6IYevGKZejsWX7kAbIBBzVkyVgxGTUggYsfSQV/44b33V+p+w11X1HnP+xv+zvqPKbOM+r+",
	"kTpfU/cv4YfO6x3qbB7/eM+7fUTbW9T5nLYc0BTikhCClWWboMkK0qM6jhzewVd+69s8XP/GhqqyEvE3",
	"WRvESI/D//HhDf/RK9/9g/foYKj6K6I4NQdri+iqjSwyMdbPqArSyS8wNnAaz3OwVoggpUKk5/be8e4O",
	"dW7R9gZtO4McVqYuGOSXhq3Xpi4YTCkMnSd4wSCF4ES6Lja8/S+97ae0/YC2d2n7ekC62Y3CwGKRs6+e",
	"k0M5efqpPh083KHOIXUPgTCQH+oKadjLQAAa/OxjpNdJA0gVUQC6rapwmR0JkwBZNdlxi2BFrzNZu0xc",
	"CLJHLia8u7c57LMK+VUce1YUgKbo3a+lFOQ5pBp6/bdGEtW/2fIOvuIwqPsFdXep+youYh4Z5xRMGvNw",
	"NYnUuffQe3nkb6/7D55weGurCGKpUBbLZaGgGTppSIWqUKjBVakkNoEATGyYCHcTYC0knuWfDL8pgIDW",
	"qLPng0NNATAuRh3+hJ1hrhXJbSxfQTJhtwdDglUZjmXZqAUGT2gLsfPBEYUgzRrj5oqC1FrKL2m8RQ8g",
	"xpFekGXBejrd8EEusiOtzKpFa4N9aPFeXBKBAFYMrEECJKDoZKYc+pqi2RqQZkqBQ4df+u6s6ATVEWbQ",
	"vzaWk9DH7e/9J/u8KztPqXtInRfU/Zw6j9/Goc93nWiknNvrcTmrmWKWyqPEXFhMAi8schCdb9u0/aws",
	"ei+P3vzw5M2LW0GJ3qfu1yyGWUrZ9DfatP0P2mrT1jZtbSeUkEcLXKE6a5B5SFJSmHfnvvf6QTy+WWBP",
	"idUp3uo1RmFc5PTMGZbCeKq8iKGsosJ5aBGEx86YPKyRJq1/+PTkxjqH6W8/PNm6663foM7G2zgbh3oR",
	"11P87t/XOy/vpcuaFHIk4BJWkxhLix9z1BuEmJZUjB5My4ZWLIunUOUDcblyuorKqFyuzEIki6dPl0RZ",
	"nK2d4ixtYyWui+oHeXhL9L48m/999eecvSnr3rv5NWdbvJqWOLnf35afREFTop4kizOuf2l2B5B8d4Kg",
	"aQrADm2dqQCspuf6RPc+SvSw7UvICq9BAvFSTk4EsDzQuGQd7zU47A5rQXJ0Cb1WpSmAK2FByTrOak5O",
	"zTNtdbWuK/Knue8o8qfde+bIZmRhcbitwpk21mAOWsjZfPOi5V+/wxrz/S+99Sfh3HBuni9g6aPwQCyX",
	"+VTKvqYG8pCel3caf/uf8czmHRx07j33dnZP3D/xyCVxdBbnlDoKnfUIrhsE7G32xH0Ua4tvUmePulvh",
	"PBDnJFc64/J7njAanPISwVTv1+EsP0mt3Tk9OVl92UVjTNCgfjYFYOA61JXf96TPTYCVwglksOQkP47+",
	"xywkvK1Tqskn0cAxqrH0Xh7FG0vWUmX2ltVqtTrYXVZFMdlgMj0p+krKVHjmd4UPF84BARCFBIC9B9cQ",
	"tsIzpWlxWgysaiIdmgqQwMy0OD3D3BSSRqCjom1FizbTCPcPmSnJv//8+Js7na0fTjb+1d9jBAg4UCNL",
	"a2DBsIK9jBUt3pBF5oza6rvcKfH7veS6rpSiQowgQTWpkCGj/2Kdtn/s72qGcdZDK8YWOsGWw9Y0iFdj",
	"2hyEYXaEdQtIl0Boj8vsXmib4lq4xGyGEqgotdNNLl2cTe/mrZOtneFmmg+IBYZa6u9JObVV0lY9hTOh",
	"EYft7SLYPX/9rnfrYX+NlEd5yV0Tr8EkYgiXokGB2yRfSsfuHylGu+Lm5aTqi5DrcuuI5DJB5i42HMWG",
	"W+csIgOmGWizk6vo0Yoduq+enGWGiRrKOUn7CMC0J2AA/29H/v3nGVnMzjDAO0pqmRv/jOFpVPr7yS7y",
	"FpnvnXtWaMBcubMIu+VizADuvYQYM1z7cBOwRb/UTUynoVzvNzZ7uh0zEnnd/l/ai9gWrTs6Tz7seFO/",
	"z6gLhRwnxq4mmvf8cZZ8WTZewMUGh59uifiLv4npNSbp+w3BpNrHi8UUtb+beBz9HjY5CE48OtN84n2G",
	"aEzk4bHKbiF8retJ8RFvP3CJPerudTafe49dEA3ywV5ZKhZVQ4Zqw7CItGYamDTZlAmxApdVFI2OOHK4",
	"FWirbNydFWdFkOhf3L8HW5v1zhe73p3v2byss9n3Uvf4jCiKAbuXezJkb4T2vGevQ1c9s7g0z//bh8U6",
	"+f8FAAD//+2gLx1cIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
