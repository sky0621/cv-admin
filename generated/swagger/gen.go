// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKGotUserActivities = UserActivities

// １ユーザーの属性
type N200OKGotUserAttribute = UserAttribute

// １ユーザーの注釈内の要素群
type N200OKGotUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKGotUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKGotUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKGotUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersUserIdActivitiesJSONBody defines parameters for PutUsersUserIdActivities.
type PutUsersUserIdActivitiesJSONBody = UserActivities

// PutUsersUserIdAttributesJSONBody defines parameters for PutUsersUserIdAttributes.
type PutUsersUserIdAttributesJSONBody = UserAttribute

// PostUsersUserIdNotesJSONBody defines parameters for PostUsersUserIdNotes.
type PostUsersUserIdNotesJSONBody = UserNote

// PutUsersUserIdNotesNoteIdJSONBody defines parameters for PutUsersUserIdNotesNoteId.
type PutUsersUserIdNotesNoteIdJSONBody = UserNoteOwn

// PutUsersUserIdNotesNoteIdItemsJSONBody defines parameters for PutUsersUserIdNotesNoteIdItems.
type PutUsersUserIdNotesNoteIdItemsJSONBody = UserNoteItems

// PutUsersUserIdQualificationsJSONBody defines parameters for PutUsersUserIdQualifications.
type PutUsersUserIdQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersUserIdActivitiesJSONRequestBody defines body for PutUsersUserIdActivities for application/json ContentType.
type PutUsersUserIdActivitiesJSONRequestBody = PutUsersUserIdActivitiesJSONBody

// PutUsersUserIdAttributesJSONRequestBody defines body for PutUsersUserIdAttributes for application/json ContentType.
type PutUsersUserIdAttributesJSONRequestBody = PutUsersUserIdAttributesJSONBody

// PostUsersUserIdNotesJSONRequestBody defines body for PostUsersUserIdNotes for application/json ContentType.
type PostUsersUserIdNotesJSONRequestBody = PostUsersUserIdNotesJSONBody

// PutUsersUserIdNotesNoteIdJSONRequestBody defines body for PutUsersUserIdNotesNoteId for application/json ContentType.
type PutUsersUserIdNotesNoteIdJSONRequestBody = PutUsersUserIdNotesNoteIdJSONBody

// PutUsersUserIdNotesNoteIdItemsJSONRequestBody defines body for PutUsersUserIdNotesNoteIdItems for application/json ContentType.
type PutUsersUserIdNotesNoteIdItemsJSONRequestBody = PutUsersUserIdNotesNoteIdItemsJSONBody

// PutUsersUserIdQualificationsJSONRequestBody defines body for PutUsersUserIdQualifications for application/json ContentType.
type PutUsersUserIdQualificationsJSONRequestBody = PutUsersUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId UserId) error
	// アクティビティ群取得
	// (GET /users/{userId}/activities)
	GetUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// アクティビティ群更新
	// (PUT /users/{userId}/activities)
	PutUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// 属性取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 属性更新
	// (PUT /users/{userId}/attributes)
	PutUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 注釈群取得
	// (GET /users/{userId}/notes)
	GetUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈新規登録
	// (POST /users/{userId}/notes)
	PostUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈削除
	// (DELETE /users/{userId}/notes/{noteId})
	DeleteUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈更新
	// (PUT /users/{userId}/notes/{noteId})
	PutUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈内要素群更新
	// (PUT /users/{userId}/notes/{noteId}/items)
	PutUsersUserIdNotesNoteIdItems(ctx echo.Context, userId UserId, noteId NoteId) error
	// 資格情報群取得
	// (GET /users/{userId}/qualifications)
	GetUsersUserIdQualifications(ctx echo.Context, userId UserId) error
	// 資格情報群更新
	// (PUT /users/{userId}/qualifications)
	PutUsersUserIdQualifications(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdActivities(ctx, userId)
	return err
}

// PutUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdActivities(ctx, userId)
	return err
}

// GetUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdAttributes(ctx, userId)
	return err
}

// PutUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdAttributes(ctx, userId)
	return err
}

// GetUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdNotes(ctx, userId)
	return err
}

// PostUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersUserIdNotes(ctx, userId)
	return err
}

// DeleteUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteIdItems(ctx, userId, noteId)
	return err
}

// GetUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdQualifications(ctx, userId)
	return err
}

// PutUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdQualifications(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/activities", wrapper.GetUsersUserIdActivities)
	router.PUT(baseURL+"/users/:userId/activities", wrapper.PutUsersUserIdActivities)
	router.GET(baseURL+"/users/:userId/attributes", wrapper.GetUsersUserIdAttributes)
	router.PUT(baseURL+"/users/:userId/attributes", wrapper.PutUsersUserIdAttributes)
	router.GET(baseURL+"/users/:userId/notes", wrapper.GetUsersUserIdNotes)
	router.POST(baseURL+"/users/:userId/notes", wrapper.PostUsersUserIdNotes)
	router.DELETE(baseURL+"/users/:userId/notes/:noteId", wrapper.DeleteUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId", wrapper.PutUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId/items", wrapper.PutUsersUserIdNotesNoteIdItems)
	router.GET(baseURL+"/users/:userId/qualifications", wrapper.GetUsersUserIdQualifications)
	router.PUT(baseURL+"/users/:userId/qualifications", wrapper.PutUsersUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
