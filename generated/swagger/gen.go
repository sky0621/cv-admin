// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// URL
type Url = string

// １ユーザーの属性情報群
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`
}

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// 生年月日の「年」
type Year = int32

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 属性情報群取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(w http.ResponseWriter, r *http.Request, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUsersUserIdAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdAttributes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserIdAttributes(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}/attributes", wrapper.GetUsersUserIdAttributes)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xWXU8bRxf+K2je93LlHa+dgPeOBKmiSqIqKpUixMV4PdhLvB+dHUOQtZJ3lyqgQEkR",
	"KUlFPhSFNsLlS0FNUiH6Y6Zr06v+hers+mtt10a9gbF9zjznnDnPc04VaZZhWyY1uYPUKrIJIwbllEWf",
	"Kg5lswU40UfEsMsUqShnZKliMFzRM3SKKOkbZraIJKSbSEU24SUkIZMYYNnylhCj31Z0RgtI5axCJeRo",
	"JWoQuPb/jC4iFf1P7kYhx7868lzs7rpu2yOK6RYtW2bxawvOBepoTLe5bgF6Y6MWnr1CUk+wIngmgkMR",
	"XCAJGeTRHWoWeQmpWYwlZFbKZZIHszgqvmqDi8OZbhaRK6FbOuOlGbI6iNTcfR1+Pm/srzf2DhJ41VVK",
	"mDqhYEWRJgzL5CV1IidNFMiqmsYukpDNLJsyrtMol0J8+agqAL4roeiucbZ3IyNXQhDFOOMHYAO1beVt",
	"5ZeoxsF7bMrCOxa1TTjUthLppzGS0KLFDMKRinSTZ5S48LpRMZCaSUvI0M34Q7qDrJucFikD6C+t/CD0",
	"lfexcXCUfFf/vQg+CP+TCJ4I/+1/ed277YqOzXN/vT/P3Mg008q4NOdYeRB57v6dBEiJc9tRZXllZSVV",
	"ZGSZcMJSmmXI8VFW8A2avYnz2ckcVaiiZKcI1fDkZBpreKpwI/EUFVbur1Hu5jWKBByc5pzp+QqngyH/",
	"ffGDCH4WwYXwf4O/3nF49qpR+6URfBe+OWtevhvo+Dj2Vv4j2c/KEEC+h+2jzDuqAD7A22tQq8NvV0JL",
	"ceONMofedNviNl667oEd2Ovaw2v76NrD2G8YL+c6apx8hcQT+Dt/fqo11raFV786eh6uHwjvhfCfzM4k",
	"G3i4iPc0iIKjJu79OLQ77rVSGxGSd9zY/zV8mqRQeHbW3D0N3x3+FXyfRE7jJHT635DbxRqHDhoRBMI/",
	"EcEWfBO86ZsRG8Kvi+CFCD4MiWQsRx60xHacjoSfz/t1BObESCnJ5XK5XjHJYTyoJ9Asurk4ZCLe/mZi",
	"+qtZJCGu8wiw88UyZU5sk07hFIY8LJuaxNaRijIpnMoAdQkvRayVYZQ7cjWe6K5M2pIQ/VqkfMgwPt0O",
	"n24Jf623EM2jjUGNEP5OuP1jeLkXd6qo+SgKhhG4ChoefUE5vLgTM2C6iw67hWNbphNHomAM/zTL5NSM",
	"giK2Xda16CZ5yYHIqj3rh86p4VyHmF0N7BKTMAbaAdXvS33zcXj801BhjNO9+mM33DrvputKKIuzQ2o4",
	"cNHV48Or3+ui5gnvUnivhXcSnV8mALzN8Oh5uP9eeHvCOxTeWoQBW1TFMAhbjdiXeIK4/tAnpOggdT5a",
	"3Ry04EqJhXB+eKG6JnJr5XMXIjjKltt+/QQ9ilKqi6De3DkN3wZIimZUPPVUWS5bGimXLIerVdtiHFan",
	"ZcJ0IGK8p1qs1XSLpFIG7kzhKRh5/UAvI8avN58dhtsfgXwmEGm+bZ7BGKMF13UXOsmPVpN6eHIZv9zt",
	"+3MzyWXXgcT/CQAA///tnFa6UgsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
