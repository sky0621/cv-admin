// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// PR
type PR = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKGotUserActivities = UserActivities

// １ユーザーの属性
type N200OKGotUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersUserIdActivitiesJSONBody defines parameters for PutUsersUserIdActivities.
type PutUsersUserIdActivitiesJSONBody = UserActivities

// PutUsersUserIdAttributesJSONBody defines parameters for PutUsersUserIdAttributes.
type PutUsersUserIdAttributesJSONBody = UserAttribute

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersUserIdActivitiesJSONRequestBody defines body for PutUsersUserIdActivities for application/json ContentType.
type PutUsersUserIdActivitiesJSONRequestBody = PutUsersUserIdActivitiesJSONBody

// PutUsersUserIdAttributesJSONRequestBody defines body for PutUsersUserIdAttributes for application/json ContentType.
type PutUsersUserIdAttributesJSONRequestBody = PutUsersUserIdAttributesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId UserId) error
	// アクティビティ群取得
	// (GET /users/{userId}/activities)
	GetUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// アクティビティ群更新
	// (PUT /users/{userId}/activities)
	PutUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// 属性取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 属性更新
	// (PUT /users/{userId}/attributes)
	PutUsersUserIdAttributes(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdActivities(ctx, userId)
	return err
}

// PutUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdActivities(ctx, userId)
	return err
}

// GetUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdAttributes(ctx, userId)
	return err
}

// PutUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdAttributes(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/activities", wrapper.GetUsersUserIdActivities)
	router.PUT(baseURL+"/users/:userId/activities", wrapper.PutUsersUserIdActivities)
	router.GET(baseURL+"/users/:userId/attributes", wrapper.GetUsersUserIdAttributes)
	router.PUT(baseURL+"/users/:userId/attributes", wrapper.PutUsersUserIdAttributes)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/BkAAP//ntxEcWsaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
