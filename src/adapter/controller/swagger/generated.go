// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescriptions = []string

// キャリアグループを一意に識別するID
type CareerGroupId = string

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`

	// スキルバージョン
	Version *SkillVersion `json:"version"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// スキルグループラベル
	Label *SkillGroupLabel `json:"label"`

	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキルグループ群
type CareerSkillGroups = interface{}

// １キャリアのスキル群
type CareerSkills = interface{}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Message *string `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキルグループラベル
type SkillGroupLabel = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescriptions `json:"description"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *CareerSkillGroups `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *UserCareers `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// １ユーザーのキャリアグループのキャリア群
type UserCareers = []UserCareer

// ユーザーを一意に識別するID
type UserId = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKUserActivities = UserActivities

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = UserCareers

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersUserIdActivitiesJSONBody defines parameters for PutUsersUserIdActivities.
type PutUsersUserIdActivitiesJSONBody = UserActivities

// PutUsersUserIdAttributesJSONBody defines parameters for PutUsersUserIdAttributes.
type PutUsersUserIdAttributesJSONBody = UserAttribute

// PostUsersUserIdCareergroupsJSONBody defines parameters for PostUsersUserIdCareergroups.
type PostUsersUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersUserIdCareergroupsCareerGroupIdJSONBody defines parameters for PutUsersUserIdCareergroupsCareerGroupId.
type PutUsersUserIdCareergroupsCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody defines parameters for PutUsersUserIdCareergroupsCareerGroupIdCareers.
type PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody = UserCareers

// PostUsersUserIdNotesJSONBody defines parameters for PostUsersUserIdNotes.
type PostUsersUserIdNotesJSONBody = UserNote

// PutUsersUserIdNotesNoteIdJSONBody defines parameters for PutUsersUserIdNotesNoteId.
type PutUsersUserIdNotesNoteIdJSONBody = UserNoteOwn

// PutUsersUserIdNotesNoteIdItemsJSONBody defines parameters for PutUsersUserIdNotesNoteIdItems.
type PutUsersUserIdNotesNoteIdItemsJSONBody = UserNoteItems

// PutUsersUserIdQualificationsJSONBody defines parameters for PutUsersUserIdQualifications.
type PutUsersUserIdQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersUserIdActivitiesJSONRequestBody defines body for PutUsersUserIdActivities for application/json ContentType.
type PutUsersUserIdActivitiesJSONRequestBody = PutUsersUserIdActivitiesJSONBody

// PutUsersUserIdAttributesJSONRequestBody defines body for PutUsersUserIdAttributes for application/json ContentType.
type PutUsersUserIdAttributesJSONRequestBody = PutUsersUserIdAttributesJSONBody

// PostUsersUserIdCareergroupsJSONRequestBody defines body for PostUsersUserIdCareergroups for application/json ContentType.
type PostUsersUserIdCareergroupsJSONRequestBody = PostUsersUserIdCareergroupsJSONBody

// PutUsersUserIdCareergroupsCareerGroupIdJSONRequestBody defines body for PutUsersUserIdCareergroupsCareerGroupId for application/json ContentType.
type PutUsersUserIdCareergroupsCareerGroupIdJSONRequestBody = PutUsersUserIdCareergroupsCareerGroupIdJSONBody

// PutUsersUserIdCareergroupsCareerGroupIdCareersJSONRequestBody defines body for PutUsersUserIdCareergroupsCareerGroupIdCareers for application/json ContentType.
type PutUsersUserIdCareergroupsCareerGroupIdCareersJSONRequestBody = PutUsersUserIdCareergroupsCareerGroupIdCareersJSONBody

// PostUsersUserIdNotesJSONRequestBody defines body for PostUsersUserIdNotes for application/json ContentType.
type PostUsersUserIdNotesJSONRequestBody = PostUsersUserIdNotesJSONBody

// PutUsersUserIdNotesNoteIdJSONRequestBody defines body for PutUsersUserIdNotesNoteId for application/json ContentType.
type PutUsersUserIdNotesNoteIdJSONRequestBody = PutUsersUserIdNotesNoteIdJSONBody

// PutUsersUserIdNotesNoteIdItemsJSONRequestBody defines body for PutUsersUserIdNotesNoteIdItems for application/json ContentType.
type PutUsersUserIdNotesNoteIdItemsJSONRequestBody = PutUsersUserIdNotesNoteIdItemsJSONBody

// PutUsersUserIdQualificationsJSONRequestBody defines body for PutUsersUserIdQualifications for application/json ContentType.
type PutUsersUserIdQualificationsJSONRequestBody = PutUsersUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId UserId) error
	// アクティビティ群取得
	// (GET /users/{userId}/activities)
	GetUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{userId}/activities)
	PutUsersUserIdActivities(ctx echo.Context, userId UserId) error
	// 属性取得
	// (GET /users/{userId}/attributes)
	GetUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// 属性更新
	// (PUT /users/{userId}/attributes)
	PutUsersUserIdAttributes(ctx echo.Context, userId UserId) error
	// キャリアグループ群取得
	// (GET /users/{userId}/careergroups)
	GetUsersUserIdCareergroups(ctx echo.Context, userId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{userId}/careergroups)
	PostUsersUserIdCareergroups(ctx echo.Context, userId UserId) error
	// キャリアグループ削除
	// (DELETE /users/{userId}/careergroups/{careerGroupId})
	DeleteUsersUserIdCareergroupsCareerGroupId(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{userId}/careergroups/{careerGroupId})
	PutUsersUserIdCareergroupsCareerGroupId(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{userId}/careergroups/{careerGroupId}/careers)
	PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx echo.Context, userId UserId, careerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{userId}/notes)
	GetUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈新規登録
	// (POST /users/{userId}/notes)
	PostUsersUserIdNotes(ctx echo.Context, userId UserId) error
	// 注釈削除
	// (DELETE /users/{userId}/notes/{noteId})
	DeleteUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈更新
	// (PUT /users/{userId}/notes/{noteId})
	PutUsersUserIdNotesNoteId(ctx echo.Context, userId UserId, noteId NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{userId}/notes/{noteId}/items)
	PutUsersUserIdNotesNoteIdItems(ctx echo.Context, userId UserId, noteId NoteId) error
	// 資格情報群取得
	// (GET /users/{userId}/qualifications)
	GetUsersUserIdQualifications(ctx echo.Context, userId UserId) error
	// 資格情報群最新化
	// (PUT /users/{userId}/qualifications)
	PutUsersUserIdQualifications(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdActivities(ctx, userId)
	return err
}

// PutUsersUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdActivities(ctx, userId)
	return err
}

// GetUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdAttributes(ctx, userId)
	return err
}

// PutUsersUserIdAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdAttributes(ctx, userId)
	return err
}

// GetUsersUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdCareergroups(ctx, userId)
	return err
}

// PostUsersUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersUserIdCareergroups(ctx, userId)
	return err
}

// DeleteUsersUserIdCareergroupsCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdCareergroupsCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserIdCareergroupsCareerGroupId(ctx, userId, careerGroupId)
	return err
}

// PutUsersUserIdCareergroupsCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdCareergroupsCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdCareergroupsCareerGroupId(ctx, userId, careerGroupId)
	return err
}

// PutUsersUserIdCareergroupsCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "careerGroupId" -------------
	var careerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "careerGroupId", runtime.ParamLocationPath, ctx.Param("careerGroupId"), &careerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter careerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdCareergroupsCareerGroupIdCareers(ctx, userId, careerGroupId)
	return err
}

// GetUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdNotes(ctx, userId)
	return err
}

// PostUsersUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersUserIdNotes(ctx, userId)
	return err
}

// DeleteUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteId(ctx, userId, noteId)
	return err
}

// PutUsersUserIdNotesNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdNotesNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "noteId" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, ctx.Param("noteId"), &noteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdNotesNoteIdItems(ctx, userId, noteId)
	return err
}

// GetUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserIdQualifications(ctx, userId)
	return err
}

// PutUsersUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserIdQualifications(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/activities", wrapper.GetUsersUserIdActivities)
	router.PUT(baseURL+"/users/:userId/activities", wrapper.PutUsersUserIdActivities)
	router.GET(baseURL+"/users/:userId/attributes", wrapper.GetUsersUserIdAttributes)
	router.PUT(baseURL+"/users/:userId/attributes", wrapper.PutUsersUserIdAttributes)
	router.GET(baseURL+"/users/:userId/careergroups", wrapper.GetUsersUserIdCareergroups)
	router.POST(baseURL+"/users/:userId/careergroups", wrapper.PostUsersUserIdCareergroups)
	router.DELETE(baseURL+"/users/:userId/careergroups/:careerGroupId", wrapper.DeleteUsersUserIdCareergroupsCareerGroupId)
	router.PUT(baseURL+"/users/:userId/careergroups/:careerGroupId", wrapper.PutUsersUserIdCareergroupsCareerGroupId)
	router.PUT(baseURL+"/users/:userId/careergroups/:careerGroupId/careers", wrapper.PutUsersUserIdCareergroupsCareerGroupIdCareers)
	router.GET(baseURL+"/users/:userId/notes", wrapper.GetUsersUserIdNotes)
	router.POST(baseURL+"/users/:userId/notes", wrapper.PostUsersUserIdNotes)
	router.DELETE(baseURL+"/users/:userId/notes/:noteId", wrapper.DeleteUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId", wrapper.PutUsersUserIdNotesNoteId)
	router.PUT(baseURL+"/users/:userId/notes/:noteId/items", wrapper.PutUsersUserIdNotesNoteIdItems)
	router.GET(baseURL+"/users/:userId/qualifications", wrapper.GetUsersUserIdQualifications)
	router.PUT(baseURL+"/users/:userId/qualifications", wrapper.PutUsersUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xcXXPTxrv/Kpk9Z6Y3AssmbYnvSjjlcAohpaQznQ4Xir04KrbkSjKn+Wc8E1m8BBJK",
	"SmkobVpeCpQmBcKfUEhJ4cNsJCdXfIX/7K5sa/W68gvhhiHyap/33d/z7LOaAQW1UlUVqBg6yM+AqqRJ",
	"FWhAjfxVkDQItUOaWqseLuIHsgLyoCoZU0AAilSBIO8bIwANfl2TNVgEeUOrQQHohSlYkfDL/63BUyAP",
	"/ivTIZmhv+qZUWaWel0AimrASKLuj91SG6OvYzI1HWqRZNwfuyUzQV+vYzoa1KuqokOi15wo7jn2yR78",
	"+0cFQz4jGzL9oaAqBlQM/F+pWi3LBcmQVSXzla4q+Bk/Wc+0hHwR6gVNruLZQB4c+yQ/5CxcsB/9hKz7",
	"yNpEjb/wv+Yj1LiDGo+RdR41fkPW9/Q/zVd3UePq9utr9uV1ZN5AjXk02wB1gRHDMDR5smbA/krRnjWN",
	"EPaTX53Z3xNZ9rjcsf9X+sq3b+p0FniIrN+QtUJMsYasVfzcur59YWX779U0QumDEknvi0A8XkWJDkKQ",
	"dDK82fwuSgz7/DmfkDyCkQXIgJX+itaZNaVwztMHOxfmqCjb983m+i1eIfodOa050whAuecMEEyg/1rX",
	"u2CYR8Wf1qSyfMrlrb9s+6ZOw//20wvOrU3HOmffehIpxbAo7jkgFY/Dr2tQN/rG+mhZhorxP5qmamE8",
	"H5CKQy7J/JC7EZir2yt3UeMSMheQ2fByOLxnTDU+VmtKsW/8tSaM5HBMNYbIiI5yV1DjH6LfDWQu2A9/",
	"tJcfIPM6MleQeZbwWm8hDuIC7t4+fbhAGWPnD93CycO7qPEUWU+BAOA3UqVaxginJBtTtUkggIr0zRGo",
	"lIwpkB8WBaDUymVpEg+hgMeYruLhuqHJSgkrr8XEGEFKXEzYi5cZ2odk43/9tPeLAqjISuvPbAjlA7Cs",
	"KqUTapCqc3HWfvIrQwNZP2D9Wpt+EXlkPCBrxtRBaTpIqXntpr2x7izPOdfvMfRmpqGk5YdyYi4nDFVU",
	"xZjKD40IQ0VpOp8V60AAVU2tQq2F94p08jiHwvTrAiBzJY09SgbVBYC5SBr8BR6DXcuVW538ChYM/Dbd",
	"Ig92JNbDLNzZ8bZX/nR+/JbRw5fvNS/+4TwzUeM5dmvrPLJuocZVZ2lt+/6VnaX55o2/26vFeyeBAOTW",
	"bphEBm9XSxcYYvykUjsbp89ImkbNNOrPmKLF8aII1Li69WLWOXsFL1YPf7Tn7lGWDx9kBM2CEBY9JI9I",
	"k7Ccgqr1B7JuIGuVIeLcXKQLBWo8I0NpED9FjbWtzZ+ad18hcxWZ9+21J/aldVahWTFZo5TdqGWjw6h/",
	"tQgamdq2Ww7GoSarxY81tRLPh7N8c2fpexrtZHR4uGc74R4M87cfvFS6sEUySrYTauJCRlcwfwjstqif",
	"nZbLIU7vx+wYpG+QJ6sB+yiuN8axQcgQt60LoKaVEzGWVsYjz0BNl+k+nTj75+7YJGFJrJNqDSNFuRX9",
	"iYQ8iwWGFviRzleh+YyO5eJQT2UUX27o3RI42aJqqbOcpGOiO8Iemick/TQfxdeE6OMgJPC+Gc8CJsbs",
	"0nWBy5Xxe9STo82Ix+ipJEmtO6Kresge6oH4AScvqEUiX2BVh3g8GdJmgfPNUzIsF0N+CVOOn9cK1HWp",
	"FD4vfcA1bSLIxIqeXcD/mWW3xawIBHBK1SqSAfJAVox9ObojypVaBeT3Zcl2SP/obIayYsAS1DDp/1Mn",
	"g6S3zefOvYcskm48ICDgBbLmUeNON3j6aGtvSJRzec4v50ismNlckphsXhZwjmg7hplrrF2b9iUgJLHv",
	"Bcy1Sjgn4DdG1Py0TvNm8ztaqmFzKk2qTn16BLPwz2tk/obM+ziJbMyH2CsBJmFWogBlKHCkiND55fbW",
	"y79SA21M7SishAEW6zay7jCUtl7e23oxj2bNnVvnt15cthcXAtiezyPHjwfpjR9ncefvJjIf50R7Y52Q",
	"vRSoaV51Fkxk3kazJppdRrPLAUZ4OGHKMYdU46BkhABk+8qS/eq6P+nEIG2POLKHXQuKeIa0lLlNgKHj",
	"jUV77gJqLHSjeYZqeDZAy0z+POCYJhXKcOiopBtQS+1mDNljWilkNXp2trlxLZxqkFyinH68FYLHQwBQ",
	"eIAdkAqnoVIMyXj42IhKulwGAvUZtSwppfT5FYNlY+S1FknR6wWyfveXpc5k92ZHuqhKBRBRCHkXroQW",
	"LZD10p477/y6+NH4YRzn2AabqLFBU833hCEyYvFs88Ejwr6FLNP9LbaIwdAMqWDE0x141aINCKNZ9zuH",
	"K37jsYsLrIvIfOT8cXPb+seZv21vPkOzJl6azz23F+ecaxtbrx8F1mgeZ5rQQmJm4vgRhpkpw6jq+Yz7",
	"YG9BrWRy4vtw+ANxcvjDEZiDudzwfgkWxA8/zIoFcX/xfWalrGmy39dGPuDwtuD5bRAs852v8gJnD8Xp",
	"MDjK/N4tP4GURC4k5yJMUZozD2FqyCmy6jBIFjiEThKdHg4EZJXOSIakTXDn95OeanTc8HbVGr8ja8YU",
	"R+m3XX+uC+ArCtPjhmMkz6l5cm7lal2RC6e535ELp1vvVRMrN+PHo21FU8DkBNO7KbLAq5fMOaTCjRNB",
	"txiY/KaneMipcU/Zs1Vy6RRJ0hQ4CKdGKzvny7LpO2oa2bCnxtuuXYVKXmTC7RkwYKFz3M99ii/wlb0C",
	"RXIe4dzD7W7loyfSASkHx6/eC7cpdyGvD0RsRJ7ujW6ZCrZWpOcxir3Q8xkvW3xp/EhlGOYqmliT98H9",
	"Ui77vjLsw8w5FuXgP0OhRAQC8/UOLP/ph2L2kyfNa2v23ZUd69suAJZ3WU+ijqx5F/VZl4mFbvlA4UXU",
	"WCXo9Wk3WUqrnYLHZWgtJIhVeJ3D0yzDuYZ0CiKk8FdReV4gCXVk8LaY4Bc4WPxh5TfcwlFi+2OryJTI",
	"m56WuXYHUZpYbWsiIlo9zUZ8vPSy+g7I0ik02YX2ojTHlDx4OPC29wT0V+qUpuKYCi1ncSozWJDixFjB",
	"mlJdAKpWkhT5XxIPLAxUh/qQlARbuNLoP6UfsLYOcYgv3APXpAq8vbHur8DnxFwutgg/MjIy4i3Dj4hi",
	"sBKP9SQrp0KKjKOfD300fhgIwJANQrD9oH2GCrJ7xb0isWoVKlJVBnmwb6+4dx92U8mYIjrK1HQXdVRV",
	"3Ujc42mfSPPGy52Ff3v7RLDTEzVinADGVd2YIPPSZnCoGwfU4vQgu53ZnvNgC3k2RIUalAxYzA/FyOi8",
	"mEPm606TXhRnbWoZXycf6UarVSqSNu3TppcMtqNU0kH+S0DtcRK/R22TmaGN9XUqQRmG7fghnYeNq/bF",
	"Szs37kab6SCZjBhqotO7z6htOEhqTB0apUaM6ih3ya46c4v2pZud/kEe5XmaDFnVBUlROiGqE5iLGV+G",
	"E+0MybgXF+ongzrPSEzFqgQNLt3H3g2gxxLRZjkEDY9NPCWz4L2IZI2GX57ogz2iBKTS9dMqAqjW+qB2",
	"Z3nWWVqzF5bebM41n19x1q8j86zz82tkzr3ZvBizmNVizDGgtS32PkpMWTRpFezNYbpY/QbnZ21zcq2d",
	"Gam1XaSM4/b1mJRR2yHXqxE6+1zvyqTS7G6ItjXq/LzuLK1xBx6r0bcCKnzHya0aeJ+jjDXwrgQZFY0a",
	"hC+eaPWx1C6kpdkZ4644pQuzUS8XPdqBvbPVj4UrUs6BBGA4fI9uoU4J5SMUPpg4ZOqlPcN7Ph30DvUH",
	"5zOpcwUmPjMzzLXj2EQi7kSpi4zC6y+jgbvPXaQa0aXvwaQdkTcZ+518CIkj2bvjkZtuvAXTbbrx5ht4",
	"7LfvNvZ3x/VTePfCvcuN2B/oGc8Z4bvrlVGXgvuTsEW6cOvAbdCerA/OhfV30HexNVlTpszUFDV1kua9",
	"IpwOQNKDhh6N4d5p7kONqyXH2wOI7SbsruBgR32DiSB6UtMrAAyV8V2Ae5Sx9OCOhEhmhn7XJQnOtaVP",
	"Dd6Idcc6H49JD9dc2gOrCdNz1LcPxdwv6sTtdh2nS4W4/DofXFwNCFy1p97tqEqBodh4ynSuRO22+wQ/",
	"MtIfUOTxMtq0MFhX83xmpf/O1m5L2VV3s8+fa5spJeD5OnDmzY98gh8XSYd/fOftPZrD/5WU3pXrk293",
	"K9dBZfcnGkOMMJhYTP6KTbCbor8BG+YhuxK1PkFjQxa/CLUzLdfyN0g8JD6yiqzV5tU1+44F3DYYctEi",
	"n8mU1YJUnlJ1Iz9TVTWjDgRwRtJkabIM3cYLzfXAU1KtbIA82C/uF0Hg2M/6hWRYc80fVuwrz4EAoFKr",
	"YEbd4ftEUSTsnmzLEN+guGo/fkV9dPT4xEH2Q346qJ+s/ycAAP//0vWykfBQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
