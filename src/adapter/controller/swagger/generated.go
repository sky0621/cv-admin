// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescriptions = []string

// キャリアグループを一意に識別するID
type CareerGroupId = string

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`

	// スキルバージョン
	Version *SkillVersion `json:"version"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// スキルグループラベル
	Label *SkillGroupLabel `json:"label"`

	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキルグループ群
type CareerSkillGroups = interface{}

// １キャリアのスキル群
type CareerSkills = interface{}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	Code   *string `json:"code,omitempty"`
	Errors *[]struct {
		Code  *string `json:"code,omitempty"`
		Field *string `json:"field,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// 生年月日の「日」
type Day = int32

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Message *string `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキルグループラベル
type SkillGroupLabel = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーを一意に識別するキー
	Key *UserKey `json:"key,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescriptions `json:"description"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *CareerSkillGroups `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *UserCareers `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// １ユーザーのキャリアグループのキャリア群
type UserCareers = []UserCareer

// ユーザーを一意に識別するキー
type UserKey = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKUserActivities = UserActivities

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = UserCareers

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserKeyActivitiesJSONBody defines parameters for PutUsersByUserKeyActivities.
type PutUsersByUserKeyActivitiesJSONBody = UserActivities

// PutUsersByUserKeyAttributesJSONBody defines parameters for PutUsersByUserKeyAttributes.
type PutUsersByUserKeyAttributesJSONBody = UserAttribute

// PostUsersByUserKeyCareergroupsJSONBody defines parameters for PostUsersByUserKeyCareergroups.
type PostUsersByUserKeyCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserKeyCareergroupsByCidJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCid.
type PutUsersByUserKeyCareergroupsByCidJSONBody = UserCareerGroupOwn

// PutUsersByUserKeyCareergroupsByCidCareersJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCidCareers.
type PutUsersByUserKeyCareergroupsByCidCareersJSONBody = UserCareers

// PostUsersByUserKeyNotesJSONBody defines parameters for PostUsersByUserKeyNotes.
type PostUsersByUserKeyNotesJSONBody = UserNote

// PutUsersByUserKeyNotesByNidJSONBody defines parameters for PutUsersByUserKeyNotesByNid.
type PutUsersByUserKeyNotesByNidJSONBody = UserNoteOwn

// PutUsersByUserKeyNotesByNidItemsJSONBody defines parameters for PutUsersByUserKeyNotesByNidItems.
type PutUsersByUserKeyNotesByNidItemsJSONBody = UserNoteItems

// PutUsersByUserKeyQualificationsJSONBody defines parameters for PutUsersByUserKeyQualifications.
type PutUsersByUserKeyQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserKeyActivitiesJSONRequestBody defines body for PutUsersByUserKeyActivities for application/json ContentType.
type PutUsersByUserKeyActivitiesJSONRequestBody = PutUsersByUserKeyActivitiesJSONBody

// PutUsersByUserKeyAttributesJSONRequestBody defines body for PutUsersByUserKeyAttributes for application/json ContentType.
type PutUsersByUserKeyAttributesJSONRequestBody = PutUsersByUserKeyAttributesJSONBody

// PostUsersByUserKeyCareergroupsJSONRequestBody defines body for PostUsersByUserKeyCareergroups for application/json ContentType.
type PostUsersByUserKeyCareergroupsJSONRequestBody = PostUsersByUserKeyCareergroupsJSONBody

// PutUsersByUserKeyCareergroupsByCidJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCid for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidJSONRequestBody = PutUsersByUserKeyCareergroupsByCidJSONBody

// PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCidCareers for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody = PutUsersByUserKeyCareergroupsByCidCareersJSONBody

// PostUsersByUserKeyNotesJSONRequestBody defines body for PostUsersByUserKeyNotes for application/json ContentType.
type PostUsersByUserKeyNotesJSONRequestBody = PostUsersByUserKeyNotesJSONBody

// PutUsersByUserKeyNotesByNidJSONRequestBody defines body for PutUsersByUserKeyNotesByNid for application/json ContentType.
type PutUsersByUserKeyNotesByNidJSONRequestBody = PutUsersByUserKeyNotesByNidJSONBody

// PutUsersByUserKeyNotesByNidItemsJSONRequestBody defines body for PutUsersByUserKeyNotesByNidItems for application/json ContentType.
type PutUsersByUserKeyNotesByNidItemsJSONRequestBody = PutUsersByUserKeyNotesByNidItemsJSONBody

// PutUsersByUserKeyQualificationsJSONRequestBody defines body for PutUsersByUserKeyQualifications for application/json ContentType.
type PutUsersByUserKeyQualificationsJSONRequestBody = PutUsersByUserKeyQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{byUserKey})
	DeleteUsersByUserKey(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群取得
	// (GET /users/{byUserKey}/activities)
	GetUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群最新化
	// (PUT /users/{byUserKey}/activities)
	PutUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// 属性取得
	// (GET /users/{byUserKey}/attributes)
	GetUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// 属性更新
	// (PUT /users/{byUserKey}/attributes)
	PutUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ群取得
	// (GET /users/{byUserKey}/careergroups)
	GetUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ新規登録
	// (POST /users/{byUserKey}/careergroups)
	PostUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ削除
	// (DELETE /users/{byUserKey}/careergroups/{byCid})
	DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{byUserKey}/careergroups/{byCid})
	PutUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserKey}/careergroups/{byCid}/careers)
	PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserKey}/notes)
	GetUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈新規登録
	// (POST /users/{byUserKey}/notes)
	PostUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈削除
	// (DELETE /users/{byUserKey}/notes/{byNid})
	DeleteUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈更新
	// (PUT /users/{byUserKey}/notes/{byNid})
	PutUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{byUserKey}/notes/{byNid}/items)
	PutUsersByUserKeyNotesByNidItems(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserKey}/qualifications)
	GetUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
	// 資格情報群最新化
	// (PUT /users/{byUserKey}/qualifications)
	PutUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKey(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCidCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCidCareers(ctx, byUserKey, byCid)
	return err
}

// GetUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNidItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNidItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNidItems(ctx, byUserKey, byNid)
	return err
}

// GetUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserKey", wrapper.DeleteUsersByUserKey)
	router.GET(baseURL+"/users/:byUserKey/activities", wrapper.GetUsersByUserKeyActivities)
	router.PUT(baseURL+"/users/:byUserKey/activities", wrapper.PutUsersByUserKeyActivities)
	router.GET(baseURL+"/users/:byUserKey/attributes", wrapper.GetUsersByUserKeyAttributes)
	router.PUT(baseURL+"/users/:byUserKey/attributes", wrapper.PutUsersByUserKeyAttributes)
	router.GET(baseURL+"/users/:byUserKey/careergroups", wrapper.GetUsersByUserKeyCareergroups)
	router.POST(baseURL+"/users/:byUserKey/careergroups", wrapper.PostUsersByUserKeyCareergroups)
	router.DELETE(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.DeleteUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.PutUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid/careers", wrapper.PutUsersByUserKeyCareergroupsByCidCareers)
	router.GET(baseURL+"/users/:byUserKey/notes", wrapper.GetUsersByUserKeyNotes)
	router.POST(baseURL+"/users/:byUserKey/notes", wrapper.PostUsersByUserKeyNotes)
	router.DELETE(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.DeleteUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.PutUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid/items", wrapper.PutUsersByUserKeyNotesByNidItems)
	router.GET(baseURL+"/users/:byUserKey/qualifications", wrapper.GetUsersByUserKeyQualifications)
	router.PUT(baseURL+"/users/:byUserKey/qualifications", wrapper.PutUsersByUserKeyQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
