// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/careerskillgroup"
	"github.com/sky0621/cv-admin/src/ent/usercareer"
)

// CareerSkillGroup is the model entity for the CareerSkillGroup schema.
type CareerSkillGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CareerSkillGroupQuery when eager-loading is set.
	Edges        CareerSkillGroupEdges `json:"edges"`
	career_id    *int
	selectValues sql.SelectValues
}

// CareerSkillGroupEdges holds the relations/edges for other nodes in the graph.
type CareerSkillGroupEdges struct {
	// Career holds the value of the career edge.
	Career *UserCareer `json:"career,omitempty"`
	// CareerSkills holds the value of the careerSkills edge.
	CareerSkills []*CareerSkill `json:"careerSkills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CareerOrErr returns the Career value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CareerSkillGroupEdges) CareerOrErr() (*UserCareer, error) {
	if e.loadedTypes[0] {
		if e.Career == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usercareer.Label}
		}
		return e.Career, nil
	}
	return nil, &NotLoadedError{edge: "career"}
}

// CareerSkillsOrErr returns the CareerSkills value or an error if the edge
// was not loaded in eager-loading.
func (e CareerSkillGroupEdges) CareerSkillsOrErr() ([]*CareerSkill, error) {
	if e.loadedTypes[1] {
		return e.CareerSkills, nil
	}
	return nil, &NotLoadedError{edge: "careerSkills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CareerSkillGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case careerskillgroup.FieldID:
			values[i] = new(sql.NullInt64)
		case careerskillgroup.FieldLabel:
			values[i] = new(sql.NullString)
		case careerskillgroup.FieldCreateTime, careerskillgroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case careerskillgroup.ForeignKeys[0]: // career_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CareerSkillGroup fields.
func (csg *CareerSkillGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case careerskillgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csg.ID = int(value.Int64)
		case careerskillgroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				csg.CreateTime = value.Time
			}
		case careerskillgroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				csg.UpdateTime = value.Time
			}
		case careerskillgroup.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				csg.Label = value.String
			}
		case careerskillgroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field career_id", value)
			} else if value.Valid {
				csg.career_id = new(int)
				*csg.career_id = int(value.Int64)
			}
		default:
			csg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CareerSkillGroup.
// This includes values selected through modifiers, order, etc.
func (csg *CareerSkillGroup) Value(name string) (ent.Value, error) {
	return csg.selectValues.Get(name)
}

// QueryCareer queries the "career" edge of the CareerSkillGroup entity.
func (csg *CareerSkillGroup) QueryCareer() *UserCareerQuery {
	return NewCareerSkillGroupClient(csg.config).QueryCareer(csg)
}

// QueryCareerSkills queries the "careerSkills" edge of the CareerSkillGroup entity.
func (csg *CareerSkillGroup) QueryCareerSkills() *CareerSkillQuery {
	return NewCareerSkillGroupClient(csg.config).QueryCareerSkills(csg)
}

// Update returns a builder for updating this CareerSkillGroup.
// Note that you need to call CareerSkillGroup.Unwrap() before calling this method if this CareerSkillGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (csg *CareerSkillGroup) Update() *CareerSkillGroupUpdateOne {
	return NewCareerSkillGroupClient(csg.config).UpdateOne(csg)
}

// Unwrap unwraps the CareerSkillGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csg *CareerSkillGroup) Unwrap() *CareerSkillGroup {
	_tx, ok := csg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CareerSkillGroup is not a transactional entity")
	}
	csg.config.driver = _tx.drv
	return csg
}

// String implements the fmt.Stringer.
func (csg *CareerSkillGroup) String() string {
	var builder strings.Builder
	builder.WriteString("CareerSkillGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csg.ID))
	builder.WriteString("create_time=")
	builder.WriteString(csg.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(csg.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(csg.Label)
	builder.WriteByte(')')
	return builder.String()
}

// CareerSkillGroups is a parsable slice of CareerSkillGroup.
type CareerSkillGroups []*CareerSkillGroup
