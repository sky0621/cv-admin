// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/careerskillgroup"
)

// CareerSkillGroup is the model entity for the CareerSkillGroup schema.
type CareerSkillGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CareerSkillGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case careerskillgroup.FieldID:
			values[i] = new(sql.NullInt64)
		case careerskillgroup.FieldCreateTime, careerskillgroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CareerSkillGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CareerSkillGroup fields.
func (csg *CareerSkillGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case careerskillgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csg.ID = int(value.Int64)
		case careerskillgroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				csg.CreateTime = value.Time
			}
		case careerskillgroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				csg.UpdateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CareerSkillGroup.
// Note that you need to call CareerSkillGroup.Unwrap() before calling this method if this CareerSkillGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (csg *CareerSkillGroup) Update() *CareerSkillGroupUpdateOne {
	return (&CareerSkillGroupClient{config: csg.config}).UpdateOne(csg)
}

// Unwrap unwraps the CareerSkillGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csg *CareerSkillGroup) Unwrap() *CareerSkillGroup {
	_tx, ok := csg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CareerSkillGroup is not a transactional entity")
	}
	csg.config.driver = _tx.drv
	return csg
}

// String implements the fmt.Stringer.
func (csg *CareerSkillGroup) String() string {
	var builder strings.Builder
	builder.WriteString("CareerSkillGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csg.ID))
	builder.WriteString("create_time=")
	builder.WriteString(csg.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(csg.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CareerSkillGroups is a parsable slice of CareerSkillGroup.
type CareerSkillGroups []*CareerSkillGroup

func (csg CareerSkillGroups) config(cfg config) {
	for _i := range csg {
		csg[_i].config = cfg
	}
}
