// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/userqualification"
)

// UserQualificationDelete is the builder for deleting a UserQualification entity.
type UserQualificationDelete struct {
	config
	hooks    []Hook
	mutation *UserQualificationMutation
}

// Where appends a list predicates to the UserQualificationDelete builder.
func (uqd *UserQualificationDelete) Where(ps ...predicate.UserQualification) *UserQualificationDelete {
	uqd.mutation.Where(ps...)
	return uqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uqd *UserQualificationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserQualificationMutation](ctx, uqd.sqlExec, uqd.mutation, uqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uqd *UserQualificationDelete) ExecX(ctx context.Context) int {
	n, err := uqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uqd *UserQualificationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userqualification.Table, sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt))
	if ps := uqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uqd.mutation.done = true
	return affected, err
}

// UserQualificationDeleteOne is the builder for deleting a single UserQualification entity.
type UserQualificationDeleteOne struct {
	uqd *UserQualificationDelete
}

// Where appends a list predicates to the UserQualificationDelete builder.
func (uqdo *UserQualificationDeleteOne) Where(ps ...predicate.UserQualification) *UserQualificationDeleteOne {
	uqdo.uqd.mutation.Where(ps...)
	return uqdo
}

// Exec executes the deletion query.
func (uqdo *UserQualificationDeleteOne) Exec(ctx context.Context) error {
	n, err := uqdo.uqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userqualification.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uqdo *UserQualificationDeleteOne) ExecX(ctx context.Context) {
	if err := uqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
