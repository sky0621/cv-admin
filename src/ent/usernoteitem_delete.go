// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usernoteitem"
)

// UserNoteItemDelete is the builder for deleting a UserNoteItem entity.
type UserNoteItemDelete struct {
	config
	hooks    []Hook
	mutation *UserNoteItemMutation
}

// Where appends a list predicates to the UserNoteItemDelete builder.
func (unid *UserNoteItemDelete) Where(ps ...predicate.UserNoteItem) *UserNoteItemDelete {
	unid.mutation.Where(ps...)
	return unid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (unid *UserNoteItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserNoteItemMutation](ctx, unid.sqlExec, unid.mutation, unid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (unid *UserNoteItemDelete) ExecX(ctx context.Context) int {
	n, err := unid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (unid *UserNoteItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usernoteitem.Table, sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt))
	if ps := unid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, unid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	unid.mutation.done = true
	return affected, err
}

// UserNoteItemDeleteOne is the builder for deleting a single UserNoteItem entity.
type UserNoteItemDeleteOne struct {
	unid *UserNoteItemDelete
}

// Where appends a list predicates to the UserNoteItemDelete builder.
func (unido *UserNoteItemDeleteOne) Where(ps ...predicate.UserNoteItem) *UserNoteItemDeleteOne {
	unido.unid.mutation.Where(ps...)
	return unido
}

// Exec executes the deletion query.
func (unido *UserNoteItemDeleteOne) Exec(ctx context.Context) error {
	n, err := unido.unid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usernoteitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (unido *UserNoteItemDeleteOne) ExecX(ctx context.Context) {
	if err := unido.Exec(ctx); err != nil {
		panic(err)
	}
}
