// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careertask"
	"github.com/sky0621/cv-admin/src/ent/careertaskdescription"
)

// CareerTaskDescriptionCreate is the builder for creating a CareerTaskDescription entity.
type CareerTaskDescriptionCreate struct {
	config
	mutation *CareerTaskDescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (ctdc *CareerTaskDescriptionCreate) SetDescription(s string) *CareerTaskDescriptionCreate {
	ctdc.mutation.SetDescription(s)
	return ctdc
}

// SetCareerTaskID sets the "careerTask" edge to the CareerTask entity by ID.
func (ctdc *CareerTaskDescriptionCreate) SetCareerTaskID(id int) *CareerTaskDescriptionCreate {
	ctdc.mutation.SetCareerTaskID(id)
	return ctdc
}

// SetCareerTask sets the "careerTask" edge to the CareerTask entity.
func (ctdc *CareerTaskDescriptionCreate) SetCareerTask(c *CareerTask) *CareerTaskDescriptionCreate {
	return ctdc.SetCareerTaskID(c.ID)
}

// Mutation returns the CareerTaskDescriptionMutation object of the builder.
func (ctdc *CareerTaskDescriptionCreate) Mutation() *CareerTaskDescriptionMutation {
	return ctdc.mutation
}

// Save creates the CareerTaskDescription in the database.
func (ctdc *CareerTaskDescriptionCreate) Save(ctx context.Context) (*CareerTaskDescription, error) {
	return withHooks(ctx, ctdc.sqlSave, ctdc.mutation, ctdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctdc *CareerTaskDescriptionCreate) SaveX(ctx context.Context) *CareerTaskDescription {
	v, err := ctdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctdc *CareerTaskDescriptionCreate) Exec(ctx context.Context) error {
	_, err := ctdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctdc *CareerTaskDescriptionCreate) ExecX(ctx context.Context) {
	if err := ctdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctdc *CareerTaskDescriptionCreate) check() error {
	if _, ok := ctdc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "CareerTaskDescription.description"`)}
	}
	if v, ok := ctdc.mutation.Description(); ok {
		if err := careertaskdescription.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CareerTaskDescription.description": %w`, err)}
		}
	}
	if _, ok := ctdc.mutation.CareerTaskID(); !ok {
		return &ValidationError{Name: "careerTask", err: errors.New(`ent: missing required edge "CareerTaskDescription.careerTask"`)}
	}
	return nil
}

func (ctdc *CareerTaskDescriptionCreate) sqlSave(ctx context.Context) (*CareerTaskDescription, error) {
	if err := ctdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ctdc.mutation.id = &_node.ID
	ctdc.mutation.done = true
	return _node, nil
}

func (ctdc *CareerTaskDescriptionCreate) createSpec() (*CareerTaskDescription, *sqlgraph.CreateSpec) {
	var (
		_node = &CareerTaskDescription{config: ctdc.config}
		_spec = sqlgraph.NewCreateSpec(careertaskdescription.Table, sqlgraph.NewFieldSpec(careertaskdescription.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ctdc.conflict
	if value, ok := ctdc.mutation.Description(); ok {
		_spec.SetField(careertaskdescription.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ctdc.mutation.CareerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   careertaskdescription.CareerTaskTable,
			Columns: []string{careertaskdescription.CareerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careertask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.career_task_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CareerTaskDescription.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CareerTaskDescriptionUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (ctdc *CareerTaskDescriptionCreate) OnConflict(opts ...sql.ConflictOption) *CareerTaskDescriptionUpsertOne {
	ctdc.conflict = opts
	return &CareerTaskDescriptionUpsertOne{
		create: ctdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctdc *CareerTaskDescriptionCreate) OnConflictColumns(columns ...string) *CareerTaskDescriptionUpsertOne {
	ctdc.conflict = append(ctdc.conflict, sql.ConflictColumns(columns...))
	return &CareerTaskDescriptionUpsertOne{
		create: ctdc,
	}
}

type (
	// CareerTaskDescriptionUpsertOne is the builder for "upsert"-ing
	//  one CareerTaskDescription node.
	CareerTaskDescriptionUpsertOne struct {
		create *CareerTaskDescriptionCreate
	}

	// CareerTaskDescriptionUpsert is the "OnConflict" setter.
	CareerTaskDescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *CareerTaskDescriptionUpsert) SetDescription(v string) *CareerTaskDescriptionUpsert {
	u.Set(careertaskdescription.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CareerTaskDescriptionUpsert) UpdateDescription() *CareerTaskDescriptionUpsert {
	u.SetExcluded(careertaskdescription.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CareerTaskDescriptionUpsertOne) UpdateNewValues() *CareerTaskDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CareerTaskDescriptionUpsertOne) Ignore() *CareerTaskDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CareerTaskDescriptionUpsertOne) DoNothing() *CareerTaskDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CareerTaskDescriptionCreate.OnConflict
// documentation for more info.
func (u *CareerTaskDescriptionUpsertOne) Update(set func(*CareerTaskDescriptionUpsert)) *CareerTaskDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CareerTaskDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *CareerTaskDescriptionUpsertOne) SetDescription(v string) *CareerTaskDescriptionUpsertOne {
	return u.Update(func(s *CareerTaskDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CareerTaskDescriptionUpsertOne) UpdateDescription() *CareerTaskDescriptionUpsertOne {
	return u.Update(func(s *CareerTaskDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *CareerTaskDescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CareerTaskDescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CareerTaskDescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CareerTaskDescriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CareerTaskDescriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CareerTaskDescriptionCreateBulk is the builder for creating many CareerTaskDescription entities in bulk.
type CareerTaskDescriptionCreateBulk struct {
	config
	builders []*CareerTaskDescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the CareerTaskDescription entities in the database.
func (ctdcb *CareerTaskDescriptionCreateBulk) Save(ctx context.Context) ([]*CareerTaskDescription, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctdcb.builders))
	nodes := make([]*CareerTaskDescription, len(ctdcb.builders))
	mutators := make([]Mutator, len(ctdcb.builders))
	for i := range ctdcb.builders {
		func(i int, root context.Context) {
			builder := ctdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CareerTaskDescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctdcb *CareerTaskDescriptionCreateBulk) SaveX(ctx context.Context) []*CareerTaskDescription {
	v, err := ctdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctdcb *CareerTaskDescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ctdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctdcb *CareerTaskDescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ctdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CareerTaskDescription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CareerTaskDescriptionUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (ctdcb *CareerTaskDescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CareerTaskDescriptionUpsertBulk {
	ctdcb.conflict = opts
	return &CareerTaskDescriptionUpsertBulk{
		create: ctdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctdcb *CareerTaskDescriptionCreateBulk) OnConflictColumns(columns ...string) *CareerTaskDescriptionUpsertBulk {
	ctdcb.conflict = append(ctdcb.conflict, sql.ConflictColumns(columns...))
	return &CareerTaskDescriptionUpsertBulk{
		create: ctdcb,
	}
}

// CareerTaskDescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of CareerTaskDescription nodes.
type CareerTaskDescriptionUpsertBulk struct {
	create *CareerTaskDescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CareerTaskDescriptionUpsertBulk) UpdateNewValues() *CareerTaskDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CareerTaskDescription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CareerTaskDescriptionUpsertBulk) Ignore() *CareerTaskDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CareerTaskDescriptionUpsertBulk) DoNothing() *CareerTaskDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CareerTaskDescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *CareerTaskDescriptionUpsertBulk) Update(set func(*CareerTaskDescriptionUpsert)) *CareerTaskDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CareerTaskDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *CareerTaskDescriptionUpsertBulk) SetDescription(v string) *CareerTaskDescriptionUpsertBulk {
	return u.Update(func(s *CareerTaskDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CareerTaskDescriptionUpsertBulk) UpdateDescription() *CareerTaskDescriptionUpsertBulk {
	return u.Update(func(s *CareerTaskDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *CareerTaskDescriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CareerTaskDescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CareerTaskDescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CareerTaskDescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
