// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
)

// UserCareerGroup is the model entity for the UserCareerGroup schema.
type UserCareerGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCareerGroupQuery when eager-loading is set.
	Edges   UserCareerGroupEdges `json:"edges"`
	user_id *int
}

// UserCareerGroupEdges holds the relations/edges for other nodes in the graph.
type UserCareerGroupEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Careers holds the value of the careers edge.
	Careers []*UserCareer `json:"careers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCareerGroupEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CareersOrErr returns the Careers value or an error if the edge
// was not loaded in eager-loading.
func (e UserCareerGroupEdges) CareersOrErr() ([]*UserCareer, error) {
	if e.loadedTypes[1] {
		return e.Careers, nil
	}
	return nil, &NotLoadedError{edge: "careers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCareerGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercareergroup.FieldID:
			values[i] = new(sql.NullInt64)
		case usercareergroup.FieldLabel:
			values[i] = new(sql.NullString)
		case usercareergroup.FieldCreateTime, usercareergroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case usercareergroup.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCareerGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCareerGroup fields.
func (ucg *UserCareerGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercareergroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucg.ID = int(value.Int64)
		case usercareergroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ucg.CreateTime = value.Time
			}
		case usercareergroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ucg.UpdateTime = value.Time
			}
		case usercareergroup.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				ucg.Label = value.String
			}
		case usercareergroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_id", value)
			} else if value.Valid {
				ucg.user_id = new(int)
				*ucg.user_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserCareerGroup entity.
func (ucg *UserCareerGroup) QueryUser() *UserQuery {
	return (&UserCareerGroupClient{config: ucg.config}).QueryUser(ucg)
}

// QueryCareers queries the "careers" edge of the UserCareerGroup entity.
func (ucg *UserCareerGroup) QueryCareers() *UserCareerQuery {
	return (&UserCareerGroupClient{config: ucg.config}).QueryCareers(ucg)
}

// Update returns a builder for updating this UserCareerGroup.
// Note that you need to call UserCareerGroup.Unwrap() before calling this method if this UserCareerGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucg *UserCareerGroup) Update() *UserCareerGroupUpdateOne {
	return (&UserCareerGroupClient{config: ucg.config}).UpdateOne(ucg)
}

// Unwrap unwraps the UserCareerGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucg *UserCareerGroup) Unwrap() *UserCareerGroup {
	_tx, ok := ucg.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCareerGroup is not a transactional entity")
	}
	ucg.config.driver = _tx.drv
	return ucg
}

// String implements the fmt.Stringer.
func (ucg *UserCareerGroup) String() string {
	var builder strings.Builder
	builder.WriteString("UserCareerGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ucg.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ucg.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ucg.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(ucg.Label)
	builder.WriteByte(')')
	return builder.String()
}

// UserCareerGroups is a parsable slice of UserCareerGroup.
type UserCareerGroups []*UserCareerGroup

func (ucg UserCareerGroups) config(cfg config) {
	for _i := range ucg {
		ucg[_i].config = cfg
	}
}
