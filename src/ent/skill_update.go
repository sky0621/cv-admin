// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careerskill"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/skill"
)

// SkillUpdate is the builder for updating Skill entities.
type SkillUpdate struct {
	config
	hooks    []Hook
	mutation *SkillMutation
}

// Where appends a list predicates to the SkillUpdate builder.
func (su *SkillUpdate) Where(ps ...predicate.Skill) *SkillUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SkillUpdate) SetUpdateTime(t time.Time) *SkillUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetName sets the "name" field.
func (su *SkillUpdate) SetName(s string) *SkillUpdate {
	su.mutation.SetName(s)
	return su
}

// SetKey sets the "key" field.
func (su *SkillUpdate) SetKey(s string) *SkillUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetURL sets the "url" field.
func (su *SkillUpdate) SetURL(s string) *SkillUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SkillUpdate) SetNillableURL(s *string) *SkillUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// ClearURL clears the value of the "url" field.
func (su *SkillUpdate) ClearURL() *SkillUpdate {
	su.mutation.ClearURL()
	return su
}

// SetTagKey sets the "tag_key" field.
func (su *SkillUpdate) SetTagKey(s string) *SkillUpdate {
	su.mutation.SetTagKey(s)
	return su
}

// SetNillableTagKey sets the "tag_key" field if the given value is not nil.
func (su *SkillUpdate) SetNillableTagKey(s *string) *SkillUpdate {
	if s != nil {
		su.SetTagKey(*s)
	}
	return su
}

// ClearTagKey clears the value of the "tag_key" field.
func (su *SkillUpdate) ClearTagKey() *SkillUpdate {
	su.mutation.ClearTagKey()
	return su
}

// AddCareerSkillIDs adds the "careerSkills" edge to the CareerSkill entity by IDs.
func (su *SkillUpdate) AddCareerSkillIDs(ids ...int) *SkillUpdate {
	su.mutation.AddCareerSkillIDs(ids...)
	return su
}

// AddCareerSkills adds the "careerSkills" edges to the CareerSkill entity.
func (su *SkillUpdate) AddCareerSkills(c ...*CareerSkill) *SkillUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCareerSkillIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (su *SkillUpdate) Mutation() *SkillMutation {
	return su.mutation
}

// ClearCareerSkills clears all "careerSkills" edges to the CareerSkill entity.
func (su *SkillUpdate) ClearCareerSkills() *SkillUpdate {
	su.mutation.ClearCareerSkills()
	return su
}

// RemoveCareerSkillIDs removes the "careerSkills" edge to CareerSkill entities by IDs.
func (su *SkillUpdate) RemoveCareerSkillIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveCareerSkillIDs(ids...)
	return su
}

// RemoveCareerSkills removes "careerSkills" edges to CareerSkill entities.
func (su *SkillUpdate) RemoveCareerSkills(c ...*CareerSkill) *SkillUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCareerSkillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkillUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SkillMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkillUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkillUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkillUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SkillUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := skill.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SkillUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Key(); ok {
		if err := skill.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Skill.key": %w`, err)}
		}
	}
	if v, ok := su.mutation.URL(); ok {
		if err := skill.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Skill.url": %w`, err)}
		}
	}
	if v, ok := su.mutation.TagKey(); ok {
		if err := skill.TagKeyValidator(v); err != nil {
			return &ValidationError{Name: "tag_key", err: fmt.Errorf(`ent: validator failed for field "Skill.tag_key": %w`, err)}
		}
	}
	return nil
}

func (su *SkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(skill.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.SetField(skill.FieldKey, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(skill.FieldURL, field.TypeString, value)
	}
	if su.mutation.URLCleared() {
		_spec.ClearField(skill.FieldURL, field.TypeString)
	}
	if value, ok := su.mutation.TagKey(); ok {
		_spec.SetField(skill.FieldTagKey, field.TypeString, value)
	}
	if su.mutation.TagKeyCleared() {
		_spec.ClearField(skill.FieldTagKey, field.TypeString)
	}
	if su.mutation.CareerSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCareerSkillsIDs(); len(nodes) > 0 && !su.mutation.CareerSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CareerSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SkillUpdateOne is the builder for updating a single Skill entity.
type SkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkillMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SkillUpdateOne) SetUpdateTime(t time.Time) *SkillUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetName sets the "name" field.
func (suo *SkillUpdateOne) SetName(s string) *SkillUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetKey sets the "key" field.
func (suo *SkillUpdateOne) SetKey(s string) *SkillUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetURL sets the "url" field.
func (suo *SkillUpdateOne) SetURL(s string) *SkillUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableURL(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// ClearURL clears the value of the "url" field.
func (suo *SkillUpdateOne) ClearURL() *SkillUpdateOne {
	suo.mutation.ClearURL()
	return suo
}

// SetTagKey sets the "tag_key" field.
func (suo *SkillUpdateOne) SetTagKey(s string) *SkillUpdateOne {
	suo.mutation.SetTagKey(s)
	return suo
}

// SetNillableTagKey sets the "tag_key" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableTagKey(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetTagKey(*s)
	}
	return suo
}

// ClearTagKey clears the value of the "tag_key" field.
func (suo *SkillUpdateOne) ClearTagKey() *SkillUpdateOne {
	suo.mutation.ClearTagKey()
	return suo
}

// AddCareerSkillIDs adds the "careerSkills" edge to the CareerSkill entity by IDs.
func (suo *SkillUpdateOne) AddCareerSkillIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddCareerSkillIDs(ids...)
	return suo
}

// AddCareerSkills adds the "careerSkills" edges to the CareerSkill entity.
func (suo *SkillUpdateOne) AddCareerSkills(c ...*CareerSkill) *SkillUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCareerSkillIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (suo *SkillUpdateOne) Mutation() *SkillMutation {
	return suo.mutation
}

// ClearCareerSkills clears all "careerSkills" edges to the CareerSkill entity.
func (suo *SkillUpdateOne) ClearCareerSkills() *SkillUpdateOne {
	suo.mutation.ClearCareerSkills()
	return suo
}

// RemoveCareerSkillIDs removes the "careerSkills" edge to CareerSkill entities by IDs.
func (suo *SkillUpdateOne) RemoveCareerSkillIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveCareerSkillIDs(ids...)
	return suo
}

// RemoveCareerSkills removes "careerSkills" edges to CareerSkill entities.
func (suo *SkillUpdateOne) RemoveCareerSkills(c ...*CareerSkill) *SkillUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCareerSkillIDs(ids...)
}

// Where appends a list predicates to the SkillUpdate builder.
func (suo *SkillUpdateOne) Where(ps ...predicate.Skill) *SkillUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkillUpdateOne) Select(field string, fields ...string) *SkillUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Skill entity.
func (suo *SkillUpdateOne) Save(ctx context.Context) (*Skill, error) {
	suo.defaults()
	return withHooks[*Skill, SkillMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkillUpdateOne) SaveX(ctx context.Context) *Skill {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkillUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkillUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SkillUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := skill.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SkillUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Key(); ok {
		if err := skill.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Skill.key": %w`, err)}
		}
	}
	if v, ok := suo.mutation.URL(); ok {
		if err := skill.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Skill.url": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TagKey(); ok {
		if err := skill.TagKeyValidator(v); err != nil {
			return &ValidationError{Name: "tag_key", err: fmt.Errorf(`ent: validator failed for field "Skill.tag_key": %w`, err)}
		}
	}
	return nil
}

func (suo *SkillUpdateOne) sqlSave(ctx context.Context) (_node *Skill, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Skill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skill.FieldID)
		for _, f := range fields {
			if !skill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(skill.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.SetField(skill.FieldKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(skill.FieldURL, field.TypeString, value)
	}
	if suo.mutation.URLCleared() {
		_spec.ClearField(skill.FieldURL, field.TypeString)
	}
	if value, ok := suo.mutation.TagKey(); ok {
		_spec.SetField(skill.FieldTagKey, field.TypeString, value)
	}
	if suo.mutation.TagKeyCleared() {
		_spec.ClearField(skill.FieldTagKey, field.TypeString)
	}
	if suo.mutation.CareerSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCareerSkillsIDs(); len(nodes) > 0 && !suo.mutation.CareerSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CareerSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.CareerSkillsTable,
			Columns: []string{skill.CareerSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careerskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Skill{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
