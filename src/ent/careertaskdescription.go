// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/careertask"
	"github.com/sky0621/cv-admin/src/ent/careertaskdescription"
)

// CareerTaskDescription is the model entity for the CareerTaskDescription schema.
type CareerTaskDescription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CareerTaskDescriptionQuery when eager-loading is set.
	Edges          CareerTaskDescriptionEdges `json:"edges"`
	career_task_id *int
}

// CareerTaskDescriptionEdges holds the relations/edges for other nodes in the graph.
type CareerTaskDescriptionEdges struct {
	// CareerTask holds the value of the careerTask edge.
	CareerTask *CareerTask `json:"careerTask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CareerTaskOrErr returns the CareerTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CareerTaskDescriptionEdges) CareerTaskOrErr() (*CareerTask, error) {
	if e.loadedTypes[0] {
		if e.CareerTask == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: careertask.Label}
		}
		return e.CareerTask, nil
	}
	return nil, &NotLoadedError{edge: "careerTask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CareerTaskDescription) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case careertaskdescription.FieldID:
			values[i] = new(sql.NullInt64)
		case careertaskdescription.FieldDescription:
			values[i] = new(sql.NullString)
		case careertaskdescription.ForeignKeys[0]: // career_task_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CareerTaskDescription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CareerTaskDescription fields.
func (ctd *CareerTaskDescription) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case careertaskdescription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ctd.ID = int(value.Int64)
		case careertaskdescription.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ctd.Description = value.String
			}
		case careertaskdescription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field career_task_id", value)
			} else if value.Valid {
				ctd.career_task_id = new(int)
				*ctd.career_task_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCareerTask queries the "careerTask" edge of the CareerTaskDescription entity.
func (ctd *CareerTaskDescription) QueryCareerTask() *CareerTaskQuery {
	return (&CareerTaskDescriptionClient{config: ctd.config}).QueryCareerTask(ctd)
}

// Update returns a builder for updating this CareerTaskDescription.
// Note that you need to call CareerTaskDescription.Unwrap() before calling this method if this CareerTaskDescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ctd *CareerTaskDescription) Update() *CareerTaskDescriptionUpdateOne {
	return (&CareerTaskDescriptionClient{config: ctd.config}).UpdateOne(ctd)
}

// Unwrap unwraps the CareerTaskDescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ctd *CareerTaskDescription) Unwrap() *CareerTaskDescription {
	_tx, ok := ctd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CareerTaskDescription is not a transactional entity")
	}
	ctd.config.driver = _tx.drv
	return ctd
}

// String implements the fmt.Stringer.
func (ctd *CareerTaskDescription) String() string {
	var builder strings.Builder
	builder.WriteString("CareerTaskDescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ctd.ID))
	builder.WriteString("description=")
	builder.WriteString(ctd.Description)
	builder.WriteByte(')')
	return builder.String()
}

// CareerTaskDescriptions is a parsable slice of CareerTaskDescription.
type CareerTaskDescriptions []*CareerTaskDescription

func (ctd CareerTaskDescriptions) config(cfg config) {
	for _i := range ctd {
		ctd[_i].config = cfg
	}
}
