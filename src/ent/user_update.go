// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/useractivity"
	"github.com/sky0621/cv-admin/src/ent/userappeal"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
	"github.com/sky0621/cv-admin/src/ent/usernote"
	"github.com/sky0621/cv-admin/src/ent/userqualification"
	"github.com/sky0621/cv-admin/src/ent/usersolution"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// ClearNickname clears the value of the "nickname" field.
func (uu *UserUpdate) ClearNickname() *UserUpdate {
	uu.mutation.ClearNickname()
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uu *UserUpdate) ClearAvatarURL() *UserUpdate {
	uu.mutation.ClearAvatarURL()
	return uu
}

// SetBirthdayYear sets the "birthday_year" field.
func (uu *UserUpdate) SetBirthdayYear(i int) *UserUpdate {
	uu.mutation.ResetBirthdayYear()
	uu.mutation.SetBirthdayYear(i)
	return uu
}

// SetNillableBirthdayYear sets the "birthday_year" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthdayYear(i *int) *UserUpdate {
	if i != nil {
		uu.SetBirthdayYear(*i)
	}
	return uu
}

// AddBirthdayYear adds i to the "birthday_year" field.
func (uu *UserUpdate) AddBirthdayYear(i int) *UserUpdate {
	uu.mutation.AddBirthdayYear(i)
	return uu
}

// SetBirthdayMonth sets the "birthday_month" field.
func (uu *UserUpdate) SetBirthdayMonth(i int) *UserUpdate {
	uu.mutation.ResetBirthdayMonth()
	uu.mutation.SetBirthdayMonth(i)
	return uu
}

// SetNillableBirthdayMonth sets the "birthday_month" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthdayMonth(i *int) *UserUpdate {
	if i != nil {
		uu.SetBirthdayMonth(*i)
	}
	return uu
}

// AddBirthdayMonth adds i to the "birthday_month" field.
func (uu *UserUpdate) AddBirthdayMonth(i int) *UserUpdate {
	uu.mutation.AddBirthdayMonth(i)
	return uu
}

// SetBirthdayDay sets the "birthday_day" field.
func (uu *UserUpdate) SetBirthdayDay(i int) *UserUpdate {
	uu.mutation.ResetBirthdayDay()
	uu.mutation.SetBirthdayDay(i)
	return uu
}

// SetNillableBirthdayDay sets the "birthday_day" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthdayDay(i *int) *UserUpdate {
	if i != nil {
		uu.SetBirthdayDay(*i)
	}
	return uu
}

// AddBirthdayDay adds i to the "birthday_day" field.
func (uu *UserUpdate) AddBirthdayDay(i int) *UserUpdate {
	uu.mutation.AddBirthdayDay(i)
	return uu
}

// SetJob sets the "job" field.
func (uu *UserUpdate) SetJob(s string) *UserUpdate {
	uu.mutation.SetJob(s)
	return uu
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJob(s *string) *UserUpdate {
	if s != nil {
		uu.SetJob(*s)
	}
	return uu
}

// ClearJob clears the value of the "job" field.
func (uu *UserUpdate) ClearJob() *UserUpdate {
	uu.mutation.ClearJob()
	return uu
}

// SetBelongTo sets the "belong_to" field.
func (uu *UserUpdate) SetBelongTo(s string) *UserUpdate {
	uu.mutation.SetBelongTo(s)
	return uu
}

// SetNillableBelongTo sets the "belong_to" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBelongTo(s *string) *UserUpdate {
	if s != nil {
		uu.SetBelongTo(*s)
	}
	return uu
}

// ClearBelongTo clears the value of the "belong_to" field.
func (uu *UserUpdate) ClearBelongTo() *UserUpdate {
	uu.mutation.ClearBelongTo()
	return uu
}

// SetPr sets the "pr" field.
func (uu *UserUpdate) SetPr(s string) *UserUpdate {
	uu.mutation.SetPr(s)
	return uu
}

// SetNillablePr sets the "pr" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePr(s *string) *UserUpdate {
	if s != nil {
		uu.SetPr(*s)
	}
	return uu
}

// ClearPr clears the value of the "pr" field.
func (uu *UserUpdate) ClearPr() *UserUpdate {
	uu.mutation.ClearPr()
	return uu
}

// AddActivityIDs adds the "activities" edge to the UserActivity entity by IDs.
func (uu *UserUpdate) AddActivityIDs(ids ...int) *UserUpdate {
	uu.mutation.AddActivityIDs(ids...)
	return uu
}

// AddActivities adds the "activities" edges to the UserActivity entity.
func (uu *UserUpdate) AddActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddActivityIDs(ids...)
}

// AddQualificationIDs adds the "qualifications" edge to the UserQualification entity by IDs.
func (uu *UserUpdate) AddQualificationIDs(ids ...int) *UserUpdate {
	uu.mutation.AddQualificationIDs(ids...)
	return uu
}

// AddQualifications adds the "qualifications" edges to the UserQualification entity.
func (uu *UserUpdate) AddQualifications(u ...*UserQualification) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddQualificationIDs(ids...)
}

// AddCareerGroupIDs adds the "careerGroups" edge to the UserCareerGroup entity by IDs.
func (uu *UserUpdate) AddCareerGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCareerGroupIDs(ids...)
	return uu
}

// AddCareerGroups adds the "careerGroups" edges to the UserCareerGroup entity.
func (uu *UserUpdate) AddCareerGroups(u ...*UserCareerGroup) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCareerGroupIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the UserNote entity by IDs.
func (uu *UserUpdate) AddNoteIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNoteIDs(ids...)
	return uu
}

// AddNotes adds the "notes" edges to the UserNote entity.
func (uu *UserUpdate) AddNotes(u ...*UserNote) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddNoteIDs(ids...)
}

// AddAppealIDs adds the "appeals" edge to the UserAppeal entity by IDs.
func (uu *UserUpdate) AddAppealIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAppealIDs(ids...)
	return uu
}

// AddAppeals adds the "appeals" edges to the UserAppeal entity.
func (uu *UserUpdate) AddAppeals(u ...*UserAppeal) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddAppealIDs(ids...)
}

// AddSolutionIDs adds the "solutions" edge to the UserSolution entity by IDs.
func (uu *UserUpdate) AddSolutionIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSolutionIDs(ids...)
	return uu
}

// AddSolutions adds the "solutions" edges to the UserSolution entity.
func (uu *UserUpdate) AddSolutions(u ...*UserSolution) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddSolutionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearActivities clears all "activities" edges to the UserActivity entity.
func (uu *UserUpdate) ClearActivities() *UserUpdate {
	uu.mutation.ClearActivities()
	return uu
}

// RemoveActivityIDs removes the "activities" edge to UserActivity entities by IDs.
func (uu *UserUpdate) RemoveActivityIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveActivityIDs(ids...)
	return uu
}

// RemoveActivities removes "activities" edges to UserActivity entities.
func (uu *UserUpdate) RemoveActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveActivityIDs(ids...)
}

// ClearQualifications clears all "qualifications" edges to the UserQualification entity.
func (uu *UserUpdate) ClearQualifications() *UserUpdate {
	uu.mutation.ClearQualifications()
	return uu
}

// RemoveQualificationIDs removes the "qualifications" edge to UserQualification entities by IDs.
func (uu *UserUpdate) RemoveQualificationIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveQualificationIDs(ids...)
	return uu
}

// RemoveQualifications removes "qualifications" edges to UserQualification entities.
func (uu *UserUpdate) RemoveQualifications(u ...*UserQualification) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveQualificationIDs(ids...)
}

// ClearCareerGroups clears all "careerGroups" edges to the UserCareerGroup entity.
func (uu *UserUpdate) ClearCareerGroups() *UserUpdate {
	uu.mutation.ClearCareerGroups()
	return uu
}

// RemoveCareerGroupIDs removes the "careerGroups" edge to UserCareerGroup entities by IDs.
func (uu *UserUpdate) RemoveCareerGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCareerGroupIDs(ids...)
	return uu
}

// RemoveCareerGroups removes "careerGroups" edges to UserCareerGroup entities.
func (uu *UserUpdate) RemoveCareerGroups(u ...*UserCareerGroup) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCareerGroupIDs(ids...)
}

// ClearNotes clears all "notes" edges to the UserNote entity.
func (uu *UserUpdate) ClearNotes() *UserUpdate {
	uu.mutation.ClearNotes()
	return uu
}

// RemoveNoteIDs removes the "notes" edge to UserNote entities by IDs.
func (uu *UserUpdate) RemoveNoteIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNoteIDs(ids...)
	return uu
}

// RemoveNotes removes "notes" edges to UserNote entities.
func (uu *UserUpdate) RemoveNotes(u ...*UserNote) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveNoteIDs(ids...)
}

// ClearAppeals clears all "appeals" edges to the UserAppeal entity.
func (uu *UserUpdate) ClearAppeals() *UserUpdate {
	uu.mutation.ClearAppeals()
	return uu
}

// RemoveAppealIDs removes the "appeals" edge to UserAppeal entities by IDs.
func (uu *UserUpdate) RemoveAppealIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAppealIDs(ids...)
	return uu
}

// RemoveAppeals removes "appeals" edges to UserAppeal entities.
func (uu *UserUpdate) RemoveAppeals(u ...*UserAppeal) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveAppealIDs(ids...)
}

// ClearSolutions clears all "solutions" edges to the UserSolution entity.
func (uu *UserUpdate) ClearSolutions() *UserUpdate {
	uu.mutation.ClearSolutions()
	return uu
}

// RemoveSolutionIDs removes the "solutions" edge to UserSolution entities by IDs.
func (uu *UserUpdate) RemoveSolutionIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSolutionIDs(ids...)
	return uu
}

// RemoveSolutions removes "solutions" edges to UserSolution entities.
func (uu *UserUpdate) RemoveSolutions(u ...*UserSolution) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveSolutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AvatarURL(); ok {
		if err := user.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "User.avatar_url": %w`, err)}
		}
	}
	if v, ok := uu.mutation.BirthdayYear(); ok {
		if err := user.BirthdayYearValidator(v); err != nil {
			return &ValidationError{Name: "birthday_year", err: fmt.Errorf(`ent: validator failed for field "User.birthday_year": %w`, err)}
		}
	}
	if v, ok := uu.mutation.BirthdayMonth(); ok {
		if err := user.BirthdayMonthValidator(v); err != nil {
			return &ValidationError{Name: "birthday_month", err: fmt.Errorf(`ent: validator failed for field "User.birthday_month": %w`, err)}
		}
	}
	if v, ok := uu.mutation.BirthdayDay(); ok {
		if err := user.BirthdayDayValidator(v); err != nil {
			return &ValidationError{Name: "birthday_day", err: fmt.Errorf(`ent: validator failed for field "User.birthday_day": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Job(); ok {
		if err := user.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "User.job": %w`, err)}
		}
	}
	if v, ok := uu.mutation.BelongTo(); ok {
		if err := user.BelongToValidator(v); err != nil {
			return &ValidationError{Name: "belong_to", err: fmt.Errorf(`ent: validator failed for field "User.belong_to": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Pr(); ok {
		if err := user.PrValidator(v); err != nil {
			return &ValidationError{Name: "pr", err: fmt.Errorf(`ent: validator failed for field "User.pr": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if uu.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uu.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uu.mutation.BirthdayYear(); ok {
		_spec.SetField(user.FieldBirthdayYear, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBirthdayYear(); ok {
		_spec.AddField(user.FieldBirthdayYear, field.TypeInt, value)
	}
	if value, ok := uu.mutation.BirthdayMonth(); ok {
		_spec.SetField(user.FieldBirthdayMonth, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBirthdayMonth(); ok {
		_spec.AddField(user.FieldBirthdayMonth, field.TypeInt, value)
	}
	if value, ok := uu.mutation.BirthdayDay(); ok {
		_spec.SetField(user.FieldBirthdayDay, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBirthdayDay(); ok {
		_spec.AddField(user.FieldBirthdayDay, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Job(); ok {
		_spec.SetField(user.FieldJob, field.TypeString, value)
	}
	if uu.mutation.JobCleared() {
		_spec.ClearField(user.FieldJob, field.TypeString)
	}
	if value, ok := uu.mutation.BelongTo(); ok {
		_spec.SetField(user.FieldBelongTo, field.TypeString, value)
	}
	if uu.mutation.BelongToCleared() {
		_spec.ClearField(user.FieldBelongTo, field.TypeString)
	}
	if value, ok := uu.mutation.Pr(); ok {
		_spec.SetField(user.FieldPr, field.TypeString, value)
	}
	if uu.mutation.PrCleared() {
		_spec.ClearField(user.FieldPr, field.TypeString)
	}
	if uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.QualificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedQualificationsIDs(); len(nodes) > 0 && !uu.mutation.QualificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.QualificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CareerGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCareerGroupsIDs(); len(nodes) > 0 && !uu.mutation.CareerGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CareerGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotesIDs(); len(nodes) > 0 && !uu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AppealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAppealsIDs(); len(nodes) > 0 && !uu.mutation.AppealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AppealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSolutionsIDs(); len(nodes) > 0 && !uu.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SolutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// ClearNickname clears the value of the "nickname" field.
func (uuo *UserUpdateOne) ClearNickname() *UserUpdateOne {
	uuo.mutation.ClearNickname()
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uuo *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	uuo.mutation.ClearAvatarURL()
	return uuo
}

// SetBirthdayYear sets the "birthday_year" field.
func (uuo *UserUpdateOne) SetBirthdayYear(i int) *UserUpdateOne {
	uuo.mutation.ResetBirthdayYear()
	uuo.mutation.SetBirthdayYear(i)
	return uuo
}

// SetNillableBirthdayYear sets the "birthday_year" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthdayYear(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBirthdayYear(*i)
	}
	return uuo
}

// AddBirthdayYear adds i to the "birthday_year" field.
func (uuo *UserUpdateOne) AddBirthdayYear(i int) *UserUpdateOne {
	uuo.mutation.AddBirthdayYear(i)
	return uuo
}

// SetBirthdayMonth sets the "birthday_month" field.
func (uuo *UserUpdateOne) SetBirthdayMonth(i int) *UserUpdateOne {
	uuo.mutation.ResetBirthdayMonth()
	uuo.mutation.SetBirthdayMonth(i)
	return uuo
}

// SetNillableBirthdayMonth sets the "birthday_month" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthdayMonth(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBirthdayMonth(*i)
	}
	return uuo
}

// AddBirthdayMonth adds i to the "birthday_month" field.
func (uuo *UserUpdateOne) AddBirthdayMonth(i int) *UserUpdateOne {
	uuo.mutation.AddBirthdayMonth(i)
	return uuo
}

// SetBirthdayDay sets the "birthday_day" field.
func (uuo *UserUpdateOne) SetBirthdayDay(i int) *UserUpdateOne {
	uuo.mutation.ResetBirthdayDay()
	uuo.mutation.SetBirthdayDay(i)
	return uuo
}

// SetNillableBirthdayDay sets the "birthday_day" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthdayDay(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBirthdayDay(*i)
	}
	return uuo
}

// AddBirthdayDay adds i to the "birthday_day" field.
func (uuo *UserUpdateOne) AddBirthdayDay(i int) *UserUpdateOne {
	uuo.mutation.AddBirthdayDay(i)
	return uuo
}

// SetJob sets the "job" field.
func (uuo *UserUpdateOne) SetJob(s string) *UserUpdateOne {
	uuo.mutation.SetJob(s)
	return uuo
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJob(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetJob(*s)
	}
	return uuo
}

// ClearJob clears the value of the "job" field.
func (uuo *UserUpdateOne) ClearJob() *UserUpdateOne {
	uuo.mutation.ClearJob()
	return uuo
}

// SetBelongTo sets the "belong_to" field.
func (uuo *UserUpdateOne) SetBelongTo(s string) *UserUpdateOne {
	uuo.mutation.SetBelongTo(s)
	return uuo
}

// SetNillableBelongTo sets the "belong_to" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBelongTo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBelongTo(*s)
	}
	return uuo
}

// ClearBelongTo clears the value of the "belong_to" field.
func (uuo *UserUpdateOne) ClearBelongTo() *UserUpdateOne {
	uuo.mutation.ClearBelongTo()
	return uuo
}

// SetPr sets the "pr" field.
func (uuo *UserUpdateOne) SetPr(s string) *UserUpdateOne {
	uuo.mutation.SetPr(s)
	return uuo
}

// SetNillablePr sets the "pr" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePr(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPr(*s)
	}
	return uuo
}

// ClearPr clears the value of the "pr" field.
func (uuo *UserUpdateOne) ClearPr() *UserUpdateOne {
	uuo.mutation.ClearPr()
	return uuo
}

// AddActivityIDs adds the "activities" edge to the UserActivity entity by IDs.
func (uuo *UserUpdateOne) AddActivityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddActivityIDs(ids...)
	return uuo
}

// AddActivities adds the "activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) AddActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddActivityIDs(ids...)
}

// AddQualificationIDs adds the "qualifications" edge to the UserQualification entity by IDs.
func (uuo *UserUpdateOne) AddQualificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddQualificationIDs(ids...)
	return uuo
}

// AddQualifications adds the "qualifications" edges to the UserQualification entity.
func (uuo *UserUpdateOne) AddQualifications(u ...*UserQualification) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddQualificationIDs(ids...)
}

// AddCareerGroupIDs adds the "careerGroups" edge to the UserCareerGroup entity by IDs.
func (uuo *UserUpdateOne) AddCareerGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCareerGroupIDs(ids...)
	return uuo
}

// AddCareerGroups adds the "careerGroups" edges to the UserCareerGroup entity.
func (uuo *UserUpdateOne) AddCareerGroups(u ...*UserCareerGroup) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCareerGroupIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the UserNote entity by IDs.
func (uuo *UserUpdateOne) AddNoteIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNoteIDs(ids...)
	return uuo
}

// AddNotes adds the "notes" edges to the UserNote entity.
func (uuo *UserUpdateOne) AddNotes(u ...*UserNote) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddNoteIDs(ids...)
}

// AddAppealIDs adds the "appeals" edge to the UserAppeal entity by IDs.
func (uuo *UserUpdateOne) AddAppealIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAppealIDs(ids...)
	return uuo
}

// AddAppeals adds the "appeals" edges to the UserAppeal entity.
func (uuo *UserUpdateOne) AddAppeals(u ...*UserAppeal) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddAppealIDs(ids...)
}

// AddSolutionIDs adds the "solutions" edge to the UserSolution entity by IDs.
func (uuo *UserUpdateOne) AddSolutionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSolutionIDs(ids...)
	return uuo
}

// AddSolutions adds the "solutions" edges to the UserSolution entity.
func (uuo *UserUpdateOne) AddSolutions(u ...*UserSolution) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddSolutionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearActivities clears all "activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) ClearActivities() *UserUpdateOne {
	uuo.mutation.ClearActivities()
	return uuo
}

// RemoveActivityIDs removes the "activities" edge to UserActivity entities by IDs.
func (uuo *UserUpdateOne) RemoveActivityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveActivityIDs(ids...)
	return uuo
}

// RemoveActivities removes "activities" edges to UserActivity entities.
func (uuo *UserUpdateOne) RemoveActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveActivityIDs(ids...)
}

// ClearQualifications clears all "qualifications" edges to the UserQualification entity.
func (uuo *UserUpdateOne) ClearQualifications() *UserUpdateOne {
	uuo.mutation.ClearQualifications()
	return uuo
}

// RemoveQualificationIDs removes the "qualifications" edge to UserQualification entities by IDs.
func (uuo *UserUpdateOne) RemoveQualificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveQualificationIDs(ids...)
	return uuo
}

// RemoveQualifications removes "qualifications" edges to UserQualification entities.
func (uuo *UserUpdateOne) RemoveQualifications(u ...*UserQualification) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveQualificationIDs(ids...)
}

// ClearCareerGroups clears all "careerGroups" edges to the UserCareerGroup entity.
func (uuo *UserUpdateOne) ClearCareerGroups() *UserUpdateOne {
	uuo.mutation.ClearCareerGroups()
	return uuo
}

// RemoveCareerGroupIDs removes the "careerGroups" edge to UserCareerGroup entities by IDs.
func (uuo *UserUpdateOne) RemoveCareerGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCareerGroupIDs(ids...)
	return uuo
}

// RemoveCareerGroups removes "careerGroups" edges to UserCareerGroup entities.
func (uuo *UserUpdateOne) RemoveCareerGroups(u ...*UserCareerGroup) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCareerGroupIDs(ids...)
}

// ClearNotes clears all "notes" edges to the UserNote entity.
func (uuo *UserUpdateOne) ClearNotes() *UserUpdateOne {
	uuo.mutation.ClearNotes()
	return uuo
}

// RemoveNoteIDs removes the "notes" edge to UserNote entities by IDs.
func (uuo *UserUpdateOne) RemoveNoteIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNoteIDs(ids...)
	return uuo
}

// RemoveNotes removes "notes" edges to UserNote entities.
func (uuo *UserUpdateOne) RemoveNotes(u ...*UserNote) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveNoteIDs(ids...)
}

// ClearAppeals clears all "appeals" edges to the UserAppeal entity.
func (uuo *UserUpdateOne) ClearAppeals() *UserUpdateOne {
	uuo.mutation.ClearAppeals()
	return uuo
}

// RemoveAppealIDs removes the "appeals" edge to UserAppeal entities by IDs.
func (uuo *UserUpdateOne) RemoveAppealIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAppealIDs(ids...)
	return uuo
}

// RemoveAppeals removes "appeals" edges to UserAppeal entities.
func (uuo *UserUpdateOne) RemoveAppeals(u ...*UserAppeal) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveAppealIDs(ids...)
}

// ClearSolutions clears all "solutions" edges to the UserSolution entity.
func (uuo *UserUpdateOne) ClearSolutions() *UserUpdateOne {
	uuo.mutation.ClearSolutions()
	return uuo
}

// RemoveSolutionIDs removes the "solutions" edge to UserSolution entities by IDs.
func (uuo *UserUpdateOne) RemoveSolutionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSolutionIDs(ids...)
	return uuo
}

// RemoveSolutions removes "solutions" edges to UserSolution entities.
func (uuo *UserUpdateOne) RemoveSolutions(u ...*UserSolution) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveSolutionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AvatarURL(); ok {
		if err := user.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "User.avatar_url": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.BirthdayYear(); ok {
		if err := user.BirthdayYearValidator(v); err != nil {
			return &ValidationError{Name: "birthday_year", err: fmt.Errorf(`ent: validator failed for field "User.birthday_year": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.BirthdayMonth(); ok {
		if err := user.BirthdayMonthValidator(v); err != nil {
			return &ValidationError{Name: "birthday_month", err: fmt.Errorf(`ent: validator failed for field "User.birthday_month": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.BirthdayDay(); ok {
		if err := user.BirthdayDayValidator(v); err != nil {
			return &ValidationError{Name: "birthday_day", err: fmt.Errorf(`ent: validator failed for field "User.birthday_day": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Job(); ok {
		if err := user.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "User.job": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.BelongTo(); ok {
		if err := user.BelongToValidator(v); err != nil {
			return &ValidationError{Name: "belong_to", err: fmt.Errorf(`ent: validator failed for field "User.belong_to": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Pr(); ok {
		if err := user.PrValidator(v); err != nil {
			return &ValidationError{Name: "pr", err: fmt.Errorf(`ent: validator failed for field "User.pr": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if uuo.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uuo.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uuo.mutation.BirthdayYear(); ok {
		_spec.SetField(user.FieldBirthdayYear, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBirthdayYear(); ok {
		_spec.AddField(user.FieldBirthdayYear, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.BirthdayMonth(); ok {
		_spec.SetField(user.FieldBirthdayMonth, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBirthdayMonth(); ok {
		_spec.AddField(user.FieldBirthdayMonth, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.BirthdayDay(); ok {
		_spec.SetField(user.FieldBirthdayDay, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBirthdayDay(); ok {
		_spec.AddField(user.FieldBirthdayDay, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Job(); ok {
		_spec.SetField(user.FieldJob, field.TypeString, value)
	}
	if uuo.mutation.JobCleared() {
		_spec.ClearField(user.FieldJob, field.TypeString)
	}
	if value, ok := uuo.mutation.BelongTo(); ok {
		_spec.SetField(user.FieldBelongTo, field.TypeString, value)
	}
	if uuo.mutation.BelongToCleared() {
		_spec.ClearField(user.FieldBelongTo, field.TypeString)
	}
	if value, ok := uuo.mutation.Pr(); ok {
		_spec.SetField(user.FieldPr, field.TypeString, value)
	}
	if uuo.mutation.PrCleared() {
		_spec.ClearField(user.FieldPr, field.TypeString)
	}
	if uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.QualificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedQualificationsIDs(); len(nodes) > 0 && !uuo.mutation.QualificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.QualificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QualificationsTable,
			Columns: []string{user.QualificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CareerGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCareerGroupsIDs(); len(nodes) > 0 && !uuo.mutation.CareerGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CareerGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CareerGroupsTable,
			Columns: []string{user.CareerGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !uuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AppealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAppealsIDs(); len(nodes) > 0 && !uuo.mutation.AppealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AppealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppealsTable,
			Columns: []string{user.AppealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSolutionsIDs(); len(nodes) > 0 && !uuo.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SolutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SolutionsTable,
			Columns: []string{user.SolutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
