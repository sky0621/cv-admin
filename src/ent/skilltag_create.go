// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/skill"
	"github.com/sky0621/cv-admin/src/ent/skilltag"
)

// SkillTagCreate is the builder for creating a SkillTag entity.
type SkillTagCreate struct {
	config
	mutation *SkillTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (stc *SkillTagCreate) SetName(s string) *SkillTagCreate {
	stc.mutation.SetName(s)
	return stc
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (stc *SkillTagCreate) AddSkillIDs(ids ...int) *SkillTagCreate {
	stc.mutation.AddSkillIDs(ids...)
	return stc
}

// AddSkills adds the "skills" edges to the Skill entity.
func (stc *SkillTagCreate) AddSkills(s ...*Skill) *SkillTagCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddSkillIDs(ids...)
}

// Mutation returns the SkillTagMutation object of the builder.
func (stc *SkillTagCreate) Mutation() *SkillTagMutation {
	return stc.mutation
}

// Save creates the SkillTag in the database.
func (stc *SkillTagCreate) Save(ctx context.Context) (*SkillTag, error) {
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SkillTagCreate) SaveX(ctx context.Context) *SkillTag {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SkillTagCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SkillTagCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SkillTagCreate) check() error {
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SkillTag.name"`)}
	}
	if v, ok := stc.mutation.Name(); ok {
		if err := skilltag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SkillTag.name": %w`, err)}
		}
	}
	return nil
}

func (stc *SkillTagCreate) sqlSave(ctx context.Context) (*SkillTag, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SkillTagCreate) createSpec() (*SkillTag, *sqlgraph.CreateSpec) {
	var (
		_node = &SkillTag{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(skilltag.Table, sqlgraph.NewFieldSpec(skilltag.FieldID, field.TypeInt))
	)
	_spec.OnConflict = stc.conflict
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(skilltag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := stc.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skilltag.SkillsTable,
			Columns: []string{skilltag.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SkillTag.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SkillTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (stc *SkillTagCreate) OnConflict(opts ...sql.ConflictOption) *SkillTagUpsertOne {
	stc.conflict = opts
	return &SkillTagUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SkillTagCreate) OnConflictColumns(columns ...string) *SkillTagUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SkillTagUpsertOne{
		create: stc,
	}
}

type (
	// SkillTagUpsertOne is the builder for "upsert"-ing
	//  one SkillTag node.
	SkillTagUpsertOne struct {
		create *SkillTagCreate
	}

	// SkillTagUpsert is the "OnConflict" setter.
	SkillTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SkillTagUpsert) SetName(v string) *SkillTagUpsert {
	u.Set(skilltag.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SkillTagUpsert) UpdateName() *SkillTagUpsert {
	u.SetExcluded(skilltag.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SkillTagUpsertOne) UpdateNewValues() *SkillTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SkillTagUpsertOne) Ignore() *SkillTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SkillTagUpsertOne) DoNothing() *SkillTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SkillTagCreate.OnConflict
// documentation for more info.
func (u *SkillTagUpsertOne) Update(set func(*SkillTagUpsert)) *SkillTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SkillTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SkillTagUpsertOne) SetName(v string) *SkillTagUpsertOne {
	return u.Update(func(s *SkillTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SkillTagUpsertOne) UpdateName() *SkillTagUpsertOne {
	return u.Update(func(s *SkillTagUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SkillTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SkillTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SkillTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SkillTagUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SkillTagUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SkillTagCreateBulk is the builder for creating many SkillTag entities in bulk.
type SkillTagCreateBulk struct {
	config
	err      error
	builders []*SkillTagCreate
	conflict []sql.ConflictOption
}

// Save creates the SkillTag entities in the database.
func (stcb *SkillTagCreateBulk) Save(ctx context.Context) ([]*SkillTag, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SkillTag, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkillTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SkillTagCreateBulk) SaveX(ctx context.Context) []*SkillTag {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SkillTagCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SkillTagCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SkillTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SkillTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (stcb *SkillTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *SkillTagUpsertBulk {
	stcb.conflict = opts
	return &SkillTagUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SkillTagCreateBulk) OnConflictColumns(columns ...string) *SkillTagUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SkillTagUpsertBulk{
		create: stcb,
	}
}

// SkillTagUpsertBulk is the builder for "upsert"-ing
// a bulk of SkillTag nodes.
type SkillTagUpsertBulk struct {
	create *SkillTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SkillTagUpsertBulk) UpdateNewValues() *SkillTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SkillTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SkillTagUpsertBulk) Ignore() *SkillTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SkillTagUpsertBulk) DoNothing() *SkillTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SkillTagCreateBulk.OnConflict
// documentation for more info.
func (u *SkillTagUpsertBulk) Update(set func(*SkillTagUpsert)) *SkillTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SkillTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SkillTagUpsertBulk) SetName(v string) *SkillTagUpsertBulk {
	return u.Update(func(s *SkillTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SkillTagUpsertBulk) UpdateName() *SkillTagUpsertBulk {
	return u.Update(func(s *SkillTagUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SkillTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SkillTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SkillTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SkillTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
