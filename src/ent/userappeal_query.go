// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/userappeal"
)

// UserAppealQuery is the builder for querying UserAppeal entities.
type UserAppealQuery struct {
	config
	ctx        *QueryContext
	order      []userappeal.OrderOption
	inters     []Interceptor
	predicates []predicate.UserAppeal
	withUser   *UserQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserAppealQuery builder.
func (uaq *UserAppealQuery) Where(ps ...predicate.UserAppeal) *UserAppealQuery {
	uaq.predicates = append(uaq.predicates, ps...)
	return uaq
}

// Limit the number of records to be returned by this query.
func (uaq *UserAppealQuery) Limit(limit int) *UserAppealQuery {
	uaq.ctx.Limit = &limit
	return uaq
}

// Offset to start from.
func (uaq *UserAppealQuery) Offset(offset int) *UserAppealQuery {
	uaq.ctx.Offset = &offset
	return uaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uaq *UserAppealQuery) Unique(unique bool) *UserAppealQuery {
	uaq.ctx.Unique = &unique
	return uaq
}

// Order specifies how the records should be ordered.
func (uaq *UserAppealQuery) Order(o ...userappeal.OrderOption) *UserAppealQuery {
	uaq.order = append(uaq.order, o...)
	return uaq
}

// QueryUser chains the current query on the "user" edge.
func (uaq *UserAppealQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: uaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userappeal.Table, userappeal.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userappeal.UserTable, userappeal.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserAppeal entity from the query.
// Returns a *NotFoundError when no UserAppeal was found.
func (uaq *UserAppealQuery) First(ctx context.Context) (*UserAppeal, error) {
	nodes, err := uaq.Limit(1).All(setContextOp(ctx, uaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userappeal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uaq *UserAppealQuery) FirstX(ctx context.Context) *UserAppeal {
	node, err := uaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserAppeal ID from the query.
// Returns a *NotFoundError when no UserAppeal ID was found.
func (uaq *UserAppealQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uaq.Limit(1).IDs(setContextOp(ctx, uaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userappeal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uaq *UserAppealQuery) FirstIDX(ctx context.Context) int {
	id, err := uaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserAppeal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserAppeal entity is found.
// Returns a *NotFoundError when no UserAppeal entities are found.
func (uaq *UserAppealQuery) Only(ctx context.Context) (*UserAppeal, error) {
	nodes, err := uaq.Limit(2).All(setContextOp(ctx, uaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userappeal.Label}
	default:
		return nil, &NotSingularError{userappeal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uaq *UserAppealQuery) OnlyX(ctx context.Context) *UserAppeal {
	node, err := uaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserAppeal ID in the query.
// Returns a *NotSingularError when more than one UserAppeal ID is found.
// Returns a *NotFoundError when no entities are found.
func (uaq *UserAppealQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uaq.Limit(2).IDs(setContextOp(ctx, uaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userappeal.Label}
	default:
		err = &NotSingularError{userappeal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uaq *UserAppealQuery) OnlyIDX(ctx context.Context) int {
	id, err := uaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserAppeals.
func (uaq *UserAppealQuery) All(ctx context.Context) ([]*UserAppeal, error) {
	ctx = setContextOp(ctx, uaq.ctx, "All")
	if err := uaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserAppeal, *UserAppealQuery]()
	return withInterceptors[[]*UserAppeal](ctx, uaq, qr, uaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uaq *UserAppealQuery) AllX(ctx context.Context) []*UserAppeal {
	nodes, err := uaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserAppeal IDs.
func (uaq *UserAppealQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uaq.ctx.Unique == nil && uaq.path != nil {
		uaq.Unique(true)
	}
	ctx = setContextOp(ctx, uaq.ctx, "IDs")
	if err = uaq.Select(userappeal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uaq *UserAppealQuery) IDsX(ctx context.Context) []int {
	ids, err := uaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uaq *UserAppealQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uaq.ctx, "Count")
	if err := uaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uaq, querierCount[*UserAppealQuery](), uaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uaq *UserAppealQuery) CountX(ctx context.Context) int {
	count, err := uaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uaq *UserAppealQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uaq.ctx, "Exist")
	switch _, err := uaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uaq *UserAppealQuery) ExistX(ctx context.Context) bool {
	exist, err := uaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserAppealQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uaq *UserAppealQuery) Clone() *UserAppealQuery {
	if uaq == nil {
		return nil
	}
	return &UserAppealQuery{
		config:     uaq.config,
		ctx:        uaq.ctx.Clone(),
		order:      append([]userappeal.OrderOption{}, uaq.order...),
		inters:     append([]Interceptor{}, uaq.inters...),
		predicates: append([]predicate.UserAppeal{}, uaq.predicates...),
		withUser:   uaq.withUser.Clone(),
		// clone intermediate query.
		sql:  uaq.sql.Clone(),
		path: uaq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uaq *UserAppealQuery) WithUser(opts ...func(*UserQuery)) *UserAppealQuery {
	query := (&UserClient{config: uaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uaq.withUser = query
	return uaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserAppeal.Query().
//		GroupBy(userappeal.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uaq *UserAppealQuery) GroupBy(field string, fields ...string) *UserAppealGroupBy {
	uaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserAppealGroupBy{build: uaq}
	grbuild.flds = &uaq.ctx.Fields
	grbuild.label = userappeal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UserAppeal.Query().
//		Select(userappeal.FieldCreateTime).
//		Scan(ctx, &v)
func (uaq *UserAppealQuery) Select(fields ...string) *UserAppealSelect {
	uaq.ctx.Fields = append(uaq.ctx.Fields, fields...)
	sbuild := &UserAppealSelect{UserAppealQuery: uaq}
	sbuild.label = userappeal.Label
	sbuild.flds, sbuild.scan = &uaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserAppealSelect configured with the given aggregations.
func (uaq *UserAppealQuery) Aggregate(fns ...AggregateFunc) *UserAppealSelect {
	return uaq.Select().Aggregate(fns...)
}

func (uaq *UserAppealQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uaq); err != nil {
				return err
			}
		}
	}
	for _, f := range uaq.ctx.Fields {
		if !userappeal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uaq.path != nil {
		prev, err := uaq.path(ctx)
		if err != nil {
			return err
		}
		uaq.sql = prev
	}
	return nil
}

func (uaq *UserAppealQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserAppeal, error) {
	var (
		nodes       = []*UserAppeal{}
		withFKs     = uaq.withFKs
		_spec       = uaq.querySpec()
		loadedTypes = [1]bool{
			uaq.withUser != nil,
		}
	)
	if uaq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userappeal.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserAppeal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserAppeal{config: uaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uaq.withUser; query != nil {
		if err := uaq.loadUser(ctx, query, nodes, nil,
			func(n *UserAppeal, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uaq *UserAppealQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserAppeal, init func(*UserAppeal), assign func(*UserAppeal, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserAppeal)
	for i := range nodes {
		if nodes[i].user_id == nil {
			continue
		}
		fk := *nodes[i].user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uaq *UserAppealQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uaq.querySpec()
	_spec.Node.Columns = uaq.ctx.Fields
	if len(uaq.ctx.Fields) > 0 {
		_spec.Unique = uaq.ctx.Unique != nil && *uaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uaq.driver, _spec)
}

func (uaq *UserAppealQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userappeal.Table, userappeal.Columns, sqlgraph.NewFieldSpec(userappeal.FieldID, field.TypeInt))
	_spec.From = uaq.sql
	if unique := uaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uaq.path != nil {
		_spec.Unique = true
	}
	if fields := uaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userappeal.FieldID)
		for i := range fields {
			if fields[i] != userappeal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uaq *UserAppealQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uaq.driver.Dialect())
	t1 := builder.Table(userappeal.Table)
	columns := uaq.ctx.Fields
	if len(columns) == 0 {
		columns = userappeal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uaq.sql != nil {
		selector = uaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uaq.ctx.Unique != nil && *uaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uaq.predicates {
		p(selector)
	}
	for _, p := range uaq.order {
		p(selector)
	}
	if offset := uaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserAppealGroupBy is the group-by builder for UserAppeal entities.
type UserAppealGroupBy struct {
	selector
	build *UserAppealQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uagb *UserAppealGroupBy) Aggregate(fns ...AggregateFunc) *UserAppealGroupBy {
	uagb.fns = append(uagb.fns, fns...)
	return uagb
}

// Scan applies the selector query and scans the result into the given value.
func (uagb *UserAppealGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uagb.build.ctx, "GroupBy")
	if err := uagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserAppealQuery, *UserAppealGroupBy](ctx, uagb.build, uagb, uagb.build.inters, v)
}

func (uagb *UserAppealGroupBy) sqlScan(ctx context.Context, root *UserAppealQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uagb.fns))
	for _, fn := range uagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uagb.flds)+len(uagb.fns))
		for _, f := range *uagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserAppealSelect is the builder for selecting fields of UserAppeal entities.
type UserAppealSelect struct {
	*UserAppealQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uas *UserAppealSelect) Aggregate(fns ...AggregateFunc) *UserAppealSelect {
	uas.fns = append(uas.fns, fns...)
	return uas
}

// Scan applies the selector query and scans the result into the given value.
func (uas *UserAppealSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uas.ctx, "Select")
	if err := uas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserAppealQuery, *UserAppealSelect](ctx, uas.UserAppealQuery, uas, uas.inters, v)
}

func (uas *UserAppealSelect) sqlScan(ctx context.Context, root *UserAppealQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uas.fns))
	for _, fn := range uas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
