// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky0621/cv-admin/src/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// BirthdayYear applies equality check predicate on the "birthday_year" field. It's identical to BirthdayYearEQ.
func BirthdayYear(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayYear, v))
}

// BirthdayMonth applies equality check predicate on the "birthday_month" field. It's identical to BirthdayMonthEQ.
func BirthdayMonth(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayMonth, v))
}

// BirthdayDay applies equality check predicate on the "birthday_day" field. It's identical to BirthdayDayEQ.
func BirthdayDay(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayDay, v))
}

// Job applies equality check predicate on the "job" field. It's identical to JobEQ.
func Job(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJob, v))
}

// BelongTo applies equality check predicate on the "belong_to" field. It's identical to BelongToEQ.
func BelongTo(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBelongTo, v))
}

// Pr applies equality check predicate on the "pr" field. It's identical to PrEQ.
func Pr(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPr, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarURL, v))
}

// BirthdayYearEQ applies the EQ predicate on the "birthday_year" field.
func BirthdayYearEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayYear, v))
}

// BirthdayYearNEQ applies the NEQ predicate on the "birthday_year" field.
func BirthdayYearNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthdayYear, v))
}

// BirthdayYearIn applies the In predicate on the "birthday_year" field.
func BirthdayYearIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthdayYear, vs...))
}

// BirthdayYearNotIn applies the NotIn predicate on the "birthday_year" field.
func BirthdayYearNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthdayYear, vs...))
}

// BirthdayYearGT applies the GT predicate on the "birthday_year" field.
func BirthdayYearGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthdayYear, v))
}

// BirthdayYearGTE applies the GTE predicate on the "birthday_year" field.
func BirthdayYearGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthdayYear, v))
}

// BirthdayYearLT applies the LT predicate on the "birthday_year" field.
func BirthdayYearLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthdayYear, v))
}

// BirthdayYearLTE applies the LTE predicate on the "birthday_year" field.
func BirthdayYearLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthdayYear, v))
}

// BirthdayMonthEQ applies the EQ predicate on the "birthday_month" field.
func BirthdayMonthEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayMonth, v))
}

// BirthdayMonthNEQ applies the NEQ predicate on the "birthday_month" field.
func BirthdayMonthNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthdayMonth, v))
}

// BirthdayMonthIn applies the In predicate on the "birthday_month" field.
func BirthdayMonthIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthdayMonth, vs...))
}

// BirthdayMonthNotIn applies the NotIn predicate on the "birthday_month" field.
func BirthdayMonthNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthdayMonth, vs...))
}

// BirthdayMonthGT applies the GT predicate on the "birthday_month" field.
func BirthdayMonthGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthdayMonth, v))
}

// BirthdayMonthGTE applies the GTE predicate on the "birthday_month" field.
func BirthdayMonthGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthdayMonth, v))
}

// BirthdayMonthLT applies the LT predicate on the "birthday_month" field.
func BirthdayMonthLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthdayMonth, v))
}

// BirthdayMonthLTE applies the LTE predicate on the "birthday_month" field.
func BirthdayMonthLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthdayMonth, v))
}

// BirthdayDayEQ applies the EQ predicate on the "birthday_day" field.
func BirthdayDayEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdayDay, v))
}

// BirthdayDayNEQ applies the NEQ predicate on the "birthday_day" field.
func BirthdayDayNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthdayDay, v))
}

// BirthdayDayIn applies the In predicate on the "birthday_day" field.
func BirthdayDayIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthdayDay, vs...))
}

// BirthdayDayNotIn applies the NotIn predicate on the "birthday_day" field.
func BirthdayDayNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthdayDay, vs...))
}

// BirthdayDayGT applies the GT predicate on the "birthday_day" field.
func BirthdayDayGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthdayDay, v))
}

// BirthdayDayGTE applies the GTE predicate on the "birthday_day" field.
func BirthdayDayGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthdayDay, v))
}

// BirthdayDayLT applies the LT predicate on the "birthday_day" field.
func BirthdayDayLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthdayDay, v))
}

// BirthdayDayLTE applies the LTE predicate on the "birthday_day" field.
func BirthdayDayLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthdayDay, v))
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJob, v))
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldJob, v))
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldJob, vs...))
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldJob, vs...))
}

// JobGT applies the GT predicate on the "job" field.
func JobGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldJob, v))
}

// JobGTE applies the GTE predicate on the "job" field.
func JobGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldJob, v))
}

// JobLT applies the LT predicate on the "job" field.
func JobLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldJob, v))
}

// JobLTE applies the LTE predicate on the "job" field.
func JobLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldJob, v))
}

// JobContains applies the Contains predicate on the "job" field.
func JobContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldJob, v))
}

// JobHasPrefix applies the HasPrefix predicate on the "job" field.
func JobHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldJob, v))
}

// JobHasSuffix applies the HasSuffix predicate on the "job" field.
func JobHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldJob, v))
}

// JobIsNil applies the IsNil predicate on the "job" field.
func JobIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldJob))
}

// JobNotNil applies the NotNil predicate on the "job" field.
func JobNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldJob))
}

// JobEqualFold applies the EqualFold predicate on the "job" field.
func JobEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldJob, v))
}

// JobContainsFold applies the ContainsFold predicate on the "job" field.
func JobContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldJob, v))
}

// BelongToEQ applies the EQ predicate on the "belong_to" field.
func BelongToEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBelongTo, v))
}

// BelongToNEQ applies the NEQ predicate on the "belong_to" field.
func BelongToNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBelongTo, v))
}

// BelongToIn applies the In predicate on the "belong_to" field.
func BelongToIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBelongTo, vs...))
}

// BelongToNotIn applies the NotIn predicate on the "belong_to" field.
func BelongToNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBelongTo, vs...))
}

// BelongToGT applies the GT predicate on the "belong_to" field.
func BelongToGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBelongTo, v))
}

// BelongToGTE applies the GTE predicate on the "belong_to" field.
func BelongToGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBelongTo, v))
}

// BelongToLT applies the LT predicate on the "belong_to" field.
func BelongToLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBelongTo, v))
}

// BelongToLTE applies the LTE predicate on the "belong_to" field.
func BelongToLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBelongTo, v))
}

// BelongToContains applies the Contains predicate on the "belong_to" field.
func BelongToContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBelongTo, v))
}

// BelongToHasPrefix applies the HasPrefix predicate on the "belong_to" field.
func BelongToHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBelongTo, v))
}

// BelongToHasSuffix applies the HasSuffix predicate on the "belong_to" field.
func BelongToHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBelongTo, v))
}

// BelongToIsNil applies the IsNil predicate on the "belong_to" field.
func BelongToIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBelongTo))
}

// BelongToNotNil applies the NotNil predicate on the "belong_to" field.
func BelongToNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBelongTo))
}

// BelongToEqualFold applies the EqualFold predicate on the "belong_to" field.
func BelongToEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBelongTo, v))
}

// BelongToContainsFold applies the ContainsFold predicate on the "belong_to" field.
func BelongToContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBelongTo, v))
}

// PrEQ applies the EQ predicate on the "pr" field.
func PrEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPr, v))
}

// PrNEQ applies the NEQ predicate on the "pr" field.
func PrNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPr, v))
}

// PrIn applies the In predicate on the "pr" field.
func PrIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPr, vs...))
}

// PrNotIn applies the NotIn predicate on the "pr" field.
func PrNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPr, vs...))
}

// PrGT applies the GT predicate on the "pr" field.
func PrGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPr, v))
}

// PrGTE applies the GTE predicate on the "pr" field.
func PrGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPr, v))
}

// PrLT applies the LT predicate on the "pr" field.
func PrLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPr, v))
}

// PrLTE applies the LTE predicate on the "pr" field.
func PrLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPr, v))
}

// PrContains applies the Contains predicate on the "pr" field.
func PrContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPr, v))
}

// PrHasPrefix applies the HasPrefix predicate on the "pr" field.
func PrHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPr, v))
}

// PrHasSuffix applies the HasSuffix predicate on the "pr" field.
func PrHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPr, v))
}

// PrIsNil applies the IsNil predicate on the "pr" field.
func PrIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPr))
}

// PrNotNil applies the NotNil predicate on the "pr" field.
func PrNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPr))
}

// PrEqualFold applies the EqualFold predicate on the "pr" field.
func PrEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPr, v))
}

// PrContainsFold applies the ContainsFold predicate on the "pr" field.
func PrContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPr, v))
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.UserActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQualifications applies the HasEdge predicate on the "qualifications" edge.
func HasQualifications() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QualificationsTable, QualificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQualificationsWith applies the HasEdge predicate on the "qualifications" edge with a given conditions (other predicates).
func HasQualificationsWith(preds ...predicate.UserQualification) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newQualificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCareerGroups applies the HasEdge predicate on the "careerGroups" edge.
func HasCareerGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CareerGroupsTable, CareerGroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCareerGroupsWith applies the HasEdge predicate on the "careerGroups" edge with a given conditions (other predicates).
func HasCareerGroupsWith(preds ...predicate.UserCareerGroup) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCareerGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.UserNote) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
