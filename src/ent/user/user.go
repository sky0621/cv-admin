// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldBirthdayYear holds the string denoting the birthday_year field in the database.
	FieldBirthdayYear = "birthday_year"
	// FieldBirthdayMonth holds the string denoting the birthday_month field in the database.
	FieldBirthdayMonth = "birthday_month"
	// FieldBirthdayDay holds the string denoting the birthday_day field in the database.
	FieldBirthdayDay = "birthday_day"
	// FieldJob holds the string denoting the job field in the database.
	FieldJob = "job"
	// FieldBelongTo holds the string denoting the belong_to field in the database.
	FieldBelongTo = "belong_to"
	// FieldPr holds the string denoting the pr field in the database.
	FieldPr = "pr"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeQualifications holds the string denoting the qualifications edge name in mutations.
	EdgeQualifications = "qualifications"
	// EdgeCareerGroups holds the string denoting the careergroups edge name in mutations.
	EdgeCareerGroups = "careerGroups"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgeSolutions holds the string denoting the solutions edge name in mutations.
	EdgeSolutions = "solutions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "user_activities"
	// ActivitiesInverseTable is the table name for the UserActivity entity.
	// It exists in this package in order to avoid circular dependency with the "useractivity" package.
	ActivitiesInverseTable = "user_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "user_id"
	// QualificationsTable is the table that holds the qualifications relation/edge.
	QualificationsTable = "user_qualifications"
	// QualificationsInverseTable is the table name for the UserQualification entity.
	// It exists in this package in order to avoid circular dependency with the "userqualification" package.
	QualificationsInverseTable = "user_qualifications"
	// QualificationsColumn is the table column denoting the qualifications relation/edge.
	QualificationsColumn = "user_id"
	// CareerGroupsTable is the table that holds the careerGroups relation/edge.
	CareerGroupsTable = "user_career_groups"
	// CareerGroupsInverseTable is the table name for the UserCareerGroup entity.
	// It exists in this package in order to avoid circular dependency with the "usercareergroup" package.
	CareerGroupsInverseTable = "user_career_groups"
	// CareerGroupsColumn is the table column denoting the careerGroups relation/edge.
	CareerGroupsColumn = "user_id"
	// NotesTable is the table that holds the notes relation/edge.
	NotesTable = "user_notes"
	// NotesInverseTable is the table name for the UserNote entity.
	// It exists in this package in order to avoid circular dependency with the "usernote" package.
	NotesInverseTable = "user_notes"
	// NotesColumn is the table column denoting the notes relation/edge.
	NotesColumn = "user_id"
	// SolutionsTable is the table that holds the solutions relation/edge.
	SolutionsTable = "user_solutions"
	// SolutionsInverseTable is the table name for the UserSolution entity.
	// It exists in this package in order to avoid circular dependency with the "usersolution" package.
	SolutionsInverseTable = "user_solutions"
	// SolutionsColumn is the table column denoting the solutions relation/edge.
	SolutionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldNickname,
	FieldAvatarURL,
	FieldBirthdayYear,
	FieldBirthdayMonth,
	FieldBirthdayDay,
	FieldJob,
	FieldBelongTo,
	FieldPr,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
	// AvatarURLValidator is a validator for the "avatar_url" field. It is called by the builders before save.
	AvatarURLValidator func(string) error
	// BirthdayYearValidator is a validator for the "birthday_year" field. It is called by the builders before save.
	BirthdayYearValidator func(int) error
	// BirthdayMonthValidator is a validator for the "birthday_month" field. It is called by the builders before save.
	BirthdayMonthValidator func(int) error
	// BirthdayDayValidator is a validator for the "birthday_day" field. It is called by the builders before save.
	BirthdayDayValidator func(int) error
	// JobValidator is a validator for the "job" field. It is called by the builders before save.
	JobValidator func(string) error
	// BelongToValidator is a validator for the "belong_to" field. It is called by the builders before save.
	BelongToValidator func(string) error
	// PrValidator is a validator for the "pr" field. It is called by the builders before save.
	PrValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByBirthdayYear orders the results by the birthday_year field.
func ByBirthdayYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthdayYear, opts...).ToFunc()
}

// ByBirthdayMonth orders the results by the birthday_month field.
func ByBirthdayMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthdayMonth, opts...).ToFunc()
}

// ByBirthdayDay orders the results by the birthday_day field.
func ByBirthdayDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthdayDay, opts...).ToFunc()
}

// ByJob orders the results by the job field.
func ByJob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJob, opts...).ToFunc()
}

// ByBelongTo orders the results by the belong_to field.
func ByBelongTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBelongTo, opts...).ToFunc()
}

// ByPr orders the results by the pr field.
func ByPr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPr, opts...).ToFunc()
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQualificationsCount orders the results by qualifications count.
func ByQualificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQualificationsStep(), opts...)
	}
}

// ByQualifications orders the results by qualifications terms.
func ByQualifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQualificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCareerGroupsCount orders the results by careerGroups count.
func ByCareerGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareerGroupsStep(), opts...)
	}
}

// ByCareerGroups orders the results by careerGroups terms.
func ByCareerGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotesCount orders the results by notes count.
func ByNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotesStep(), opts...)
	}
}

// ByNotes orders the results by notes terms.
func ByNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySolutionsCount orders the results by solutions count.
func BySolutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSolutionsStep(), opts...)
	}
}

// BySolutions orders the results by solutions terms.
func BySolutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSolutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newQualificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QualificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QualificationsTable, QualificationsColumn),
	)
}
func newCareerGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareerGroupsTable, CareerGroupsColumn),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
	)
}
func newSolutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SolutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SolutionsTable, SolutionsColumn),
	)
}
