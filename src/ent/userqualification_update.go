// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/userqualification"
)

// UserQualificationUpdate is the builder for updating UserQualification entities.
type UserQualificationUpdate struct {
	config
	hooks    []Hook
	mutation *UserQualificationMutation
}

// Where appends a list predicates to the UserQualificationUpdate builder.
func (uqu *UserQualificationUpdate) Where(ps ...predicate.UserQualification) *UserQualificationUpdate {
	uqu.mutation.Where(ps...)
	return uqu
}

// SetUpdateTime sets the "update_time" field.
func (uqu *UserQualificationUpdate) SetUpdateTime(t time.Time) *UserQualificationUpdate {
	uqu.mutation.SetUpdateTime(t)
	return uqu
}

// SetName sets the "name" field.
func (uqu *UserQualificationUpdate) SetName(s string) *UserQualificationUpdate {
	uqu.mutation.SetName(s)
	return uqu
}

// SetOrganization sets the "organization" field.
func (uqu *UserQualificationUpdate) SetOrganization(s string) *UserQualificationUpdate {
	uqu.mutation.SetOrganization(s)
	return uqu
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (uqu *UserQualificationUpdate) SetNillableOrganization(s *string) *UserQualificationUpdate {
	if s != nil {
		uqu.SetOrganization(*s)
	}
	return uqu
}

// ClearOrganization clears the value of the "organization" field.
func (uqu *UserQualificationUpdate) ClearOrganization() *UserQualificationUpdate {
	uqu.mutation.ClearOrganization()
	return uqu
}

// SetURL sets the "url" field.
func (uqu *UserQualificationUpdate) SetURL(s string) *UserQualificationUpdate {
	uqu.mutation.SetURL(s)
	return uqu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uqu *UserQualificationUpdate) SetNillableURL(s *string) *UserQualificationUpdate {
	if s != nil {
		uqu.SetURL(*s)
	}
	return uqu
}

// ClearURL clears the value of the "url" field.
func (uqu *UserQualificationUpdate) ClearURL() *UserQualificationUpdate {
	uqu.mutation.ClearURL()
	return uqu
}

// SetGotDate sets the "got_date" field.
func (uqu *UserQualificationUpdate) SetGotDate(s string) *UserQualificationUpdate {
	uqu.mutation.SetGotDate(s)
	return uqu
}

// SetNillableGotDate sets the "got_date" field if the given value is not nil.
func (uqu *UserQualificationUpdate) SetNillableGotDate(s *string) *UserQualificationUpdate {
	if s != nil {
		uqu.SetGotDate(*s)
	}
	return uqu
}

// ClearGotDate clears the value of the "got_date" field.
func (uqu *UserQualificationUpdate) ClearGotDate() *UserQualificationUpdate {
	uqu.mutation.ClearGotDate()
	return uqu
}

// SetMemo sets the "memo" field.
func (uqu *UserQualificationUpdate) SetMemo(s string) *UserQualificationUpdate {
	uqu.mutation.SetMemo(s)
	return uqu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uqu *UserQualificationUpdate) SetNillableMemo(s *string) *UserQualificationUpdate {
	if s != nil {
		uqu.SetMemo(*s)
	}
	return uqu
}

// ClearMemo clears the value of the "memo" field.
func (uqu *UserQualificationUpdate) ClearMemo() *UserQualificationUpdate {
	uqu.mutation.ClearMemo()
	return uqu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uqu *UserQualificationUpdate) SetUserID(id int) *UserQualificationUpdate {
	uqu.mutation.SetUserID(id)
	return uqu
}

// SetUser sets the "user" edge to the User entity.
func (uqu *UserQualificationUpdate) SetUser(u *User) *UserQualificationUpdate {
	return uqu.SetUserID(u.ID)
}

// Mutation returns the UserQualificationMutation object of the builder.
func (uqu *UserQualificationUpdate) Mutation() *UserQualificationMutation {
	return uqu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uqu *UserQualificationUpdate) ClearUser() *UserQualificationUpdate {
	uqu.mutation.ClearUser()
	return uqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uqu *UserQualificationUpdate) Save(ctx context.Context) (int, error) {
	uqu.defaults()
	return withHooks(ctx, uqu.sqlSave, uqu.mutation, uqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uqu *UserQualificationUpdate) SaveX(ctx context.Context) int {
	affected, err := uqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uqu *UserQualificationUpdate) Exec(ctx context.Context) error {
	_, err := uqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqu *UserQualificationUpdate) ExecX(ctx context.Context) {
	if err := uqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqu *UserQualificationUpdate) defaults() {
	if _, ok := uqu.mutation.UpdateTime(); !ok {
		v := userqualification.UpdateDefaultUpdateTime()
		uqu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uqu *UserQualificationUpdate) check() error {
	if v, ok := uqu.mutation.Name(); ok {
		if err := userqualification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserQualification.name": %w`, err)}
		}
	}
	if v, ok := uqu.mutation.Organization(); ok {
		if err := userqualification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "UserQualification.organization": %w`, err)}
		}
	}
	if v, ok := uqu.mutation.URL(); ok {
		if err := userqualification.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "UserQualification.url": %w`, err)}
		}
	}
	if v, ok := uqu.mutation.GotDate(); ok {
		if err := userqualification.GotDateValidator(v); err != nil {
			return &ValidationError{Name: "got_date", err: fmt.Errorf(`ent: validator failed for field "UserQualification.got_date": %w`, err)}
		}
	}
	if v, ok := uqu.mutation.Memo(); ok {
		if err := userqualification.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "UserQualification.memo": %w`, err)}
		}
	}
	if _, ok := uqu.mutation.UserID(); uqu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserQualification.user"`)
	}
	return nil
}

func (uqu *UserQualificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userqualification.Table, userqualification.Columns, sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt))
	if ps := uqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uqu.mutation.UpdateTime(); ok {
		_spec.SetField(userqualification.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uqu.mutation.Name(); ok {
		_spec.SetField(userqualification.FieldName, field.TypeString, value)
	}
	if value, ok := uqu.mutation.Organization(); ok {
		_spec.SetField(userqualification.FieldOrganization, field.TypeString, value)
	}
	if uqu.mutation.OrganizationCleared() {
		_spec.ClearField(userqualification.FieldOrganization, field.TypeString)
	}
	if value, ok := uqu.mutation.URL(); ok {
		_spec.SetField(userqualification.FieldURL, field.TypeString, value)
	}
	if uqu.mutation.URLCleared() {
		_spec.ClearField(userqualification.FieldURL, field.TypeString)
	}
	if value, ok := uqu.mutation.GotDate(); ok {
		_spec.SetField(userqualification.FieldGotDate, field.TypeString, value)
	}
	if uqu.mutation.GotDateCleared() {
		_spec.ClearField(userqualification.FieldGotDate, field.TypeString)
	}
	if value, ok := uqu.mutation.Memo(); ok {
		_spec.SetField(userqualification.FieldMemo, field.TypeString, value)
	}
	if uqu.mutation.MemoCleared() {
		_spec.ClearField(userqualification.FieldMemo, field.TypeString)
	}
	if uqu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userqualification.UserTable,
			Columns: []string{userqualification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userqualification.UserTable,
			Columns: []string{userqualification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userqualification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uqu.mutation.done = true
	return n, nil
}

// UserQualificationUpdateOne is the builder for updating a single UserQualification entity.
type UserQualificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserQualificationMutation
}

// SetUpdateTime sets the "update_time" field.
func (uquo *UserQualificationUpdateOne) SetUpdateTime(t time.Time) *UserQualificationUpdateOne {
	uquo.mutation.SetUpdateTime(t)
	return uquo
}

// SetName sets the "name" field.
func (uquo *UserQualificationUpdateOne) SetName(s string) *UserQualificationUpdateOne {
	uquo.mutation.SetName(s)
	return uquo
}

// SetOrganization sets the "organization" field.
func (uquo *UserQualificationUpdateOne) SetOrganization(s string) *UserQualificationUpdateOne {
	uquo.mutation.SetOrganization(s)
	return uquo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (uquo *UserQualificationUpdateOne) SetNillableOrganization(s *string) *UserQualificationUpdateOne {
	if s != nil {
		uquo.SetOrganization(*s)
	}
	return uquo
}

// ClearOrganization clears the value of the "organization" field.
func (uquo *UserQualificationUpdateOne) ClearOrganization() *UserQualificationUpdateOne {
	uquo.mutation.ClearOrganization()
	return uquo
}

// SetURL sets the "url" field.
func (uquo *UserQualificationUpdateOne) SetURL(s string) *UserQualificationUpdateOne {
	uquo.mutation.SetURL(s)
	return uquo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uquo *UserQualificationUpdateOne) SetNillableURL(s *string) *UserQualificationUpdateOne {
	if s != nil {
		uquo.SetURL(*s)
	}
	return uquo
}

// ClearURL clears the value of the "url" field.
func (uquo *UserQualificationUpdateOne) ClearURL() *UserQualificationUpdateOne {
	uquo.mutation.ClearURL()
	return uquo
}

// SetGotDate sets the "got_date" field.
func (uquo *UserQualificationUpdateOne) SetGotDate(s string) *UserQualificationUpdateOne {
	uquo.mutation.SetGotDate(s)
	return uquo
}

// SetNillableGotDate sets the "got_date" field if the given value is not nil.
func (uquo *UserQualificationUpdateOne) SetNillableGotDate(s *string) *UserQualificationUpdateOne {
	if s != nil {
		uquo.SetGotDate(*s)
	}
	return uquo
}

// ClearGotDate clears the value of the "got_date" field.
func (uquo *UserQualificationUpdateOne) ClearGotDate() *UserQualificationUpdateOne {
	uquo.mutation.ClearGotDate()
	return uquo
}

// SetMemo sets the "memo" field.
func (uquo *UserQualificationUpdateOne) SetMemo(s string) *UserQualificationUpdateOne {
	uquo.mutation.SetMemo(s)
	return uquo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uquo *UserQualificationUpdateOne) SetNillableMemo(s *string) *UserQualificationUpdateOne {
	if s != nil {
		uquo.SetMemo(*s)
	}
	return uquo
}

// ClearMemo clears the value of the "memo" field.
func (uquo *UserQualificationUpdateOne) ClearMemo() *UserQualificationUpdateOne {
	uquo.mutation.ClearMemo()
	return uquo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uquo *UserQualificationUpdateOne) SetUserID(id int) *UserQualificationUpdateOne {
	uquo.mutation.SetUserID(id)
	return uquo
}

// SetUser sets the "user" edge to the User entity.
func (uquo *UserQualificationUpdateOne) SetUser(u *User) *UserQualificationUpdateOne {
	return uquo.SetUserID(u.ID)
}

// Mutation returns the UserQualificationMutation object of the builder.
func (uquo *UserQualificationUpdateOne) Mutation() *UserQualificationMutation {
	return uquo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uquo *UserQualificationUpdateOne) ClearUser() *UserQualificationUpdateOne {
	uquo.mutation.ClearUser()
	return uquo
}

// Where appends a list predicates to the UserQualificationUpdate builder.
func (uquo *UserQualificationUpdateOne) Where(ps ...predicate.UserQualification) *UserQualificationUpdateOne {
	uquo.mutation.Where(ps...)
	return uquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uquo *UserQualificationUpdateOne) Select(field string, fields ...string) *UserQualificationUpdateOne {
	uquo.fields = append([]string{field}, fields...)
	return uquo
}

// Save executes the query and returns the updated UserQualification entity.
func (uquo *UserQualificationUpdateOne) Save(ctx context.Context) (*UserQualification, error) {
	uquo.defaults()
	return withHooks(ctx, uquo.sqlSave, uquo.mutation, uquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uquo *UserQualificationUpdateOne) SaveX(ctx context.Context) *UserQualification {
	node, err := uquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uquo *UserQualificationUpdateOne) Exec(ctx context.Context) error {
	_, err := uquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uquo *UserQualificationUpdateOne) ExecX(ctx context.Context) {
	if err := uquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uquo *UserQualificationUpdateOne) defaults() {
	if _, ok := uquo.mutation.UpdateTime(); !ok {
		v := userqualification.UpdateDefaultUpdateTime()
		uquo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uquo *UserQualificationUpdateOne) check() error {
	if v, ok := uquo.mutation.Name(); ok {
		if err := userqualification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserQualification.name": %w`, err)}
		}
	}
	if v, ok := uquo.mutation.Organization(); ok {
		if err := userqualification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "UserQualification.organization": %w`, err)}
		}
	}
	if v, ok := uquo.mutation.URL(); ok {
		if err := userqualification.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "UserQualification.url": %w`, err)}
		}
	}
	if v, ok := uquo.mutation.GotDate(); ok {
		if err := userqualification.GotDateValidator(v); err != nil {
			return &ValidationError{Name: "got_date", err: fmt.Errorf(`ent: validator failed for field "UserQualification.got_date": %w`, err)}
		}
	}
	if v, ok := uquo.mutation.Memo(); ok {
		if err := userqualification.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "UserQualification.memo": %w`, err)}
		}
	}
	if _, ok := uquo.mutation.UserID(); uquo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserQualification.user"`)
	}
	return nil
}

func (uquo *UserQualificationUpdateOne) sqlSave(ctx context.Context) (_node *UserQualification, err error) {
	if err := uquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userqualification.Table, userqualification.Columns, sqlgraph.NewFieldSpec(userqualification.FieldID, field.TypeInt))
	id, ok := uquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserQualification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userqualification.FieldID)
		for _, f := range fields {
			if !userqualification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userqualification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uquo.mutation.UpdateTime(); ok {
		_spec.SetField(userqualification.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uquo.mutation.Name(); ok {
		_spec.SetField(userqualification.FieldName, field.TypeString, value)
	}
	if value, ok := uquo.mutation.Organization(); ok {
		_spec.SetField(userqualification.FieldOrganization, field.TypeString, value)
	}
	if uquo.mutation.OrganizationCleared() {
		_spec.ClearField(userqualification.FieldOrganization, field.TypeString)
	}
	if value, ok := uquo.mutation.URL(); ok {
		_spec.SetField(userqualification.FieldURL, field.TypeString, value)
	}
	if uquo.mutation.URLCleared() {
		_spec.ClearField(userqualification.FieldURL, field.TypeString)
	}
	if value, ok := uquo.mutation.GotDate(); ok {
		_spec.SetField(userqualification.FieldGotDate, field.TypeString, value)
	}
	if uquo.mutation.GotDateCleared() {
		_spec.ClearField(userqualification.FieldGotDate, field.TypeString)
	}
	if value, ok := uquo.mutation.Memo(); ok {
		_spec.SetField(userqualification.FieldMemo, field.TypeString, value)
	}
	if uquo.mutation.MemoCleared() {
		_spec.ClearField(userqualification.FieldMemo, field.TypeString)
	}
	if uquo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userqualification.UserTable,
			Columns: []string{userqualification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uquo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userqualification.UserTable,
			Columns: []string{userqualification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserQualification{config: uquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userqualification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uquo.mutation.done = true
	return _node, nil
}
