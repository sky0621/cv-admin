// Code generated by ent, DO NOT EDIT.

package usernoteitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usernoteitem type in the database.
	Label = "user_note_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeNote holds the string denoting the note edge name in mutations.
	EdgeNote = "note"
	// Table holds the table name of the usernoteitem in the database.
	Table = "user_note_items"
	// NoteTable is the table that holds the note relation/edge.
	NoteTable = "user_note_items"
	// NoteInverseTable is the table name for the UserNote entity.
	// It exists in this package in order to avoid circular dependency with the "usernote" package.
	NoteInverseTable = "user_notes"
	// NoteColumn is the table column denoting the note relation/edge.
	NoteColumn = "user_note_id"
)

// Columns holds all SQL columns for usernoteitem fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_note_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_note_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
)

// OrderOption defines the ordering options for the UserNoteItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByNoteField orders the results by note field.
func ByNoteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNoteStep(), sql.OrderByField(field, opts...))
	}
}
func newNoteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NoteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NoteTable, NoteColumn),
	)
}
