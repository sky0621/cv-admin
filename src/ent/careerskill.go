// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/careerskill"
	"github.com/sky0621/cv-admin/src/ent/careerskillgroup"
	"github.com/sky0621/cv-admin/src/ent/skill"
)

// CareerSkill is the model entity for the CareerSkill schema.
type CareerSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Version holds the value of the "version" field.
	Version *string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CareerSkillQuery when eager-loading is set.
	Edges                 CareerSkillEdges `json:"edges"`
	career_skill_group_id *int
	skill_id              *int
	selectValues          sql.SelectValues
}

// CareerSkillEdges holds the relations/edges for other nodes in the graph.
type CareerSkillEdges struct {
	// CareerSkillGroup holds the value of the careerSkillGroup edge.
	CareerSkillGroup *CareerSkillGroup `json:"careerSkillGroup,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CareerSkillGroupOrErr returns the CareerSkillGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CareerSkillEdges) CareerSkillGroupOrErr() (*CareerSkillGroup, error) {
	if e.CareerSkillGroup != nil {
		return e.CareerSkillGroup, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: careerskillgroup.Label}
	}
	return nil, &NotLoadedError{edge: "careerSkillGroup"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CareerSkillEdges) SkillOrErr() (*Skill, error) {
	if e.Skill != nil {
		return e.Skill, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: skill.Label}
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CareerSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case careerskill.FieldID:
			values[i] = new(sql.NullInt64)
		case careerskill.FieldVersion:
			values[i] = new(sql.NullString)
		case careerskill.FieldCreateTime, careerskill.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case careerskill.ForeignKeys[0]: // career_skill_group_id
			values[i] = new(sql.NullInt64)
		case careerskill.ForeignKeys[1]: // skill_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CareerSkill fields.
func (cs *CareerSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case careerskill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case careerskill.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cs.CreateTime = value.Time
			}
		case careerskill.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cs.UpdateTime = value.Time
			}
		case careerskill.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cs.Version = new(string)
				*cs.Version = value.String
			}
		case careerskill.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field career_skill_group_id", value)
			} else if value.Valid {
				cs.career_skill_group_id = new(int)
				*cs.career_skill_group_id = int(value.Int64)
			}
		case careerskill.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field skill_id", value)
			} else if value.Valid {
				cs.skill_id = new(int)
				*cs.skill_id = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CareerSkill.
// This includes values selected through modifiers, order, etc.
func (cs *CareerSkill) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryCareerSkillGroup queries the "careerSkillGroup" edge of the CareerSkill entity.
func (cs *CareerSkill) QueryCareerSkillGroup() *CareerSkillGroupQuery {
	return NewCareerSkillClient(cs.config).QueryCareerSkillGroup(cs)
}

// QuerySkill queries the "skill" edge of the CareerSkill entity.
func (cs *CareerSkill) QuerySkill() *SkillQuery {
	return NewCareerSkillClient(cs.config).QuerySkill(cs)
}

// Update returns a builder for updating this CareerSkill.
// Note that you need to call CareerSkill.Unwrap() before calling this method if this CareerSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CareerSkill) Update() *CareerSkillUpdateOne {
	return NewCareerSkillClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CareerSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CareerSkill) Unwrap() *CareerSkill {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CareerSkill is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CareerSkill) String() string {
	var builder strings.Builder
	builder.WriteString("CareerSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("create_time=")
	builder.WriteString(cs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cs.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cs.Version; v != nil {
		builder.WriteString("version=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// CareerSkills is a parsable slice of CareerSkill.
type CareerSkills []*CareerSkill
