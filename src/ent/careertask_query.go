// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careertask"
	"github.com/sky0621/cv-admin/src/ent/careertaskdescription"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usercareer"
)

// CareerTaskQuery is the builder for querying CareerTask entities.
type CareerTaskQuery struct {
	config
	limit                      *int
	offset                     *int
	unique                     *bool
	order                      []OrderFunc
	fields                     []string
	predicates                 []predicate.CareerTask
	withCareer                 *UserCareerQuery
	withCareerTaskDescriptions *CareerTaskDescriptionQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CareerTaskQuery builder.
func (ctq *CareerTaskQuery) Where(ps ...predicate.CareerTask) *CareerTaskQuery {
	ctq.predicates = append(ctq.predicates, ps...)
	return ctq
}

// Limit adds a limit step to the query.
func (ctq *CareerTaskQuery) Limit(limit int) *CareerTaskQuery {
	ctq.limit = &limit
	return ctq
}

// Offset adds an offset step to the query.
func (ctq *CareerTaskQuery) Offset(offset int) *CareerTaskQuery {
	ctq.offset = &offset
	return ctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctq *CareerTaskQuery) Unique(unique bool) *CareerTaskQuery {
	ctq.unique = &unique
	return ctq
}

// Order adds an order step to the query.
func (ctq *CareerTaskQuery) Order(o ...OrderFunc) *CareerTaskQuery {
	ctq.order = append(ctq.order, o...)
	return ctq
}

// QueryCareer chains the current query on the "career" edge.
func (ctq *CareerTaskQuery) QueryCareer() *UserCareerQuery {
	query := &UserCareerQuery{config: ctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(careertask.Table, careertask.FieldID, selector),
			sqlgraph.To(usercareer.Table, usercareer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, careertask.CareerTable, careertask.CareerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCareerTaskDescriptions chains the current query on the "careerTaskDescriptions" edge.
func (ctq *CareerTaskQuery) QueryCareerTaskDescriptions() *CareerTaskDescriptionQuery {
	query := &CareerTaskDescriptionQuery{config: ctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(careertask.Table, careertask.FieldID, selector),
			sqlgraph.To(careertaskdescription.Table, careertaskdescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, careertask.CareerTaskDescriptionsTable, careertask.CareerTaskDescriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CareerTask entity from the query.
// Returns a *NotFoundError when no CareerTask was found.
func (ctq *CareerTaskQuery) First(ctx context.Context) (*CareerTask, error) {
	nodes, err := ctq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{careertask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctq *CareerTaskQuery) FirstX(ctx context.Context) *CareerTask {
	node, err := ctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CareerTask ID from the query.
// Returns a *NotFoundError when no CareerTask ID was found.
func (ctq *CareerTaskQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{careertask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctq *CareerTaskQuery) FirstIDX(ctx context.Context) int {
	id, err := ctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CareerTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CareerTask entity is found.
// Returns a *NotFoundError when no CareerTask entities are found.
func (ctq *CareerTaskQuery) Only(ctx context.Context) (*CareerTask, error) {
	nodes, err := ctq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{careertask.Label}
	default:
		return nil, &NotSingularError{careertask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctq *CareerTaskQuery) OnlyX(ctx context.Context) *CareerTask {
	node, err := ctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CareerTask ID in the query.
// Returns a *NotSingularError when more than one CareerTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (ctq *CareerTaskQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{careertask.Label}
	default:
		err = &NotSingularError{careertask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctq *CareerTaskQuery) OnlyIDX(ctx context.Context) int {
	id, err := ctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CareerTasks.
func (ctq *CareerTaskQuery) All(ctx context.Context) ([]*CareerTask, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ctq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ctq *CareerTaskQuery) AllX(ctx context.Context) []*CareerTask {
	nodes, err := ctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CareerTask IDs.
func (ctq *CareerTaskQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ctq.Select(careertask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctq *CareerTaskQuery) IDsX(ctx context.Context) []int {
	ids, err := ctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctq *CareerTaskQuery) Count(ctx context.Context) (int, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ctq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ctq *CareerTaskQuery) CountX(ctx context.Context) int {
	count, err := ctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctq *CareerTaskQuery) Exist(ctx context.Context) (bool, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ctq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ctq *CareerTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := ctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CareerTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctq *CareerTaskQuery) Clone() *CareerTaskQuery {
	if ctq == nil {
		return nil
	}
	return &CareerTaskQuery{
		config:                     ctq.config,
		limit:                      ctq.limit,
		offset:                     ctq.offset,
		order:                      append([]OrderFunc{}, ctq.order...),
		predicates:                 append([]predicate.CareerTask{}, ctq.predicates...),
		withCareer:                 ctq.withCareer.Clone(),
		withCareerTaskDescriptions: ctq.withCareerTaskDescriptions.Clone(),
		// clone intermediate query.
		sql:    ctq.sql.Clone(),
		path:   ctq.path,
		unique: ctq.unique,
	}
}

// WithCareer tells the query-builder to eager-load the nodes that are connected to
// the "career" edge. The optional arguments are used to configure the query builder of the edge.
func (ctq *CareerTaskQuery) WithCareer(opts ...func(*UserCareerQuery)) *CareerTaskQuery {
	query := &UserCareerQuery{config: ctq.config}
	for _, opt := range opts {
		opt(query)
	}
	ctq.withCareer = query
	return ctq
}

// WithCareerTaskDescriptions tells the query-builder to eager-load the nodes that are connected to
// the "careerTaskDescriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (ctq *CareerTaskQuery) WithCareerTaskDescriptions(opts ...func(*CareerTaskDescriptionQuery)) *CareerTaskQuery {
	query := &CareerTaskDescriptionQuery{config: ctq.config}
	for _, opt := range opts {
		opt(query)
	}
	ctq.withCareerTaskDescriptions = query
	return ctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CareerTask.Query().
//		GroupBy(careertask.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ctq *CareerTaskQuery) GroupBy(field string, fields ...string) *CareerTaskGroupBy {
	grbuild := &CareerTaskGroupBy{config: ctq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ctq.sqlQuery(ctx), nil
	}
	grbuild.label = careertask.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CareerTask.Query().
//		Select(careertask.FieldCreateTime).
//		Scan(ctx, &v)
func (ctq *CareerTaskQuery) Select(fields ...string) *CareerTaskSelect {
	ctq.fields = append(ctq.fields, fields...)
	selbuild := &CareerTaskSelect{CareerTaskQuery: ctq}
	selbuild.label = careertask.Label
	selbuild.flds, selbuild.scan = &ctq.fields, selbuild.Scan
	return selbuild
}

func (ctq *CareerTaskQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ctq.fields {
		if !careertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ctq.path != nil {
		prev, err := ctq.path(ctx)
		if err != nil {
			return err
		}
		ctq.sql = prev
	}
	return nil
}

func (ctq *CareerTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CareerTask, error) {
	var (
		nodes       = []*CareerTask{}
		withFKs     = ctq.withFKs
		_spec       = ctq.querySpec()
		loadedTypes = [2]bool{
			ctq.withCareer != nil,
			ctq.withCareerTaskDescriptions != nil,
		}
	)
	if ctq.withCareer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, careertask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*CareerTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &CareerTask{config: ctq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ctq.withCareer; query != nil {
		if err := ctq.loadCareer(ctx, query, nodes, nil,
			func(n *CareerTask, e *UserCareer) { n.Edges.Career = e }); err != nil {
			return nil, err
		}
	}
	if query := ctq.withCareerTaskDescriptions; query != nil {
		if err := ctq.loadCareerTaskDescriptions(ctx, query, nodes,
			func(n *CareerTask) { n.Edges.CareerTaskDescriptions = []*CareerTaskDescription{} },
			func(n *CareerTask, e *CareerTaskDescription) {
				n.Edges.CareerTaskDescriptions = append(n.Edges.CareerTaskDescriptions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ctq *CareerTaskQuery) loadCareer(ctx context.Context, query *UserCareerQuery, nodes []*CareerTask, init func(*CareerTask), assign func(*CareerTask, *UserCareer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CareerTask)
	for i := range nodes {
		if nodes[i].career_id == nil {
			continue
		}
		fk := *nodes[i].career_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(usercareer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "career_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ctq *CareerTaskQuery) loadCareerTaskDescriptions(ctx context.Context, query *CareerTaskDescriptionQuery, nodes []*CareerTask, init func(*CareerTask), assign func(*CareerTask, *CareerTaskDescription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CareerTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CareerTaskDescription(func(s *sql.Selector) {
		s.Where(sql.InValues(careertask.CareerTaskDescriptionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.career_task_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "career_task_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "career_task_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ctq *CareerTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctq.querySpec()
	_spec.Node.Columns = ctq.fields
	if len(ctq.fields) > 0 {
		_spec.Unique = ctq.unique != nil && *ctq.unique
	}
	return sqlgraph.CountNodes(ctx, ctq.driver, _spec)
}

func (ctq *CareerTaskQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ctq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ctq *CareerTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   careertask.Table,
			Columns: careertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: careertask.FieldID,
			},
		},
		From:   ctq.sql,
		Unique: true,
	}
	if unique := ctq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ctq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, careertask.FieldID)
		for i := range fields {
			if fields[i] != careertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctq *CareerTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctq.driver.Dialect())
	t1 := builder.Table(careertask.Table)
	columns := ctq.fields
	if len(columns) == 0 {
		columns = careertask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ctq.sql != nil {
		selector = ctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ctq.unique != nil && *ctq.unique {
		selector.Distinct()
	}
	for _, p := range ctq.predicates {
		p(selector)
	}
	for _, p := range ctq.order {
		p(selector)
	}
	if offset := ctq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CareerTaskGroupBy is the group-by builder for CareerTask entities.
type CareerTaskGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctgb *CareerTaskGroupBy) Aggregate(fns ...AggregateFunc) *CareerTaskGroupBy {
	ctgb.fns = append(ctgb.fns, fns...)
	return ctgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ctgb *CareerTaskGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ctgb.path(ctx)
	if err != nil {
		return err
	}
	ctgb.sql = query
	return ctgb.sqlScan(ctx, v)
}

func (ctgb *CareerTaskGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ctgb.fields {
		if !careertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ctgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ctgb *CareerTaskGroupBy) sqlQuery() *sql.Selector {
	selector := ctgb.sql.Select()
	aggregation := make([]string, 0, len(ctgb.fns))
	for _, fn := range ctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ctgb.fields)+len(ctgb.fns))
		for _, f := range ctgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ctgb.fields...)...)
}

// CareerTaskSelect is the builder for selecting fields of CareerTask entities.
type CareerTaskSelect struct {
	*CareerTaskQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cts *CareerTaskSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cts.prepareQuery(ctx); err != nil {
		return err
	}
	cts.sql = cts.CareerTaskQuery.sqlQuery(ctx)
	return cts.sqlScan(ctx, v)
}

func (cts *CareerTaskSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cts.sql.Query()
	if err := cts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
