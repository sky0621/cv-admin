// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/usercareer"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
)

// UserCareerGroupCreate is the builder for creating a UserCareerGroup entity.
type UserCareerGroupCreate struct {
	config
	mutation *UserCareerGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ucgc *UserCareerGroupCreate) SetCreateTime(t time.Time) *UserCareerGroupCreate {
	ucgc.mutation.SetCreateTime(t)
	return ucgc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ucgc *UserCareerGroupCreate) SetNillableCreateTime(t *time.Time) *UserCareerGroupCreate {
	if t != nil {
		ucgc.SetCreateTime(*t)
	}
	return ucgc
}

// SetUpdateTime sets the "update_time" field.
func (ucgc *UserCareerGroupCreate) SetUpdateTime(t time.Time) *UserCareerGroupCreate {
	ucgc.mutation.SetUpdateTime(t)
	return ucgc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ucgc *UserCareerGroupCreate) SetNillableUpdateTime(t *time.Time) *UserCareerGroupCreate {
	if t != nil {
		ucgc.SetUpdateTime(*t)
	}
	return ucgc
}

// SetLabel sets the "label" field.
func (ucgc *UserCareerGroupCreate) SetLabel(s string) *UserCareerGroupCreate {
	ucgc.mutation.SetLabel(s)
	return ucgc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ucgc *UserCareerGroupCreate) SetUserID(id int) *UserCareerGroupCreate {
	ucgc.mutation.SetUserID(id)
	return ucgc
}

// SetUser sets the "user" edge to the User entity.
func (ucgc *UserCareerGroupCreate) SetUser(u *User) *UserCareerGroupCreate {
	return ucgc.SetUserID(u.ID)
}

// AddCareerIDs adds the "careers" edge to the UserCareer entity by IDs.
func (ucgc *UserCareerGroupCreate) AddCareerIDs(ids ...int) *UserCareerGroupCreate {
	ucgc.mutation.AddCareerIDs(ids...)
	return ucgc
}

// AddCareers adds the "careers" edges to the UserCareer entity.
func (ucgc *UserCareerGroupCreate) AddCareers(u ...*UserCareer) *UserCareerGroupCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucgc.AddCareerIDs(ids...)
}

// Mutation returns the UserCareerGroupMutation object of the builder.
func (ucgc *UserCareerGroupCreate) Mutation() *UserCareerGroupMutation {
	return ucgc.mutation
}

// Save creates the UserCareerGroup in the database.
func (ucgc *UserCareerGroupCreate) Save(ctx context.Context) (*UserCareerGroup, error) {
	ucgc.defaults()
	return withHooks[*UserCareerGroup, UserCareerGroupMutation](ctx, ucgc.sqlSave, ucgc.mutation, ucgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucgc *UserCareerGroupCreate) SaveX(ctx context.Context) *UserCareerGroup {
	v, err := ucgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucgc *UserCareerGroupCreate) Exec(ctx context.Context) error {
	_, err := ucgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucgc *UserCareerGroupCreate) ExecX(ctx context.Context) {
	if err := ucgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucgc *UserCareerGroupCreate) defaults() {
	if _, ok := ucgc.mutation.CreateTime(); !ok {
		v := usercareergroup.DefaultCreateTime()
		ucgc.mutation.SetCreateTime(v)
	}
	if _, ok := ucgc.mutation.UpdateTime(); !ok {
		v := usercareergroup.DefaultUpdateTime()
		ucgc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucgc *UserCareerGroupCreate) check() error {
	if _, ok := ucgc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserCareerGroup.create_time"`)}
	}
	if _, ok := ucgc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserCareerGroup.update_time"`)}
	}
	if _, ok := ucgc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "UserCareerGroup.label"`)}
	}
	if v, ok := ucgc.mutation.Label(); ok {
		if err := usercareergroup.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "UserCareerGroup.label": %w`, err)}
		}
	}
	if _, ok := ucgc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserCareerGroup.user"`)}
	}
	return nil
}

func (ucgc *UserCareerGroupCreate) sqlSave(ctx context.Context) (*UserCareerGroup, error) {
	if err := ucgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ucgc.mutation.id = &_node.ID
	ucgc.mutation.done = true
	return _node, nil
}

func (ucgc *UserCareerGroupCreate) createSpec() (*UserCareerGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCareerGroup{config: ucgc.config}
		_spec = sqlgraph.NewCreateSpec(usercareergroup.Table, sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ucgc.conflict
	if value, ok := ucgc.mutation.CreateTime(); ok {
		_spec.SetField(usercareergroup.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ucgc.mutation.UpdateTime(); ok {
		_spec.SetField(usercareergroup.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ucgc.mutation.Label(); ok {
		_spec.SetField(usercareergroup.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if nodes := ucgc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercareergroup.UserTable,
			Columns: []string{usercareergroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucgc.mutation.CareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareergroup.CareersTable,
			Columns: []string{usercareergroup.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercareer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCareerGroup.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCareerGroupUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucgc *UserCareerGroupCreate) OnConflict(opts ...sql.ConflictOption) *UserCareerGroupUpsertOne {
	ucgc.conflict = opts
	return &UserCareerGroupUpsertOne{
		create: ucgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucgc *UserCareerGroupCreate) OnConflictColumns(columns ...string) *UserCareerGroupUpsertOne {
	ucgc.conflict = append(ucgc.conflict, sql.ConflictColumns(columns...))
	return &UserCareerGroupUpsertOne{
		create: ucgc,
	}
}

type (
	// UserCareerGroupUpsertOne is the builder for "upsert"-ing
	//  one UserCareerGroup node.
	UserCareerGroupUpsertOne struct {
		create *UserCareerGroupCreate
	}

	// UserCareerGroupUpsert is the "OnConflict" setter.
	UserCareerGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UserCareerGroupUpsert) SetUpdateTime(v time.Time) *UserCareerGroupUpsert {
	u.Set(usercareergroup.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserCareerGroupUpsert) UpdateUpdateTime() *UserCareerGroupUpsert {
	u.SetExcluded(usercareergroup.FieldUpdateTime)
	return u
}

// SetLabel sets the "label" field.
func (u *UserCareerGroupUpsert) SetLabel(v string) *UserCareerGroupUpsert {
	u.Set(usercareergroup.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *UserCareerGroupUpsert) UpdateLabel() *UserCareerGroupUpsert {
	u.SetExcluded(usercareergroup.FieldLabel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserCareerGroupUpsertOne) UpdateNewValues() *UserCareerGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(usercareergroup.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserCareerGroupUpsertOne) Ignore() *UserCareerGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCareerGroupUpsertOne) DoNothing() *UserCareerGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCareerGroupCreate.OnConflict
// documentation for more info.
func (u *UserCareerGroupUpsertOne) Update(set func(*UserCareerGroupUpsert)) *UserCareerGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCareerGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserCareerGroupUpsertOne) SetUpdateTime(v time.Time) *UserCareerGroupUpsertOne {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserCareerGroupUpsertOne) UpdateUpdateTime() *UserCareerGroupUpsertOne {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetLabel sets the "label" field.
func (u *UserCareerGroupUpsertOne) SetLabel(v string) *UserCareerGroupUpsertOne {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *UserCareerGroupUpsertOne) UpdateLabel() *UserCareerGroupUpsertOne {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.UpdateLabel()
	})
}

// Exec executes the query.
func (u *UserCareerGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCareerGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCareerGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserCareerGroupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserCareerGroupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCareerGroupCreateBulk is the builder for creating many UserCareerGroup entities in bulk.
type UserCareerGroupCreateBulk struct {
	config
	builders []*UserCareerGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the UserCareerGroup entities in the database.
func (ucgcb *UserCareerGroupCreateBulk) Save(ctx context.Context) ([]*UserCareerGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucgcb.builders))
	nodes := make([]*UserCareerGroup, len(ucgcb.builders))
	mutators := make([]Mutator, len(ucgcb.builders))
	for i := range ucgcb.builders {
		func(i int, root context.Context) {
			builder := ucgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCareerGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucgcb *UserCareerGroupCreateBulk) SaveX(ctx context.Context) []*UserCareerGroup {
	v, err := ucgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucgcb *UserCareerGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := ucgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucgcb *UserCareerGroupCreateBulk) ExecX(ctx context.Context) {
	if err := ucgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCareerGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCareerGroupUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucgcb *UserCareerGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserCareerGroupUpsertBulk {
	ucgcb.conflict = opts
	return &UserCareerGroupUpsertBulk{
		create: ucgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucgcb *UserCareerGroupCreateBulk) OnConflictColumns(columns ...string) *UserCareerGroupUpsertBulk {
	ucgcb.conflict = append(ucgcb.conflict, sql.ConflictColumns(columns...))
	return &UserCareerGroupUpsertBulk{
		create: ucgcb,
	}
}

// UserCareerGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of UserCareerGroup nodes.
type UserCareerGroupUpsertBulk struct {
	create *UserCareerGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserCareerGroupUpsertBulk) UpdateNewValues() *UserCareerGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(usercareergroup.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserCareerGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserCareerGroupUpsertBulk) Ignore() *UserCareerGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCareerGroupUpsertBulk) DoNothing() *UserCareerGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCareerGroupCreateBulk.OnConflict
// documentation for more info.
func (u *UserCareerGroupUpsertBulk) Update(set func(*UserCareerGroupUpsert)) *UserCareerGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCareerGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserCareerGroupUpsertBulk) SetUpdateTime(v time.Time) *UserCareerGroupUpsertBulk {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserCareerGroupUpsertBulk) UpdateUpdateTime() *UserCareerGroupUpsertBulk {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetLabel sets the "label" field.
func (u *UserCareerGroupUpsertBulk) SetLabel(v string) *UserCareerGroupUpsertBulk {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *UserCareerGroupUpsertBulk) UpdateLabel() *UserCareerGroupUpsertBulk {
	return u.Update(func(s *UserCareerGroupUpsert) {
		s.UpdateLabel()
	})
}

// Exec executes the query.
func (u *UserCareerGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCareerGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCareerGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCareerGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
