// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usernote"
	"github.com/sky0621/cv-admin/src/ent/usernoteitem"
)

// UserNoteItemUpdate is the builder for updating UserNoteItem entities.
type UserNoteItemUpdate struct {
	config
	hooks    []Hook
	mutation *UserNoteItemMutation
}

// Where appends a list predicates to the UserNoteItemUpdate builder.
func (uniu *UserNoteItemUpdate) Where(ps ...predicate.UserNoteItem) *UserNoteItemUpdate {
	uniu.mutation.Where(ps...)
	return uniu
}

// SetUpdateTime sets the "update_time" field.
func (uniu *UserNoteItemUpdate) SetUpdateTime(t time.Time) *UserNoteItemUpdate {
	uniu.mutation.SetUpdateTime(t)
	return uniu
}

// SetText sets the "text" field.
func (uniu *UserNoteItemUpdate) SetText(s string) *UserNoteItemUpdate {
	uniu.mutation.SetText(s)
	return uniu
}

// SetNoteID sets the "note" edge to the UserNote entity by ID.
func (uniu *UserNoteItemUpdate) SetNoteID(id int) *UserNoteItemUpdate {
	uniu.mutation.SetNoteID(id)
	return uniu
}

// SetNote sets the "note" edge to the UserNote entity.
func (uniu *UserNoteItemUpdate) SetNote(u *UserNote) *UserNoteItemUpdate {
	return uniu.SetNoteID(u.ID)
}

// Mutation returns the UserNoteItemMutation object of the builder.
func (uniu *UserNoteItemUpdate) Mutation() *UserNoteItemMutation {
	return uniu.mutation
}

// ClearNote clears the "note" edge to the UserNote entity.
func (uniu *UserNoteItemUpdate) ClearNote() *UserNoteItemUpdate {
	uniu.mutation.ClearNote()
	return uniu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uniu *UserNoteItemUpdate) Save(ctx context.Context) (int, error) {
	uniu.defaults()
	return withHooks(ctx, uniu.sqlSave, uniu.mutation, uniu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uniu *UserNoteItemUpdate) SaveX(ctx context.Context) int {
	affected, err := uniu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uniu *UserNoteItemUpdate) Exec(ctx context.Context) error {
	_, err := uniu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uniu *UserNoteItemUpdate) ExecX(ctx context.Context) {
	if err := uniu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uniu *UserNoteItemUpdate) defaults() {
	if _, ok := uniu.mutation.UpdateTime(); !ok {
		v := usernoteitem.UpdateDefaultUpdateTime()
		uniu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uniu *UserNoteItemUpdate) check() error {
	if v, ok := uniu.mutation.Text(); ok {
		if err := usernoteitem.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "UserNoteItem.text": %w`, err)}
		}
	}
	if _, ok := uniu.mutation.NoteID(); uniu.mutation.NoteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserNoteItem.note"`)
	}
	return nil
}

func (uniu *UserNoteItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uniu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernoteitem.Table, usernoteitem.Columns, sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt))
	if ps := uniu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uniu.mutation.UpdateTime(); ok {
		_spec.SetField(usernoteitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uniu.mutation.Text(); ok {
		_spec.SetField(usernoteitem.FieldText, field.TypeString, value)
	}
	if uniu.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernoteitem.NoteTable,
			Columns: []string{usernoteitem.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uniu.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernoteitem.NoteTable,
			Columns: []string{usernoteitem.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uniu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernoteitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uniu.mutation.done = true
	return n, nil
}

// UserNoteItemUpdateOne is the builder for updating a single UserNoteItem entity.
type UserNoteItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNoteItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (uniuo *UserNoteItemUpdateOne) SetUpdateTime(t time.Time) *UserNoteItemUpdateOne {
	uniuo.mutation.SetUpdateTime(t)
	return uniuo
}

// SetText sets the "text" field.
func (uniuo *UserNoteItemUpdateOne) SetText(s string) *UserNoteItemUpdateOne {
	uniuo.mutation.SetText(s)
	return uniuo
}

// SetNoteID sets the "note" edge to the UserNote entity by ID.
func (uniuo *UserNoteItemUpdateOne) SetNoteID(id int) *UserNoteItemUpdateOne {
	uniuo.mutation.SetNoteID(id)
	return uniuo
}

// SetNote sets the "note" edge to the UserNote entity.
func (uniuo *UserNoteItemUpdateOne) SetNote(u *UserNote) *UserNoteItemUpdateOne {
	return uniuo.SetNoteID(u.ID)
}

// Mutation returns the UserNoteItemMutation object of the builder.
func (uniuo *UserNoteItemUpdateOne) Mutation() *UserNoteItemMutation {
	return uniuo.mutation
}

// ClearNote clears the "note" edge to the UserNote entity.
func (uniuo *UserNoteItemUpdateOne) ClearNote() *UserNoteItemUpdateOne {
	uniuo.mutation.ClearNote()
	return uniuo
}

// Where appends a list predicates to the UserNoteItemUpdate builder.
func (uniuo *UserNoteItemUpdateOne) Where(ps ...predicate.UserNoteItem) *UserNoteItemUpdateOne {
	uniuo.mutation.Where(ps...)
	return uniuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uniuo *UserNoteItemUpdateOne) Select(field string, fields ...string) *UserNoteItemUpdateOne {
	uniuo.fields = append([]string{field}, fields...)
	return uniuo
}

// Save executes the query and returns the updated UserNoteItem entity.
func (uniuo *UserNoteItemUpdateOne) Save(ctx context.Context) (*UserNoteItem, error) {
	uniuo.defaults()
	return withHooks(ctx, uniuo.sqlSave, uniuo.mutation, uniuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uniuo *UserNoteItemUpdateOne) SaveX(ctx context.Context) *UserNoteItem {
	node, err := uniuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uniuo *UserNoteItemUpdateOne) Exec(ctx context.Context) error {
	_, err := uniuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uniuo *UserNoteItemUpdateOne) ExecX(ctx context.Context) {
	if err := uniuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uniuo *UserNoteItemUpdateOne) defaults() {
	if _, ok := uniuo.mutation.UpdateTime(); !ok {
		v := usernoteitem.UpdateDefaultUpdateTime()
		uniuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uniuo *UserNoteItemUpdateOne) check() error {
	if v, ok := uniuo.mutation.Text(); ok {
		if err := usernoteitem.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "UserNoteItem.text": %w`, err)}
		}
	}
	if _, ok := uniuo.mutation.NoteID(); uniuo.mutation.NoteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserNoteItem.note"`)
	}
	return nil
}

func (uniuo *UserNoteItemUpdateOne) sqlSave(ctx context.Context) (_node *UserNoteItem, err error) {
	if err := uniuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernoteitem.Table, usernoteitem.Columns, sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt))
	id, ok := uniuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNoteItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uniuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernoteitem.FieldID)
		for _, f := range fields {
			if !usernoteitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernoteitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uniuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uniuo.mutation.UpdateTime(); ok {
		_spec.SetField(usernoteitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uniuo.mutation.Text(); ok {
		_spec.SetField(usernoteitem.FieldText, field.TypeString, value)
	}
	if uniuo.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernoteitem.NoteTable,
			Columns: []string{usernoteitem.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uniuo.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernoteitem.NoteTable,
			Columns: []string{usernoteitem.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNoteItem{config: uniuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uniuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernoteitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uniuo.mutation.done = true
	return _node, nil
}
