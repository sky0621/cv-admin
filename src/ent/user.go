// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname *string `json:"nickname,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// BirthdayYear holds the value of the "birthday_year" field.
	BirthdayYear int `json:"birthday_year,omitempty"`
	// BirthdayMonth holds the value of the "birthday_month" field.
	BirthdayMonth int `json:"birthday_month,omitempty"`
	// BirthdayDay holds the value of the "birthday_day" field.
	BirthdayDay int `json:"birthday_day,omitempty"`
	// Job holds the value of the "job" field.
	Job *string `json:"job,omitempty"`
	// BelongTo holds the value of the "belong_to" field.
	BelongTo *string `json:"belong_to,omitempty"`
	// Pr holds the value of the "pr" field.
	Pr *string `json:"pr,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*UserActivity `json:"activities,omitempty"`
	// Qualifications holds the value of the qualifications edge.
	Qualifications []*UserQualification `json:"qualifications,omitempty"`
	// Careergroups holds the value of the careergroups edge.
	Careergroups []*UserCareerGroup `json:"careergroups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivitiesOrErr() ([]*UserActivity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// QualificationsOrErr returns the Qualifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) QualificationsOrErr() ([]*UserQualification, error) {
	if e.loadedTypes[1] {
		return e.Qualifications, nil
	}
	return nil, &NotLoadedError{edge: "qualifications"}
}

// CareergroupsOrErr returns the Careergroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CareergroupsOrErr() ([]*UserCareerGroup, error) {
	if e.loadedTypes[2] {
		return e.Careergroups, nil
	}
	return nil, &NotLoadedError{edge: "careergroups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldBirthdayYear, user.FieldBirthdayMonth, user.FieldBirthdayDay:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldNickname, user.FieldAvatarURL, user.FieldJob, user.FieldBelongTo, user.FieldPr:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = new(string)
				*u.Nickname = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = new(string)
				*u.AvatarURL = value.String
			}
		case user.FieldBirthdayYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday_year", values[i])
			} else if value.Valid {
				u.BirthdayYear = int(value.Int64)
			}
		case user.FieldBirthdayMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday_month", values[i])
			} else if value.Valid {
				u.BirthdayMonth = int(value.Int64)
			}
		case user.FieldBirthdayDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday_day", values[i])
			} else if value.Valid {
				u.BirthdayDay = int(value.Int64)
			}
		case user.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				u.Job = new(string)
				*u.Job = value.String
			}
		case user.FieldBelongTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field belong_to", values[i])
			} else if value.Valid {
				u.BelongTo = new(string)
				*u.BelongTo = value.String
			}
		case user.FieldPr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pr", values[i])
			} else if value.Valid {
				u.Pr = new(string)
				*u.Pr = value.String
			}
		}
	}
	return nil
}

// QueryActivities queries the "activities" edge of the User entity.
func (u *User) QueryActivities() *UserActivityQuery {
	return (&UserClient{config: u.config}).QueryActivities(u)
}

// QueryQualifications queries the "qualifications" edge of the User entity.
func (u *User) QueryQualifications() *UserQualificationQuery {
	return (&UserClient{config: u.config}).QueryQualifications(u)
}

// QueryCareergroups queries the "careergroups" edge of the User entity.
func (u *User) QueryCareergroups() *UserCareerGroupQuery {
	return (&UserClient{config: u.config}).QueryCareergroups(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	if v := u.Nickname; v != nil {
		builder.WriteString("nickname=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("birthday_year=")
	builder.WriteString(fmt.Sprintf("%v", u.BirthdayYear))
	builder.WriteString(", ")
	builder.WriteString("birthday_month=")
	builder.WriteString(fmt.Sprintf("%v", u.BirthdayMonth))
	builder.WriteString(", ")
	builder.WriteString("birthday_day=")
	builder.WriteString(fmt.Sprintf("%v", u.BirthdayDay))
	builder.WriteString(", ")
	if v := u.Job; v != nil {
		builder.WriteString("job=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.BelongTo; v != nil {
		builder.WriteString("belong_to=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.Pr; v != nil {
		builder.WriteString("pr=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
