// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/usernote"
	"github.com/sky0621/cv-admin/src/ent/usernoteitem"
)

// UserNoteUpdate is the builder for updating UserNote entities.
type UserNoteUpdate struct {
	config
	hooks    []Hook
	mutation *UserNoteMutation
}

// Where appends a list predicates to the UserNoteUpdate builder.
func (unu *UserNoteUpdate) Where(ps ...predicate.UserNote) *UserNoteUpdate {
	unu.mutation.Where(ps...)
	return unu
}

// SetUpdateTime sets the "update_time" field.
func (unu *UserNoteUpdate) SetUpdateTime(t time.Time) *UserNoteUpdate {
	unu.mutation.SetUpdateTime(t)
	return unu
}

// SetLabel sets the "label" field.
func (unu *UserNoteUpdate) SetLabel(s string) *UserNoteUpdate {
	unu.mutation.SetLabel(s)
	return unu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (unu *UserNoteUpdate) SetNillableLabel(s *string) *UserNoteUpdate {
	if s != nil {
		unu.SetLabel(*s)
	}
	return unu
}

// SetMemo sets the "memo" field.
func (unu *UserNoteUpdate) SetMemo(s string) *UserNoteUpdate {
	unu.mutation.SetMemo(s)
	return unu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (unu *UserNoteUpdate) SetNillableMemo(s *string) *UserNoteUpdate {
	if s != nil {
		unu.SetMemo(*s)
	}
	return unu
}

// ClearMemo clears the value of the "memo" field.
func (unu *UserNoteUpdate) ClearMemo() *UserNoteUpdate {
	unu.mutation.ClearMemo()
	return unu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (unu *UserNoteUpdate) SetUserID(id int) *UserNoteUpdate {
	unu.mutation.SetUserID(id)
	return unu
}

// SetUser sets the "user" edge to the User entity.
func (unu *UserNoteUpdate) SetUser(u *User) *UserNoteUpdate {
	return unu.SetUserID(u.ID)
}

// AddNoteItemIDs adds the "noteItems" edge to the UserNoteItem entity by IDs.
func (unu *UserNoteUpdate) AddNoteItemIDs(ids ...int) *UserNoteUpdate {
	unu.mutation.AddNoteItemIDs(ids...)
	return unu
}

// AddNoteItems adds the "noteItems" edges to the UserNoteItem entity.
func (unu *UserNoteUpdate) AddNoteItems(u ...*UserNoteItem) *UserNoteUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unu.AddNoteItemIDs(ids...)
}

// Mutation returns the UserNoteMutation object of the builder.
func (unu *UserNoteUpdate) Mutation() *UserNoteMutation {
	return unu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (unu *UserNoteUpdate) ClearUser() *UserNoteUpdate {
	unu.mutation.ClearUser()
	return unu
}

// ClearNoteItems clears all "noteItems" edges to the UserNoteItem entity.
func (unu *UserNoteUpdate) ClearNoteItems() *UserNoteUpdate {
	unu.mutation.ClearNoteItems()
	return unu
}

// RemoveNoteItemIDs removes the "noteItems" edge to UserNoteItem entities by IDs.
func (unu *UserNoteUpdate) RemoveNoteItemIDs(ids ...int) *UserNoteUpdate {
	unu.mutation.RemoveNoteItemIDs(ids...)
	return unu
}

// RemoveNoteItems removes "noteItems" edges to UserNoteItem entities.
func (unu *UserNoteUpdate) RemoveNoteItems(u ...*UserNoteItem) *UserNoteUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unu.RemoveNoteItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (unu *UserNoteUpdate) Save(ctx context.Context) (int, error) {
	unu.defaults()
	return withHooks(ctx, unu.sqlSave, unu.mutation, unu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unu *UserNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := unu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (unu *UserNoteUpdate) Exec(ctx context.Context) error {
	_, err := unu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unu *UserNoteUpdate) ExecX(ctx context.Context) {
	if err := unu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unu *UserNoteUpdate) defaults() {
	if _, ok := unu.mutation.UpdateTime(); !ok {
		v := usernote.UpdateDefaultUpdateTime()
		unu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unu *UserNoteUpdate) check() error {
	if v, ok := unu.mutation.Label(); ok {
		if err := usernote.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "UserNote.label": %w`, err)}
		}
	}
	if v, ok := unu.mutation.Memo(); ok {
		if err := usernote.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "UserNote.memo": %w`, err)}
		}
	}
	if _, ok := unu.mutation.UserID(); unu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserNote.user"`)
	}
	return nil
}

func (unu *UserNoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := unu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernote.Table, usernote.Columns, sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt))
	if ps := unu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unu.mutation.UpdateTime(); ok {
		_spec.SetField(usernote.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := unu.mutation.Label(); ok {
		_spec.SetField(usernote.FieldLabel, field.TypeString, value)
	}
	if value, ok := unu.mutation.Memo(); ok {
		_spec.SetField(usernote.FieldMemo, field.TypeString, value)
	}
	if unu.mutation.MemoCleared() {
		_spec.ClearField(usernote.FieldMemo, field.TypeString)
	}
	if unu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernote.UserTable,
			Columns: []string{usernote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernote.UserTable,
			Columns: []string{usernote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if unu.mutation.NoteItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unu.mutation.RemovedNoteItemsIDs(); len(nodes) > 0 && !unu.mutation.NoteItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unu.mutation.NoteItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, unu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	unu.mutation.done = true
	return n, nil
}

// UserNoteUpdateOne is the builder for updating a single UserNote entity.
type UserNoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNoteMutation
}

// SetUpdateTime sets the "update_time" field.
func (unuo *UserNoteUpdateOne) SetUpdateTime(t time.Time) *UserNoteUpdateOne {
	unuo.mutation.SetUpdateTime(t)
	return unuo
}

// SetLabel sets the "label" field.
func (unuo *UserNoteUpdateOne) SetLabel(s string) *UserNoteUpdateOne {
	unuo.mutation.SetLabel(s)
	return unuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (unuo *UserNoteUpdateOne) SetNillableLabel(s *string) *UserNoteUpdateOne {
	if s != nil {
		unuo.SetLabel(*s)
	}
	return unuo
}

// SetMemo sets the "memo" field.
func (unuo *UserNoteUpdateOne) SetMemo(s string) *UserNoteUpdateOne {
	unuo.mutation.SetMemo(s)
	return unuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (unuo *UserNoteUpdateOne) SetNillableMemo(s *string) *UserNoteUpdateOne {
	if s != nil {
		unuo.SetMemo(*s)
	}
	return unuo
}

// ClearMemo clears the value of the "memo" field.
func (unuo *UserNoteUpdateOne) ClearMemo() *UserNoteUpdateOne {
	unuo.mutation.ClearMemo()
	return unuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (unuo *UserNoteUpdateOne) SetUserID(id int) *UserNoteUpdateOne {
	unuo.mutation.SetUserID(id)
	return unuo
}

// SetUser sets the "user" edge to the User entity.
func (unuo *UserNoteUpdateOne) SetUser(u *User) *UserNoteUpdateOne {
	return unuo.SetUserID(u.ID)
}

// AddNoteItemIDs adds the "noteItems" edge to the UserNoteItem entity by IDs.
func (unuo *UserNoteUpdateOne) AddNoteItemIDs(ids ...int) *UserNoteUpdateOne {
	unuo.mutation.AddNoteItemIDs(ids...)
	return unuo
}

// AddNoteItems adds the "noteItems" edges to the UserNoteItem entity.
func (unuo *UserNoteUpdateOne) AddNoteItems(u ...*UserNoteItem) *UserNoteUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unuo.AddNoteItemIDs(ids...)
}

// Mutation returns the UserNoteMutation object of the builder.
func (unuo *UserNoteUpdateOne) Mutation() *UserNoteMutation {
	return unuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (unuo *UserNoteUpdateOne) ClearUser() *UserNoteUpdateOne {
	unuo.mutation.ClearUser()
	return unuo
}

// ClearNoteItems clears all "noteItems" edges to the UserNoteItem entity.
func (unuo *UserNoteUpdateOne) ClearNoteItems() *UserNoteUpdateOne {
	unuo.mutation.ClearNoteItems()
	return unuo
}

// RemoveNoteItemIDs removes the "noteItems" edge to UserNoteItem entities by IDs.
func (unuo *UserNoteUpdateOne) RemoveNoteItemIDs(ids ...int) *UserNoteUpdateOne {
	unuo.mutation.RemoveNoteItemIDs(ids...)
	return unuo
}

// RemoveNoteItems removes "noteItems" edges to UserNoteItem entities.
func (unuo *UserNoteUpdateOne) RemoveNoteItems(u ...*UserNoteItem) *UserNoteUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unuo.RemoveNoteItemIDs(ids...)
}

// Where appends a list predicates to the UserNoteUpdate builder.
func (unuo *UserNoteUpdateOne) Where(ps ...predicate.UserNote) *UserNoteUpdateOne {
	unuo.mutation.Where(ps...)
	return unuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (unuo *UserNoteUpdateOne) Select(field string, fields ...string) *UserNoteUpdateOne {
	unuo.fields = append([]string{field}, fields...)
	return unuo
}

// Save executes the query and returns the updated UserNote entity.
func (unuo *UserNoteUpdateOne) Save(ctx context.Context) (*UserNote, error) {
	unuo.defaults()
	return withHooks(ctx, unuo.sqlSave, unuo.mutation, unuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unuo *UserNoteUpdateOne) SaveX(ctx context.Context) *UserNote {
	node, err := unuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (unuo *UserNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := unuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unuo *UserNoteUpdateOne) ExecX(ctx context.Context) {
	if err := unuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unuo *UserNoteUpdateOne) defaults() {
	if _, ok := unuo.mutation.UpdateTime(); !ok {
		v := usernote.UpdateDefaultUpdateTime()
		unuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unuo *UserNoteUpdateOne) check() error {
	if v, ok := unuo.mutation.Label(); ok {
		if err := usernote.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "UserNote.label": %w`, err)}
		}
	}
	if v, ok := unuo.mutation.Memo(); ok {
		if err := usernote.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "UserNote.memo": %w`, err)}
		}
	}
	if _, ok := unuo.mutation.UserID(); unuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserNote.user"`)
	}
	return nil
}

func (unuo *UserNoteUpdateOne) sqlSave(ctx context.Context) (_node *UserNote, err error) {
	if err := unuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernote.Table, usernote.Columns, sqlgraph.NewFieldSpec(usernote.FieldID, field.TypeInt))
	id, ok := unuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := unuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernote.FieldID)
		for _, f := range fields {
			if !usernote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := unuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unuo.mutation.UpdateTime(); ok {
		_spec.SetField(usernote.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := unuo.mutation.Label(); ok {
		_spec.SetField(usernote.FieldLabel, field.TypeString, value)
	}
	if value, ok := unuo.mutation.Memo(); ok {
		_spec.SetField(usernote.FieldMemo, field.TypeString, value)
	}
	if unuo.mutation.MemoCleared() {
		_spec.ClearField(usernote.FieldMemo, field.TypeString)
	}
	if unuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernote.UserTable,
			Columns: []string{usernote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernote.UserTable,
			Columns: []string{usernote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if unuo.mutation.NoteItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unuo.mutation.RemovedNoteItemsIDs(); len(nodes) > 0 && !unuo.mutation.NoteItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unuo.mutation.NoteItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usernote.NoteItemsTable,
			Columns: []string{usernote.NoteItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernoteitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNote{config: unuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, unuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	unuo.mutation.done = true
	return _node, nil
}
