// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/userqualification"
)

// UserQualificationCreate is the builder for creating a UserQualification entity.
type UserQualificationCreate struct {
	config
	mutation *UserQualificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uqc *UserQualificationCreate) SetCreateTime(t time.Time) *UserQualificationCreate {
	uqc.mutation.SetCreateTime(t)
	return uqc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableCreateTime(t *time.Time) *UserQualificationCreate {
	if t != nil {
		uqc.SetCreateTime(*t)
	}
	return uqc
}

// SetUpdateTime sets the "update_time" field.
func (uqc *UserQualificationCreate) SetUpdateTime(t time.Time) *UserQualificationCreate {
	uqc.mutation.SetUpdateTime(t)
	return uqc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableUpdateTime(t *time.Time) *UserQualificationCreate {
	if t != nil {
		uqc.SetUpdateTime(*t)
	}
	return uqc
}

// SetName sets the "name" field.
func (uqc *UserQualificationCreate) SetName(s string) *UserQualificationCreate {
	uqc.mutation.SetName(s)
	return uqc
}

// SetOrganization sets the "organization" field.
func (uqc *UserQualificationCreate) SetOrganization(s string) *UserQualificationCreate {
	uqc.mutation.SetOrganization(s)
	return uqc
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableOrganization(s *string) *UserQualificationCreate {
	if s != nil {
		uqc.SetOrganization(*s)
	}
	return uqc
}

// SetURL sets the "url" field.
func (uqc *UserQualificationCreate) SetURL(s string) *UserQualificationCreate {
	uqc.mutation.SetURL(s)
	return uqc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableURL(s *string) *UserQualificationCreate {
	if s != nil {
		uqc.SetURL(*s)
	}
	return uqc
}

// SetGotDate sets the "got_date" field.
func (uqc *UserQualificationCreate) SetGotDate(s string) *UserQualificationCreate {
	uqc.mutation.SetGotDate(s)
	return uqc
}

// SetNillableGotDate sets the "got_date" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableGotDate(s *string) *UserQualificationCreate {
	if s != nil {
		uqc.SetGotDate(*s)
	}
	return uqc
}

// SetMemo sets the "memo" field.
func (uqc *UserQualificationCreate) SetMemo(s string) *UserQualificationCreate {
	uqc.mutation.SetMemo(s)
	return uqc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uqc *UserQualificationCreate) SetNillableMemo(s *string) *UserQualificationCreate {
	if s != nil {
		uqc.SetMemo(*s)
	}
	return uqc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uqc *UserQualificationCreate) SetUserID(id int) *UserQualificationCreate {
	uqc.mutation.SetUserID(id)
	return uqc
}

// SetUser sets the "user" edge to the User entity.
func (uqc *UserQualificationCreate) SetUser(u *User) *UserQualificationCreate {
	return uqc.SetUserID(u.ID)
}

// Mutation returns the UserQualificationMutation object of the builder.
func (uqc *UserQualificationCreate) Mutation() *UserQualificationMutation {
	return uqc.mutation
}

// Save creates the UserQualification in the database.
func (uqc *UserQualificationCreate) Save(ctx context.Context) (*UserQualification, error) {
	var (
		err  error
		node *UserQualification
	)
	uqc.defaults()
	if len(uqc.hooks) == 0 {
		if err = uqc.check(); err != nil {
			return nil, err
		}
		node, err = uqc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserQualificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uqc.check(); err != nil {
				return nil, err
			}
			uqc.mutation = mutation
			if node, err = uqc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uqc.hooks) - 1; i >= 0; i-- {
			if uqc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uqc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uqc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserQualification)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserQualificationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uqc *UserQualificationCreate) SaveX(ctx context.Context) *UserQualification {
	v, err := uqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqc *UserQualificationCreate) Exec(ctx context.Context) error {
	_, err := uqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqc *UserQualificationCreate) ExecX(ctx context.Context) {
	if err := uqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqc *UserQualificationCreate) defaults() {
	if _, ok := uqc.mutation.CreateTime(); !ok {
		v := userqualification.DefaultCreateTime()
		uqc.mutation.SetCreateTime(v)
	}
	if _, ok := uqc.mutation.UpdateTime(); !ok {
		v := userqualification.DefaultUpdateTime()
		uqc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uqc *UserQualificationCreate) check() error {
	if _, ok := uqc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserQualification.create_time"`)}
	}
	if _, ok := uqc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserQualification.update_time"`)}
	}
	if _, ok := uqc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserQualification.name"`)}
	}
	if v, ok := uqc.mutation.Name(); ok {
		if err := userqualification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserQualification.name": %w`, err)}
		}
	}
	if v, ok := uqc.mutation.Organization(); ok {
		if err := userqualification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "UserQualification.organization": %w`, err)}
		}
	}
	if v, ok := uqc.mutation.URL(); ok {
		if err := userqualification.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "UserQualification.url": %w`, err)}
		}
	}
	if v, ok := uqc.mutation.GotDate(); ok {
		if err := userqualification.GotDateValidator(v); err != nil {
			return &ValidationError{Name: "got_date", err: fmt.Errorf(`ent: validator failed for field "UserQualification.got_date": %w`, err)}
		}
	}
	if v, ok := uqc.mutation.Memo(); ok {
		if err := userqualification.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "UserQualification.memo": %w`, err)}
		}
	}
	if _, ok := uqc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserQualification.user"`)}
	}
	return nil
}

func (uqc *UserQualificationCreate) sqlSave(ctx context.Context) (*UserQualification, error) {
	_node, _spec := uqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uqc *UserQualificationCreate) createSpec() (*UserQualification, *sqlgraph.CreateSpec) {
	var (
		_node = &UserQualification{config: uqc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userqualification.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userqualification.FieldID,
			},
		}
	)
	_spec.OnConflict = uqc.conflict
	if value, ok := uqc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userqualification.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uqc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userqualification.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uqc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userqualification.FieldName,
		})
		_node.Name = value
	}
	if value, ok := uqc.mutation.Organization(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userqualification.FieldOrganization,
		})
		_node.Organization = &value
	}
	if value, ok := uqc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userqualification.FieldURL,
		})
		_node.URL = &value
	}
	if value, ok := uqc.mutation.GotDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userqualification.FieldGotDate,
		})
		_node.GotDate = &value
	}
	if value, ok := uqc.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userqualification.FieldMemo,
		})
		_node.Memo = &value
	}
	if nodes := uqc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userqualification.UserTable,
			Columns: []string{userqualification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserQualification.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserQualificationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uqc *UserQualificationCreate) OnConflict(opts ...sql.ConflictOption) *UserQualificationUpsertOne {
	uqc.conflict = opts
	return &UserQualificationUpsertOne{
		create: uqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uqc *UserQualificationCreate) OnConflictColumns(columns ...string) *UserQualificationUpsertOne {
	uqc.conflict = append(uqc.conflict, sql.ConflictColumns(columns...))
	return &UserQualificationUpsertOne{
		create: uqc,
	}
}

type (
	// UserQualificationUpsertOne is the builder for "upsert"-ing
	//  one UserQualification node.
	UserQualificationUpsertOne struct {
		create *UserQualificationCreate
	}

	// UserQualificationUpsert is the "OnConflict" setter.
	UserQualificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UserQualificationUpsert) SetUpdateTime(v time.Time) *UserQualificationUpsert {
	u.Set(userqualification.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateUpdateTime() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *UserQualificationUpsert) SetName(v string) *UserQualificationUpsert {
	u.Set(userqualification.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateName() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldName)
	return u
}

// SetOrganization sets the "organization" field.
func (u *UserQualificationUpsert) SetOrganization(v string) *UserQualificationUpsert {
	u.Set(userqualification.FieldOrganization, v)
	return u
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateOrganization() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldOrganization)
	return u
}

// ClearOrganization clears the value of the "organization" field.
func (u *UserQualificationUpsert) ClearOrganization() *UserQualificationUpsert {
	u.SetNull(userqualification.FieldOrganization)
	return u
}

// SetURL sets the "url" field.
func (u *UserQualificationUpsert) SetURL(v string) *UserQualificationUpsert {
	u.Set(userqualification.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateURL() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *UserQualificationUpsert) ClearURL() *UserQualificationUpsert {
	u.SetNull(userqualification.FieldURL)
	return u
}

// SetGotDate sets the "got_date" field.
func (u *UserQualificationUpsert) SetGotDate(v string) *UserQualificationUpsert {
	u.Set(userqualification.FieldGotDate, v)
	return u
}

// UpdateGotDate sets the "got_date" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateGotDate() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldGotDate)
	return u
}

// ClearGotDate clears the value of the "got_date" field.
func (u *UserQualificationUpsert) ClearGotDate() *UserQualificationUpsert {
	u.SetNull(userqualification.FieldGotDate)
	return u
}

// SetMemo sets the "memo" field.
func (u *UserQualificationUpsert) SetMemo(v string) *UserQualificationUpsert {
	u.Set(userqualification.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserQualificationUpsert) UpdateMemo() *UserQualificationUpsert {
	u.SetExcluded(userqualification.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *UserQualificationUpsert) ClearMemo() *UserQualificationUpsert {
	u.SetNull(userqualification.FieldMemo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserQualificationUpsertOne) UpdateNewValues() *UserQualificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(userqualification.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserQualificationUpsertOne) Ignore() *UserQualificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserQualificationUpsertOne) DoNothing() *UserQualificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserQualificationCreate.OnConflict
// documentation for more info.
func (u *UserQualificationUpsertOne) Update(set func(*UserQualificationUpsert)) *UserQualificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserQualificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserQualificationUpsertOne) SetUpdateTime(v time.Time) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateUpdateTime() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *UserQualificationUpsertOne) SetName(v string) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateName() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateName()
	})
}

// SetOrganization sets the "organization" field.
func (u *UserQualificationUpsertOne) SetOrganization(v string) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateOrganization() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateOrganization()
	})
}

// ClearOrganization clears the value of the "organization" field.
func (u *UserQualificationUpsertOne) ClearOrganization() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearOrganization()
	})
}

// SetURL sets the "url" field.
func (u *UserQualificationUpsertOne) SetURL(v string) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateURL() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *UserQualificationUpsertOne) ClearURL() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearURL()
	})
}

// SetGotDate sets the "got_date" field.
func (u *UserQualificationUpsertOne) SetGotDate(v string) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetGotDate(v)
	})
}

// UpdateGotDate sets the "got_date" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateGotDate() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateGotDate()
	})
}

// ClearGotDate clears the value of the "got_date" field.
func (u *UserQualificationUpsertOne) ClearGotDate() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearGotDate()
	})
}

// SetMemo sets the "memo" field.
func (u *UserQualificationUpsertOne) SetMemo(v string) *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserQualificationUpsertOne) UpdateMemo() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *UserQualificationUpsertOne) ClearMemo() *UserQualificationUpsertOne {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *UserQualificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserQualificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserQualificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserQualificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserQualificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserQualificationCreateBulk is the builder for creating many UserQualification entities in bulk.
type UserQualificationCreateBulk struct {
	config
	builders []*UserQualificationCreate
	conflict []sql.ConflictOption
}

// Save creates the UserQualification entities in the database.
func (uqcb *UserQualificationCreateBulk) Save(ctx context.Context) ([]*UserQualification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uqcb.builders))
	nodes := make([]*UserQualification, len(uqcb.builders))
	mutators := make([]Mutator, len(uqcb.builders))
	for i := range uqcb.builders {
		func(i int, root context.Context) {
			builder := uqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserQualificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uqcb *UserQualificationCreateBulk) SaveX(ctx context.Context) []*UserQualification {
	v, err := uqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqcb *UserQualificationCreateBulk) Exec(ctx context.Context) error {
	_, err := uqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqcb *UserQualificationCreateBulk) ExecX(ctx context.Context) {
	if err := uqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserQualification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserQualificationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uqcb *UserQualificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserQualificationUpsertBulk {
	uqcb.conflict = opts
	return &UserQualificationUpsertBulk{
		create: uqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uqcb *UserQualificationCreateBulk) OnConflictColumns(columns ...string) *UserQualificationUpsertBulk {
	uqcb.conflict = append(uqcb.conflict, sql.ConflictColumns(columns...))
	return &UserQualificationUpsertBulk{
		create: uqcb,
	}
}

// UserQualificationUpsertBulk is the builder for "upsert"-ing
// a bulk of UserQualification nodes.
type UserQualificationUpsertBulk struct {
	create *UserQualificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserQualificationUpsertBulk) UpdateNewValues() *UserQualificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(userqualification.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserQualification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserQualificationUpsertBulk) Ignore() *UserQualificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserQualificationUpsertBulk) DoNothing() *UserQualificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserQualificationCreateBulk.OnConflict
// documentation for more info.
func (u *UserQualificationUpsertBulk) Update(set func(*UserQualificationUpsert)) *UserQualificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserQualificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserQualificationUpsertBulk) SetUpdateTime(v time.Time) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateUpdateTime() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *UserQualificationUpsertBulk) SetName(v string) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateName() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateName()
	})
}

// SetOrganization sets the "organization" field.
func (u *UserQualificationUpsertBulk) SetOrganization(v string) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateOrganization() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateOrganization()
	})
}

// ClearOrganization clears the value of the "organization" field.
func (u *UserQualificationUpsertBulk) ClearOrganization() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearOrganization()
	})
}

// SetURL sets the "url" field.
func (u *UserQualificationUpsertBulk) SetURL(v string) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateURL() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *UserQualificationUpsertBulk) ClearURL() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearURL()
	})
}

// SetGotDate sets the "got_date" field.
func (u *UserQualificationUpsertBulk) SetGotDate(v string) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetGotDate(v)
	})
}

// UpdateGotDate sets the "got_date" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateGotDate() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateGotDate()
	})
}

// ClearGotDate clears the value of the "got_date" field.
func (u *UserQualificationUpsertBulk) ClearGotDate() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearGotDate()
	})
}

// SetMemo sets the "memo" field.
func (u *UserQualificationUpsertBulk) SetMemo(v string) *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserQualificationUpsertBulk) UpdateMemo() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *UserQualificationUpsertBulk) ClearMemo() *UserQualificationUpsertBulk {
	return u.Update(func(s *UserQualificationUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *UserQualificationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserQualificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserQualificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserQualificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
