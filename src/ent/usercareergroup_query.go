// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
)

// UserCareerGroupQuery is the builder for querying UserCareerGroup entities.
type UserCareerGroupQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserCareerGroup
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCareerGroupQuery builder.
func (ucgq *UserCareerGroupQuery) Where(ps ...predicate.UserCareerGroup) *UserCareerGroupQuery {
	ucgq.predicates = append(ucgq.predicates, ps...)
	return ucgq
}

// Limit adds a limit step to the query.
func (ucgq *UserCareerGroupQuery) Limit(limit int) *UserCareerGroupQuery {
	ucgq.limit = &limit
	return ucgq
}

// Offset adds an offset step to the query.
func (ucgq *UserCareerGroupQuery) Offset(offset int) *UserCareerGroupQuery {
	ucgq.offset = &offset
	return ucgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucgq *UserCareerGroupQuery) Unique(unique bool) *UserCareerGroupQuery {
	ucgq.unique = &unique
	return ucgq
}

// Order adds an order step to the query.
func (ucgq *UserCareerGroupQuery) Order(o ...OrderFunc) *UserCareerGroupQuery {
	ucgq.order = append(ucgq.order, o...)
	return ucgq
}

// First returns the first UserCareerGroup entity from the query.
// Returns a *NotFoundError when no UserCareerGroup was found.
func (ucgq *UserCareerGroupQuery) First(ctx context.Context) (*UserCareerGroup, error) {
	nodes, err := ucgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercareergroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) FirstX(ctx context.Context) *UserCareerGroup {
	node, err := ucgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCareerGroup ID from the query.
// Returns a *NotFoundError when no UserCareerGroup ID was found.
func (ucgq *UserCareerGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercareergroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := ucgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCareerGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCareerGroup entity is found.
// Returns a *NotFoundError when no UserCareerGroup entities are found.
func (ucgq *UserCareerGroupQuery) Only(ctx context.Context) (*UserCareerGroup, error) {
	nodes, err := ucgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercareergroup.Label}
	default:
		return nil, &NotSingularError{usercareergroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) OnlyX(ctx context.Context) *UserCareerGroup {
	node, err := ucgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCareerGroup ID in the query.
// Returns a *NotSingularError when more than one UserCareerGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucgq *UserCareerGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercareergroup.Label}
	default:
		err = &NotSingularError{usercareergroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := ucgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCareerGroups.
func (ucgq *UserCareerGroupQuery) All(ctx context.Context) ([]*UserCareerGroup, error) {
	if err := ucgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ucgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) AllX(ctx context.Context) []*UserCareerGroup {
	nodes, err := ucgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCareerGroup IDs.
func (ucgq *UserCareerGroupQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ucgq.Select(usercareergroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := ucgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucgq *UserCareerGroupQuery) Count(ctx context.Context) (int, error) {
	if err := ucgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ucgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) CountX(ctx context.Context) int {
	count, err := ucgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucgq *UserCareerGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := ucgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ucgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ucgq *UserCareerGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := ucgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCareerGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucgq *UserCareerGroupQuery) Clone() *UserCareerGroupQuery {
	if ucgq == nil {
		return nil
	}
	return &UserCareerGroupQuery{
		config:     ucgq.config,
		limit:      ucgq.limit,
		offset:     ucgq.offset,
		order:      append([]OrderFunc{}, ucgq.order...),
		predicates: append([]predicate.UserCareerGroup{}, ucgq.predicates...),
		// clone intermediate query.
		sql:    ucgq.sql.Clone(),
		path:   ucgq.path,
		unique: ucgq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCareerGroup.Query().
//		GroupBy(usercareergroup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucgq *UserCareerGroupQuery) GroupBy(field string, fields ...string) *UserCareerGroupGroupBy {
	grbuild := &UserCareerGroupGroupBy{config: ucgq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ucgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ucgq.sqlQuery(ctx), nil
	}
	grbuild.label = usercareergroup.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UserCareerGroup.Query().
//		Select(usercareergroup.FieldCreateTime).
//		Scan(ctx, &v)
func (ucgq *UserCareerGroupQuery) Select(fields ...string) *UserCareerGroupSelect {
	ucgq.fields = append(ucgq.fields, fields...)
	selbuild := &UserCareerGroupSelect{UserCareerGroupQuery: ucgq}
	selbuild.label = usercareergroup.Label
	selbuild.flds, selbuild.scan = &ucgq.fields, selbuild.Scan
	return selbuild
}

func (ucgq *UserCareerGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ucgq.fields {
		if !usercareergroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucgq.path != nil {
		prev, err := ucgq.path(ctx)
		if err != nil {
			return err
		}
		ucgq.sql = prev
	}
	return nil
}

func (ucgq *UserCareerGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCareerGroup, error) {
	var (
		nodes = []*UserCareerGroup{}
		_spec = ucgq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*UserCareerGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &UserCareerGroup{config: ucgq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (ucgq *UserCareerGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucgq.querySpec()
	_spec.Node.Columns = ucgq.fields
	if len(ucgq.fields) > 0 {
		_spec.Unique = ucgq.unique != nil && *ucgq.unique
	}
	return sqlgraph.CountNodes(ctx, ucgq.driver, _spec)
}

func (ucgq *UserCareerGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ucgq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ucgq *UserCareerGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercareergroup.Table,
			Columns: usercareergroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercareergroup.FieldID,
			},
		},
		From:   ucgq.sql,
		Unique: true,
	}
	if unique := ucgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ucgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercareergroup.FieldID)
		for i := range fields {
			if fields[i] != usercareergroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ucgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucgq *UserCareerGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucgq.driver.Dialect())
	t1 := builder.Table(usercareergroup.Table)
	columns := ucgq.fields
	if len(columns) == 0 {
		columns = usercareergroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucgq.sql != nil {
		selector = ucgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucgq.unique != nil && *ucgq.unique {
		selector.Distinct()
	}
	for _, p := range ucgq.predicates {
		p(selector)
	}
	for _, p := range ucgq.order {
		p(selector)
	}
	if offset := ucgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCareerGroupGroupBy is the group-by builder for UserCareerGroup entities.
type UserCareerGroupGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucggb *UserCareerGroupGroupBy) Aggregate(fns ...AggregateFunc) *UserCareerGroupGroupBy {
	ucggb.fns = append(ucggb.fns, fns...)
	return ucggb
}

// Scan applies the group-by query and scans the result into the given value.
func (ucggb *UserCareerGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ucggb.path(ctx)
	if err != nil {
		return err
	}
	ucggb.sql = query
	return ucggb.sqlScan(ctx, v)
}

func (ucggb *UserCareerGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ucggb.fields {
		if !usercareergroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ucggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ucggb *UserCareerGroupGroupBy) sqlQuery() *sql.Selector {
	selector := ucggb.sql.Select()
	aggregation := make([]string, 0, len(ucggb.fns))
	for _, fn := range ucggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ucggb.fields)+len(ucggb.fns))
		for _, f := range ucggb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ucggb.fields...)...)
}

// UserCareerGroupSelect is the builder for selecting fields of UserCareerGroup entities.
type UserCareerGroupSelect struct {
	*UserCareerGroupQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ucgs *UserCareerGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ucgs.prepareQuery(ctx); err != nil {
		return err
	}
	ucgs.sql = ucgs.UserCareerGroupQuery.sqlQuery(ctx)
	return ucgs.sqlScan(ctx, v)
}

func (ucgs *UserCareerGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ucgs.sql.Query()
	if err := ucgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
