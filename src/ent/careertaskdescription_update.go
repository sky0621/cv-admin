// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careertask"
	"github.com/sky0621/cv-admin/src/ent/careertaskdescription"
	"github.com/sky0621/cv-admin/src/ent/predicate"
)

// CareerTaskDescriptionUpdate is the builder for updating CareerTaskDescription entities.
type CareerTaskDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *CareerTaskDescriptionMutation
}

// Where appends a list predicates to the CareerTaskDescriptionUpdate builder.
func (ctdu *CareerTaskDescriptionUpdate) Where(ps ...predicate.CareerTaskDescription) *CareerTaskDescriptionUpdate {
	ctdu.mutation.Where(ps...)
	return ctdu
}

// SetDescription sets the "description" field.
func (ctdu *CareerTaskDescriptionUpdate) SetDescription(s string) *CareerTaskDescriptionUpdate {
	ctdu.mutation.SetDescription(s)
	return ctdu
}

// SetCareertaskID sets the "careertask" edge to the CareerTask entity by ID.
func (ctdu *CareerTaskDescriptionUpdate) SetCareertaskID(id int) *CareerTaskDescriptionUpdate {
	ctdu.mutation.SetCareertaskID(id)
	return ctdu
}

// SetCareertask sets the "careertask" edge to the CareerTask entity.
func (ctdu *CareerTaskDescriptionUpdate) SetCareertask(c *CareerTask) *CareerTaskDescriptionUpdate {
	return ctdu.SetCareertaskID(c.ID)
}

// Mutation returns the CareerTaskDescriptionMutation object of the builder.
func (ctdu *CareerTaskDescriptionUpdate) Mutation() *CareerTaskDescriptionMutation {
	return ctdu.mutation
}

// ClearCareertask clears the "careertask" edge to the CareerTask entity.
func (ctdu *CareerTaskDescriptionUpdate) ClearCareertask() *CareerTaskDescriptionUpdate {
	ctdu.mutation.ClearCareertask()
	return ctdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctdu *CareerTaskDescriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ctdu.hooks) == 0 {
		if err = ctdu.check(); err != nil {
			return 0, err
		}
		affected, err = ctdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CareerTaskDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctdu.check(); err != nil {
				return 0, err
			}
			ctdu.mutation = mutation
			affected, err = ctdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctdu.hooks) - 1; i >= 0; i-- {
			if ctdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctdu *CareerTaskDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ctdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctdu *CareerTaskDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := ctdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctdu *CareerTaskDescriptionUpdate) ExecX(ctx context.Context) {
	if err := ctdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctdu *CareerTaskDescriptionUpdate) check() error {
	if v, ok := ctdu.mutation.Description(); ok {
		if err := careertaskdescription.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CareerTaskDescription.description": %w`, err)}
		}
	}
	if _, ok := ctdu.mutation.CareertaskID(); ctdu.mutation.CareertaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CareerTaskDescription.careertask"`)
	}
	return nil
}

func (ctdu *CareerTaskDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   careertaskdescription.Table,
			Columns: careertaskdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: careertaskdescription.FieldID,
			},
		},
	}
	if ps := ctdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctdu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: careertaskdescription.FieldDescription,
		})
	}
	if ctdu.mutation.CareertaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   careertaskdescription.CareertaskTable,
			Columns: []string{careertaskdescription.CareertaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctdu.mutation.CareertaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   careertaskdescription.CareertaskTable,
			Columns: []string{careertaskdescription.CareertaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careertaskdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CareerTaskDescriptionUpdateOne is the builder for updating a single CareerTaskDescription entity.
type CareerTaskDescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CareerTaskDescriptionMutation
}

// SetDescription sets the "description" field.
func (ctduo *CareerTaskDescriptionUpdateOne) SetDescription(s string) *CareerTaskDescriptionUpdateOne {
	ctduo.mutation.SetDescription(s)
	return ctduo
}

// SetCareertaskID sets the "careertask" edge to the CareerTask entity by ID.
func (ctduo *CareerTaskDescriptionUpdateOne) SetCareertaskID(id int) *CareerTaskDescriptionUpdateOne {
	ctduo.mutation.SetCareertaskID(id)
	return ctduo
}

// SetCareertask sets the "careertask" edge to the CareerTask entity.
func (ctduo *CareerTaskDescriptionUpdateOne) SetCareertask(c *CareerTask) *CareerTaskDescriptionUpdateOne {
	return ctduo.SetCareertaskID(c.ID)
}

// Mutation returns the CareerTaskDescriptionMutation object of the builder.
func (ctduo *CareerTaskDescriptionUpdateOne) Mutation() *CareerTaskDescriptionMutation {
	return ctduo.mutation
}

// ClearCareertask clears the "careertask" edge to the CareerTask entity.
func (ctduo *CareerTaskDescriptionUpdateOne) ClearCareertask() *CareerTaskDescriptionUpdateOne {
	ctduo.mutation.ClearCareertask()
	return ctduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctduo *CareerTaskDescriptionUpdateOne) Select(field string, fields ...string) *CareerTaskDescriptionUpdateOne {
	ctduo.fields = append([]string{field}, fields...)
	return ctduo
}

// Save executes the query and returns the updated CareerTaskDescription entity.
func (ctduo *CareerTaskDescriptionUpdateOne) Save(ctx context.Context) (*CareerTaskDescription, error) {
	var (
		err  error
		node *CareerTaskDescription
	)
	if len(ctduo.hooks) == 0 {
		if err = ctduo.check(); err != nil {
			return nil, err
		}
		node, err = ctduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CareerTaskDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctduo.check(); err != nil {
				return nil, err
			}
			ctduo.mutation = mutation
			node, err = ctduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctduo.hooks) - 1; i >= 0; i-- {
			if ctduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CareerTaskDescription)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CareerTaskDescriptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctduo *CareerTaskDescriptionUpdateOne) SaveX(ctx context.Context) *CareerTaskDescription {
	node, err := ctduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctduo *CareerTaskDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ctduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctduo *CareerTaskDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := ctduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctduo *CareerTaskDescriptionUpdateOne) check() error {
	if v, ok := ctduo.mutation.Description(); ok {
		if err := careertaskdescription.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CareerTaskDescription.description": %w`, err)}
		}
	}
	if _, ok := ctduo.mutation.CareertaskID(); ctduo.mutation.CareertaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CareerTaskDescription.careertask"`)
	}
	return nil
}

func (ctduo *CareerTaskDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *CareerTaskDescription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   careertaskdescription.Table,
			Columns: careertaskdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: careertaskdescription.FieldID,
			},
		},
	}
	id, ok := ctduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CareerTaskDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, careertaskdescription.FieldID)
		for _, f := range fields {
			if !careertaskdescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != careertaskdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctduo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: careertaskdescription.FieldDescription,
		})
	}
	if ctduo.mutation.CareertaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   careertaskdescription.CareertaskTable,
			Columns: []string{careertaskdescription.CareertaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctduo.mutation.CareertaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   careertaskdescription.CareertaskTable,
			Columns: []string{careertaskdescription.CareertaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CareerTaskDescription{config: ctduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careertaskdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
