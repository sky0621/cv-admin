// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/skilltag"
)

// SkillTag is the model entity for the SkillTag schema.
type SkillTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkillTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case skilltag.FieldID:
			values[i] = new(sql.NullInt64)
		case skilltag.FieldName, skilltag.FieldKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SkillTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkillTag fields.
func (st *SkillTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skilltag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case skilltag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case skilltag.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				st.Key = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SkillTag.
// Note that you need to call SkillTag.Unwrap() before calling this method if this SkillTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SkillTag) Update() *SkillTagUpdateOne {
	return NewSkillTagClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SkillTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SkillTag) Unwrap() *SkillTag {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkillTag is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SkillTag) String() string {
	var builder strings.Builder
	builder.WriteString("SkillTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(st.Key)
	builder.WriteByte(')')
	return builder.String()
}

// SkillTags is a parsable slice of SkillTag.
type SkillTags []*SkillTag
