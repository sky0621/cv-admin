// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usercareer"
	"github.com/sky0621/cv-admin/src/ent/usercareerdescription"
)

// UserCareerDescriptionQuery is the builder for querying UserCareerDescription entities.
type UserCareerDescriptionQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.UserCareerDescription
	withCareer *UserCareerQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCareerDescriptionQuery builder.
func (ucdq *UserCareerDescriptionQuery) Where(ps ...predicate.UserCareerDescription) *UserCareerDescriptionQuery {
	ucdq.predicates = append(ucdq.predicates, ps...)
	return ucdq
}

// Limit the number of records to be returned by this query.
func (ucdq *UserCareerDescriptionQuery) Limit(limit int) *UserCareerDescriptionQuery {
	ucdq.ctx.Limit = &limit
	return ucdq
}

// Offset to start from.
func (ucdq *UserCareerDescriptionQuery) Offset(offset int) *UserCareerDescriptionQuery {
	ucdq.ctx.Offset = &offset
	return ucdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucdq *UserCareerDescriptionQuery) Unique(unique bool) *UserCareerDescriptionQuery {
	ucdq.ctx.Unique = &unique
	return ucdq
}

// Order specifies how the records should be ordered.
func (ucdq *UserCareerDescriptionQuery) Order(o ...OrderFunc) *UserCareerDescriptionQuery {
	ucdq.order = append(ucdq.order, o...)
	return ucdq
}

// QueryCareer chains the current query on the "career" edge.
func (ucdq *UserCareerDescriptionQuery) QueryCareer() *UserCareerQuery {
	query := (&UserCareerClient{config: ucdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercareerdescription.Table, usercareerdescription.FieldID, selector),
			sqlgraph.To(usercareer.Table, usercareer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercareerdescription.CareerTable, usercareerdescription.CareerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCareerDescription entity from the query.
// Returns a *NotFoundError when no UserCareerDescription was found.
func (ucdq *UserCareerDescriptionQuery) First(ctx context.Context) (*UserCareerDescription, error) {
	nodes, err := ucdq.Limit(1).All(setContextOp(ctx, ucdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercareerdescription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) FirstX(ctx context.Context) *UserCareerDescription {
	node, err := ucdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCareerDescription ID from the query.
// Returns a *NotFoundError when no UserCareerDescription ID was found.
func (ucdq *UserCareerDescriptionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucdq.Limit(1).IDs(setContextOp(ctx, ucdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercareerdescription.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) FirstIDX(ctx context.Context) int {
	id, err := ucdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCareerDescription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCareerDescription entity is found.
// Returns a *NotFoundError when no UserCareerDescription entities are found.
func (ucdq *UserCareerDescriptionQuery) Only(ctx context.Context) (*UserCareerDescription, error) {
	nodes, err := ucdq.Limit(2).All(setContextOp(ctx, ucdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercareerdescription.Label}
	default:
		return nil, &NotSingularError{usercareerdescription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) OnlyX(ctx context.Context) *UserCareerDescription {
	node, err := ucdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCareerDescription ID in the query.
// Returns a *NotSingularError when more than one UserCareerDescription ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucdq *UserCareerDescriptionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucdq.Limit(2).IDs(setContextOp(ctx, ucdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercareerdescription.Label}
	default:
		err = &NotSingularError{usercareerdescription.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) OnlyIDX(ctx context.Context) int {
	id, err := ucdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCareerDescriptions.
func (ucdq *UserCareerDescriptionQuery) All(ctx context.Context) ([]*UserCareerDescription, error) {
	ctx = setContextOp(ctx, ucdq.ctx, "All")
	if err := ucdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserCareerDescription, *UserCareerDescriptionQuery]()
	return withInterceptors[[]*UserCareerDescription](ctx, ucdq, qr, ucdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) AllX(ctx context.Context) []*UserCareerDescription {
	nodes, err := ucdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCareerDescription IDs.
func (ucdq *UserCareerDescriptionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ucdq.ctx.Unique == nil && ucdq.path != nil {
		ucdq.Unique(true)
	}
	ctx = setContextOp(ctx, ucdq.ctx, "IDs")
	if err = ucdq.Select(usercareerdescription.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) IDsX(ctx context.Context) []int {
	ids, err := ucdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucdq *UserCareerDescriptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucdq.ctx, "Count")
	if err := ucdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucdq, querierCount[*UserCareerDescriptionQuery](), ucdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) CountX(ctx context.Context) int {
	count, err := ucdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucdq *UserCareerDescriptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucdq.ctx, "Exist")
	switch _, err := ucdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucdq *UserCareerDescriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := ucdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCareerDescriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucdq *UserCareerDescriptionQuery) Clone() *UserCareerDescriptionQuery {
	if ucdq == nil {
		return nil
	}
	return &UserCareerDescriptionQuery{
		config:     ucdq.config,
		ctx:        ucdq.ctx.Clone(),
		order:      append([]OrderFunc{}, ucdq.order...),
		inters:     append([]Interceptor{}, ucdq.inters...),
		predicates: append([]predicate.UserCareerDescription{}, ucdq.predicates...),
		withCareer: ucdq.withCareer.Clone(),
		// clone intermediate query.
		sql:  ucdq.sql.Clone(),
		path: ucdq.path,
	}
}

// WithCareer tells the query-builder to eager-load the nodes that are connected to
// the "career" edge. The optional arguments are used to configure the query builder of the edge.
func (ucdq *UserCareerDescriptionQuery) WithCareer(opts ...func(*UserCareerQuery)) *UserCareerDescriptionQuery {
	query := (&UserCareerClient{config: ucdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucdq.withCareer = query
	return ucdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCareerDescription.Query().
//		GroupBy(usercareerdescription.FieldDescription).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucdq *UserCareerDescriptionQuery) GroupBy(field string, fields ...string) *UserCareerDescriptionGroupBy {
	ucdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserCareerDescriptionGroupBy{build: ucdq}
	grbuild.flds = &ucdq.ctx.Fields
	grbuild.label = usercareerdescription.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.UserCareerDescription.Query().
//		Select(usercareerdescription.FieldDescription).
//		Scan(ctx, &v)
func (ucdq *UserCareerDescriptionQuery) Select(fields ...string) *UserCareerDescriptionSelect {
	ucdq.ctx.Fields = append(ucdq.ctx.Fields, fields...)
	sbuild := &UserCareerDescriptionSelect{UserCareerDescriptionQuery: ucdq}
	sbuild.label = usercareerdescription.Label
	sbuild.flds, sbuild.scan = &ucdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserCareerDescriptionSelect configured with the given aggregations.
func (ucdq *UserCareerDescriptionQuery) Aggregate(fns ...AggregateFunc) *UserCareerDescriptionSelect {
	return ucdq.Select().Aggregate(fns...)
}

func (ucdq *UserCareerDescriptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucdq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucdq.ctx.Fields {
		if !usercareerdescription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucdq.path != nil {
		prev, err := ucdq.path(ctx)
		if err != nil {
			return err
		}
		ucdq.sql = prev
	}
	return nil
}

func (ucdq *UserCareerDescriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCareerDescription, error) {
	var (
		nodes       = []*UserCareerDescription{}
		withFKs     = ucdq.withFKs
		_spec       = ucdq.querySpec()
		loadedTypes = [1]bool{
			ucdq.withCareer != nil,
		}
	)
	if ucdq.withCareer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usercareerdescription.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserCareerDescription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserCareerDescription{config: ucdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucdq.withCareer; query != nil {
		if err := ucdq.loadCareer(ctx, query, nodes, nil,
			func(n *UserCareerDescription, e *UserCareer) { n.Edges.Career = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucdq *UserCareerDescriptionQuery) loadCareer(ctx context.Context, query *UserCareerQuery, nodes []*UserCareerDescription, init func(*UserCareerDescription), assign func(*UserCareerDescription, *UserCareer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserCareerDescription)
	for i := range nodes {
		if nodes[i].career_id == nil {
			continue
		}
		fk := *nodes[i].career_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(usercareer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "career_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ucdq *UserCareerDescriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucdq.querySpec()
	_spec.Node.Columns = ucdq.ctx.Fields
	if len(ucdq.ctx.Fields) > 0 {
		_spec.Unique = ucdq.ctx.Unique != nil && *ucdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ucdq.driver, _spec)
}

func (ucdq *UserCareerDescriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercareerdescription.Table, usercareerdescription.Columns, sqlgraph.NewFieldSpec(usercareerdescription.FieldID, field.TypeInt))
	_spec.From = ucdq.sql
	if unique := ucdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucdq.path != nil {
		_spec.Unique = true
	}
	if fields := ucdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercareerdescription.FieldID)
		for i := range fields {
			if fields[i] != usercareerdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ucdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucdq *UserCareerDescriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucdq.driver.Dialect())
	t1 := builder.Table(usercareerdescription.Table)
	columns := ucdq.ctx.Fields
	if len(columns) == 0 {
		columns = usercareerdescription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucdq.sql != nil {
		selector = ucdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucdq.ctx.Unique != nil && *ucdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ucdq.predicates {
		p(selector)
	}
	for _, p := range ucdq.order {
		p(selector)
	}
	if offset := ucdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCareerDescriptionGroupBy is the group-by builder for UserCareerDescription entities.
type UserCareerDescriptionGroupBy struct {
	selector
	build *UserCareerDescriptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucdgb *UserCareerDescriptionGroupBy) Aggregate(fns ...AggregateFunc) *UserCareerDescriptionGroupBy {
	ucdgb.fns = append(ucdgb.fns, fns...)
	return ucdgb
}

// Scan applies the selector query and scans the result into the given value.
func (ucdgb *UserCareerDescriptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucdgb.build.ctx, "GroupBy")
	if err := ucdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCareerDescriptionQuery, *UserCareerDescriptionGroupBy](ctx, ucdgb.build, ucdgb, ucdgb.build.inters, v)
}

func (ucdgb *UserCareerDescriptionGroupBy) sqlScan(ctx context.Context, root *UserCareerDescriptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucdgb.fns))
	for _, fn := range ucdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucdgb.flds)+len(ucdgb.fns))
		for _, f := range *ucdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserCareerDescriptionSelect is the builder for selecting fields of UserCareerDescription entities.
type UserCareerDescriptionSelect struct {
	*UserCareerDescriptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucds *UserCareerDescriptionSelect) Aggregate(fns ...AggregateFunc) *UserCareerDescriptionSelect {
	ucds.fns = append(ucds.fns, fns...)
	return ucds
}

// Scan applies the selector query and scans the result into the given value.
func (ucds *UserCareerDescriptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucds.ctx, "Select")
	if err := ucds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCareerDescriptionQuery, *UserCareerDescriptionSelect](ctx, ucds.UserCareerDescriptionQuery, ucds, ucds.inters, v)
}

func (ucds *UserCareerDescriptionSelect) sqlScan(ctx context.Context, root *UserCareerDescriptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucds.fns))
	for _, fn := range ucds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
