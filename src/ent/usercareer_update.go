// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careerskillgroup"
	"github.com/sky0621/cv-admin/src/ent/careertask"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usercareer"
	"github.com/sky0621/cv-admin/src/ent/usercareerdescription"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
)

// UserCareerUpdate is the builder for updating UserCareer entities.
type UserCareerUpdate struct {
	config
	hooks    []Hook
	mutation *UserCareerMutation
}

// Where appends a list predicates to the UserCareerUpdate builder.
func (ucu *UserCareerUpdate) Where(ps ...predicate.UserCareer) *UserCareerUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUpdateTime sets the "update_time" field.
func (ucu *UserCareerUpdate) SetUpdateTime(t time.Time) *UserCareerUpdate {
	ucu.mutation.SetUpdateTime(t)
	return ucu
}

// SetName sets the "name" field.
func (ucu *UserCareerUpdate) SetName(s string) *UserCareerUpdate {
	ucu.mutation.SetName(s)
	return ucu
}

// SetFrom sets the "from" field.
func (ucu *UserCareerUpdate) SetFrom(s string) *UserCareerUpdate {
	ucu.mutation.SetFrom(s)
	return ucu
}

// SetTo sets the "to" field.
func (ucu *UserCareerUpdate) SetTo(s string) *UserCareerUpdate {
	ucu.mutation.SetTo(s)
	return ucu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (ucu *UserCareerUpdate) SetNillableTo(s *string) *UserCareerUpdate {
	if s != nil {
		ucu.SetTo(*s)
	}
	return ucu
}

// ClearTo clears the value of the "to" field.
func (ucu *UserCareerUpdate) ClearTo() *UserCareerUpdate {
	ucu.mutation.ClearTo()
	return ucu
}

// SetCareerGroupID sets the "careerGroup" edge to the UserCareerGroup entity by ID.
func (ucu *UserCareerUpdate) SetCareerGroupID(id int) *UserCareerUpdate {
	ucu.mutation.SetCareerGroupID(id)
	return ucu
}

// SetCareerGroup sets the "careerGroup" edge to the UserCareerGroup entity.
func (ucu *UserCareerUpdate) SetCareerGroup(u *UserCareerGroup) *UserCareerUpdate {
	return ucu.SetCareerGroupID(u.ID)
}

// AddCareerDescriptionIDs adds the "careerDescriptions" edge to the UserCareerDescription entity by IDs.
func (ucu *UserCareerUpdate) AddCareerDescriptionIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.AddCareerDescriptionIDs(ids...)
	return ucu
}

// AddCareerDescriptions adds the "careerDescriptions" edges to the UserCareerDescription entity.
func (ucu *UserCareerUpdate) AddCareerDescriptions(u ...*UserCareerDescription) *UserCareerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucu.AddCareerDescriptionIDs(ids...)
}

// AddCareerTaskIDs adds the "careerTasks" edge to the CareerTask entity by IDs.
func (ucu *UserCareerUpdate) AddCareerTaskIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.AddCareerTaskIDs(ids...)
	return ucu
}

// AddCareerTasks adds the "careerTasks" edges to the CareerTask entity.
func (ucu *UserCareerUpdate) AddCareerTasks(c ...*CareerTask) *UserCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.AddCareerTaskIDs(ids...)
}

// AddCareerSkillGroupIDs adds the "careerSkillGroups" edge to the CareerSkillGroup entity by IDs.
func (ucu *UserCareerUpdate) AddCareerSkillGroupIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.AddCareerSkillGroupIDs(ids...)
	return ucu
}

// AddCareerSkillGroups adds the "careerSkillGroups" edges to the CareerSkillGroup entity.
func (ucu *UserCareerUpdate) AddCareerSkillGroups(c ...*CareerSkillGroup) *UserCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.AddCareerSkillGroupIDs(ids...)
}

// Mutation returns the UserCareerMutation object of the builder.
func (ucu *UserCareerUpdate) Mutation() *UserCareerMutation {
	return ucu.mutation
}

// ClearCareerGroup clears the "careerGroup" edge to the UserCareerGroup entity.
func (ucu *UserCareerUpdate) ClearCareerGroup() *UserCareerUpdate {
	ucu.mutation.ClearCareerGroup()
	return ucu
}

// ClearCareerDescriptions clears all "careerDescriptions" edges to the UserCareerDescription entity.
func (ucu *UserCareerUpdate) ClearCareerDescriptions() *UserCareerUpdate {
	ucu.mutation.ClearCareerDescriptions()
	return ucu
}

// RemoveCareerDescriptionIDs removes the "careerDescriptions" edge to UserCareerDescription entities by IDs.
func (ucu *UserCareerUpdate) RemoveCareerDescriptionIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.RemoveCareerDescriptionIDs(ids...)
	return ucu
}

// RemoveCareerDescriptions removes "careerDescriptions" edges to UserCareerDescription entities.
func (ucu *UserCareerUpdate) RemoveCareerDescriptions(u ...*UserCareerDescription) *UserCareerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucu.RemoveCareerDescriptionIDs(ids...)
}

// ClearCareerTasks clears all "careerTasks" edges to the CareerTask entity.
func (ucu *UserCareerUpdate) ClearCareerTasks() *UserCareerUpdate {
	ucu.mutation.ClearCareerTasks()
	return ucu
}

// RemoveCareerTaskIDs removes the "careerTasks" edge to CareerTask entities by IDs.
func (ucu *UserCareerUpdate) RemoveCareerTaskIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.RemoveCareerTaskIDs(ids...)
	return ucu
}

// RemoveCareerTasks removes "careerTasks" edges to CareerTask entities.
func (ucu *UserCareerUpdate) RemoveCareerTasks(c ...*CareerTask) *UserCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.RemoveCareerTaskIDs(ids...)
}

// ClearCareerSkillGroups clears all "careerSkillGroups" edges to the CareerSkillGroup entity.
func (ucu *UserCareerUpdate) ClearCareerSkillGroups() *UserCareerUpdate {
	ucu.mutation.ClearCareerSkillGroups()
	return ucu
}

// RemoveCareerSkillGroupIDs removes the "careerSkillGroups" edge to CareerSkillGroup entities by IDs.
func (ucu *UserCareerUpdate) RemoveCareerSkillGroupIDs(ids ...int) *UserCareerUpdate {
	ucu.mutation.RemoveCareerSkillGroupIDs(ids...)
	return ucu
}

// RemoveCareerSkillGroups removes "careerSkillGroups" edges to CareerSkillGroup entities.
func (ucu *UserCareerUpdate) RemoveCareerSkillGroups(c ...*CareerSkillGroup) *UserCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.RemoveCareerSkillGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCareerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ucu.defaults()
	if len(ucu.hooks) == 0 {
		if err = ucu.check(); err != nil {
			return 0, err
		}
		affected, err = ucu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCareerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucu.check(); err != nil {
				return 0, err
			}
			ucu.mutation = mutation
			affected, err = ucu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucu.hooks) - 1; i >= 0; i-- {
			if ucu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCareerUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCareerUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCareerUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucu *UserCareerUpdate) defaults() {
	if _, ok := ucu.mutation.UpdateTime(); !ok {
		v := usercareer.UpdateDefaultUpdateTime()
		ucu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserCareerUpdate) check() error {
	if v, ok := ucu.mutation.Name(); ok {
		if err := usercareer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserCareer.name": %w`, err)}
		}
	}
	if v, ok := ucu.mutation.From(); ok {
		if err := usercareer.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "UserCareer.from": %w`, err)}
		}
	}
	if v, ok := ucu.mutation.To(); ok {
		if err := usercareer.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "UserCareer.to": %w`, err)}
		}
	}
	if _, ok := ucu.mutation.CareerGroupID(); ucu.mutation.CareerGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCareer.careerGroup"`)
	}
	return nil
}

func (ucu *UserCareerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercareer.Table,
			Columns: usercareer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercareer.FieldID,
			},
		},
	}
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercareer.FieldUpdateTime,
		})
	}
	if value, ok := ucu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldName,
		})
	}
	if value, ok := ucu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldFrom,
		})
	}
	if value, ok := ucu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldTo,
		})
	}
	if ucu.mutation.ToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usercareer.FieldTo,
		})
	}
	if ucu.mutation.CareerGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercareer.CareerGroupTable,
			Columns: []string{usercareer.CareerGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareergroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CareerGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercareer.CareerGroupTable,
			Columns: []string{usercareer.CareerGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareergroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.CareerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RemovedCareerDescriptionsIDs(); len(nodes) > 0 && !ucu.mutation.CareerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CareerDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.CareerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RemovedCareerTasksIDs(); len(nodes) > 0 && !ucu.mutation.CareerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CareerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.CareerSkillGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RemovedCareerSkillGroupsIDs(); len(nodes) > 0 && !ucu.mutation.CareerSkillGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CareerSkillGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercareer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserCareerUpdateOne is the builder for updating a single UserCareer entity.
type UserCareerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCareerMutation
}

// SetUpdateTime sets the "update_time" field.
func (ucuo *UserCareerUpdateOne) SetUpdateTime(t time.Time) *UserCareerUpdateOne {
	ucuo.mutation.SetUpdateTime(t)
	return ucuo
}

// SetName sets the "name" field.
func (ucuo *UserCareerUpdateOne) SetName(s string) *UserCareerUpdateOne {
	ucuo.mutation.SetName(s)
	return ucuo
}

// SetFrom sets the "from" field.
func (ucuo *UserCareerUpdateOne) SetFrom(s string) *UserCareerUpdateOne {
	ucuo.mutation.SetFrom(s)
	return ucuo
}

// SetTo sets the "to" field.
func (ucuo *UserCareerUpdateOne) SetTo(s string) *UserCareerUpdateOne {
	ucuo.mutation.SetTo(s)
	return ucuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (ucuo *UserCareerUpdateOne) SetNillableTo(s *string) *UserCareerUpdateOne {
	if s != nil {
		ucuo.SetTo(*s)
	}
	return ucuo
}

// ClearTo clears the value of the "to" field.
func (ucuo *UserCareerUpdateOne) ClearTo() *UserCareerUpdateOne {
	ucuo.mutation.ClearTo()
	return ucuo
}

// SetCareerGroupID sets the "careerGroup" edge to the UserCareerGroup entity by ID.
func (ucuo *UserCareerUpdateOne) SetCareerGroupID(id int) *UserCareerUpdateOne {
	ucuo.mutation.SetCareerGroupID(id)
	return ucuo
}

// SetCareerGroup sets the "careerGroup" edge to the UserCareerGroup entity.
func (ucuo *UserCareerUpdateOne) SetCareerGroup(u *UserCareerGroup) *UserCareerUpdateOne {
	return ucuo.SetCareerGroupID(u.ID)
}

// AddCareerDescriptionIDs adds the "careerDescriptions" edge to the UserCareerDescription entity by IDs.
func (ucuo *UserCareerUpdateOne) AddCareerDescriptionIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.AddCareerDescriptionIDs(ids...)
	return ucuo
}

// AddCareerDescriptions adds the "careerDescriptions" edges to the UserCareerDescription entity.
func (ucuo *UserCareerUpdateOne) AddCareerDescriptions(u ...*UserCareerDescription) *UserCareerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucuo.AddCareerDescriptionIDs(ids...)
}

// AddCareerTaskIDs adds the "careerTasks" edge to the CareerTask entity by IDs.
func (ucuo *UserCareerUpdateOne) AddCareerTaskIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.AddCareerTaskIDs(ids...)
	return ucuo
}

// AddCareerTasks adds the "careerTasks" edges to the CareerTask entity.
func (ucuo *UserCareerUpdateOne) AddCareerTasks(c ...*CareerTask) *UserCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.AddCareerTaskIDs(ids...)
}

// AddCareerSkillGroupIDs adds the "careerSkillGroups" edge to the CareerSkillGroup entity by IDs.
func (ucuo *UserCareerUpdateOne) AddCareerSkillGroupIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.AddCareerSkillGroupIDs(ids...)
	return ucuo
}

// AddCareerSkillGroups adds the "careerSkillGroups" edges to the CareerSkillGroup entity.
func (ucuo *UserCareerUpdateOne) AddCareerSkillGroups(c ...*CareerSkillGroup) *UserCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.AddCareerSkillGroupIDs(ids...)
}

// Mutation returns the UserCareerMutation object of the builder.
func (ucuo *UserCareerUpdateOne) Mutation() *UserCareerMutation {
	return ucuo.mutation
}

// ClearCareerGroup clears the "careerGroup" edge to the UserCareerGroup entity.
func (ucuo *UserCareerUpdateOne) ClearCareerGroup() *UserCareerUpdateOne {
	ucuo.mutation.ClearCareerGroup()
	return ucuo
}

// ClearCareerDescriptions clears all "careerDescriptions" edges to the UserCareerDescription entity.
func (ucuo *UserCareerUpdateOne) ClearCareerDescriptions() *UserCareerUpdateOne {
	ucuo.mutation.ClearCareerDescriptions()
	return ucuo
}

// RemoveCareerDescriptionIDs removes the "careerDescriptions" edge to UserCareerDescription entities by IDs.
func (ucuo *UserCareerUpdateOne) RemoveCareerDescriptionIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.RemoveCareerDescriptionIDs(ids...)
	return ucuo
}

// RemoveCareerDescriptions removes "careerDescriptions" edges to UserCareerDescription entities.
func (ucuo *UserCareerUpdateOne) RemoveCareerDescriptions(u ...*UserCareerDescription) *UserCareerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucuo.RemoveCareerDescriptionIDs(ids...)
}

// ClearCareerTasks clears all "careerTasks" edges to the CareerTask entity.
func (ucuo *UserCareerUpdateOne) ClearCareerTasks() *UserCareerUpdateOne {
	ucuo.mutation.ClearCareerTasks()
	return ucuo
}

// RemoveCareerTaskIDs removes the "careerTasks" edge to CareerTask entities by IDs.
func (ucuo *UserCareerUpdateOne) RemoveCareerTaskIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.RemoveCareerTaskIDs(ids...)
	return ucuo
}

// RemoveCareerTasks removes "careerTasks" edges to CareerTask entities.
func (ucuo *UserCareerUpdateOne) RemoveCareerTasks(c ...*CareerTask) *UserCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.RemoveCareerTaskIDs(ids...)
}

// ClearCareerSkillGroups clears all "careerSkillGroups" edges to the CareerSkillGroup entity.
func (ucuo *UserCareerUpdateOne) ClearCareerSkillGroups() *UserCareerUpdateOne {
	ucuo.mutation.ClearCareerSkillGroups()
	return ucuo
}

// RemoveCareerSkillGroupIDs removes the "careerSkillGroups" edge to CareerSkillGroup entities by IDs.
func (ucuo *UserCareerUpdateOne) RemoveCareerSkillGroupIDs(ids ...int) *UserCareerUpdateOne {
	ucuo.mutation.RemoveCareerSkillGroupIDs(ids...)
	return ucuo
}

// RemoveCareerSkillGroups removes "careerSkillGroups" edges to CareerSkillGroup entities.
func (ucuo *UserCareerUpdateOne) RemoveCareerSkillGroups(c ...*CareerSkillGroup) *UserCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.RemoveCareerSkillGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserCareerUpdateOne) Select(field string, fields ...string) *UserCareerUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserCareer entity.
func (ucuo *UserCareerUpdateOne) Save(ctx context.Context) (*UserCareer, error) {
	var (
		err  error
		node *UserCareer
	)
	ucuo.defaults()
	if len(ucuo.hooks) == 0 {
		if err = ucuo.check(); err != nil {
			return nil, err
		}
		node, err = ucuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCareerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucuo.check(); err != nil {
				return nil, err
			}
			ucuo.mutation = mutation
			node, err = ucuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucuo.hooks) - 1; i >= 0; i-- {
			if ucuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ucuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserCareer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserCareerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCareerUpdateOne) SaveX(ctx context.Context) *UserCareer {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCareerUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCareerUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucuo *UserCareerUpdateOne) defaults() {
	if _, ok := ucuo.mutation.UpdateTime(); !ok {
		v := usercareer.UpdateDefaultUpdateTime()
		ucuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserCareerUpdateOne) check() error {
	if v, ok := ucuo.mutation.Name(); ok {
		if err := usercareer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserCareer.name": %w`, err)}
		}
	}
	if v, ok := ucuo.mutation.From(); ok {
		if err := usercareer.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "UserCareer.from": %w`, err)}
		}
	}
	if v, ok := ucuo.mutation.To(); ok {
		if err := usercareer.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "UserCareer.to": %w`, err)}
		}
	}
	if _, ok := ucuo.mutation.CareerGroupID(); ucuo.mutation.CareerGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCareer.careerGroup"`)
	}
	return nil
}

func (ucuo *UserCareerUpdateOne) sqlSave(ctx context.Context) (_node *UserCareer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercareer.Table,
			Columns: usercareer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercareer.FieldID,
			},
		},
	}
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCareer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercareer.FieldID)
		for _, f := range fields {
			if !usercareer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercareer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercareer.FieldUpdateTime,
		})
	}
	if value, ok := ucuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldName,
		})
	}
	if value, ok := ucuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldFrom,
		})
	}
	if value, ok := ucuo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercareer.FieldTo,
		})
	}
	if ucuo.mutation.ToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usercareer.FieldTo,
		})
	}
	if ucuo.mutation.CareerGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercareer.CareerGroupTable,
			Columns: []string{usercareer.CareerGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareergroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CareerGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercareer.CareerGroupTable,
			Columns: []string{usercareer.CareerGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareergroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.CareerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RemovedCareerDescriptionsIDs(); len(nodes) > 0 && !ucuo.mutation.CareerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CareerDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerDescriptionsTable,
			Columns: []string{usercareer.CareerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercareerdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.CareerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RemovedCareerTasksIDs(); len(nodes) > 0 && !ucuo.mutation.CareerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CareerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerTasksTable,
			Columns: []string{usercareer.CareerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.CareerSkillGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RemovedCareerSkillGroupsIDs(); len(nodes) > 0 && !ucuo.mutation.CareerSkillGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CareerSkillGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercareer.CareerSkillGroupsTable,
			Columns: []string{usercareer.CareerSkillGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: careerskillgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCareer{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercareer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
