// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/usernote"
)

// UserNoteCreate is the builder for creating a UserNote entity.
type UserNoteCreate struct {
	config
	mutation *UserNoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (unc *UserNoteCreate) SetCreateTime(t time.Time) *UserNoteCreate {
	unc.mutation.SetCreateTime(t)
	return unc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (unc *UserNoteCreate) SetNillableCreateTime(t *time.Time) *UserNoteCreate {
	if t != nil {
		unc.SetCreateTime(*t)
	}
	return unc
}

// SetUpdateTime sets the "update_time" field.
func (unc *UserNoteCreate) SetUpdateTime(t time.Time) *UserNoteCreate {
	unc.mutation.SetUpdateTime(t)
	return unc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (unc *UserNoteCreate) SetNillableUpdateTime(t *time.Time) *UserNoteCreate {
	if t != nil {
		unc.SetUpdateTime(*t)
	}
	return unc
}

// Mutation returns the UserNoteMutation object of the builder.
func (unc *UserNoteCreate) Mutation() *UserNoteMutation {
	return unc.mutation
}

// Save creates the UserNote in the database.
func (unc *UserNoteCreate) Save(ctx context.Context) (*UserNote, error) {
	var (
		err  error
		node *UserNote
	)
	unc.defaults()
	if len(unc.hooks) == 0 {
		if err = unc.check(); err != nil {
			return nil, err
		}
		node, err = unc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserNoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = unc.check(); err != nil {
				return nil, err
			}
			unc.mutation = mutation
			if node, err = unc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(unc.hooks) - 1; i >= 0; i-- {
			if unc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = unc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, unc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserNote)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserNoteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (unc *UserNoteCreate) SaveX(ctx context.Context) *UserNote {
	v, err := unc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unc *UserNoteCreate) Exec(ctx context.Context) error {
	_, err := unc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unc *UserNoteCreate) ExecX(ctx context.Context) {
	if err := unc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unc *UserNoteCreate) defaults() {
	if _, ok := unc.mutation.CreateTime(); !ok {
		v := usernote.DefaultCreateTime()
		unc.mutation.SetCreateTime(v)
	}
	if _, ok := unc.mutation.UpdateTime(); !ok {
		v := usernote.DefaultUpdateTime()
		unc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unc *UserNoteCreate) check() error {
	if _, ok := unc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserNote.create_time"`)}
	}
	if _, ok := unc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserNote.update_time"`)}
	}
	return nil
}

func (unc *UserNoteCreate) sqlSave(ctx context.Context) (*UserNote, error) {
	_node, _spec := unc.createSpec()
	if err := sqlgraph.CreateNode(ctx, unc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (unc *UserNoteCreate) createSpec() (*UserNote, *sqlgraph.CreateSpec) {
	var (
		_node = &UserNote{config: unc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usernote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usernote.FieldID,
			},
		}
	)
	_spec.OnConflict = unc.conflict
	if value, ok := unc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usernote.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := unc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usernote.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNote.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNoteUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (unc *UserNoteCreate) OnConflict(opts ...sql.ConflictOption) *UserNoteUpsertOne {
	unc.conflict = opts
	return &UserNoteUpsertOne{
		create: unc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (unc *UserNoteCreate) OnConflictColumns(columns ...string) *UserNoteUpsertOne {
	unc.conflict = append(unc.conflict, sql.ConflictColumns(columns...))
	return &UserNoteUpsertOne{
		create: unc,
	}
}

type (
	// UserNoteUpsertOne is the builder for "upsert"-ing
	//  one UserNote node.
	UserNoteUpsertOne struct {
		create *UserNoteCreate
	}

	// UserNoteUpsert is the "OnConflict" setter.
	UserNoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *UserNoteUpsert) SetCreateTime(v time.Time) *UserNoteUpsert {
	u.Set(usernote.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserNoteUpsert) UpdateCreateTime() *UserNoteUpsert {
	u.SetExcluded(usernote.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserNoteUpsert) SetUpdateTime(v time.Time) *UserNoteUpsert {
	u.Set(usernote.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserNoteUpsert) UpdateUpdateTime() *UserNoteUpsert {
	u.SetExcluded(usernote.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserNoteUpsertOne) UpdateNewValues() *UserNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(usernote.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserNoteUpsertOne) Ignore() *UserNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNoteUpsertOne) DoNothing() *UserNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNoteCreate.OnConflict
// documentation for more info.
func (u *UserNoteUpsertOne) Update(set func(*UserNoteUpsert)) *UserNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *UserNoteUpsertOne) SetCreateTime(v time.Time) *UserNoteUpsertOne {
	return u.Update(func(s *UserNoteUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserNoteUpsertOne) UpdateCreateTime() *UserNoteUpsertOne {
	return u.Update(func(s *UserNoteUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *UserNoteUpsertOne) SetUpdateTime(v time.Time) *UserNoteUpsertOne {
	return u.Update(func(s *UserNoteUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserNoteUpsertOne) UpdateUpdateTime() *UserNoteUpsertOne {
	return u.Update(func(s *UserNoteUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *UserNoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserNoteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserNoteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserNoteCreateBulk is the builder for creating many UserNote entities in bulk.
type UserNoteCreateBulk struct {
	config
	builders []*UserNoteCreate
	conflict []sql.ConflictOption
}

// Save creates the UserNote entities in the database.
func (uncb *UserNoteCreateBulk) Save(ctx context.Context) ([]*UserNote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uncb.builders))
	nodes := make([]*UserNote, len(uncb.builders))
	mutators := make([]Mutator, len(uncb.builders))
	for i := range uncb.builders {
		func(i int, root context.Context) {
			builder := uncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserNoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uncb *UserNoteCreateBulk) SaveX(ctx context.Context) []*UserNote {
	v, err := uncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uncb *UserNoteCreateBulk) Exec(ctx context.Context) error {
	_, err := uncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uncb *UserNoteCreateBulk) ExecX(ctx context.Context) {
	if err := uncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNoteUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uncb *UserNoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserNoteUpsertBulk {
	uncb.conflict = opts
	return &UserNoteUpsertBulk{
		create: uncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uncb *UserNoteCreateBulk) OnConflictColumns(columns ...string) *UserNoteUpsertBulk {
	uncb.conflict = append(uncb.conflict, sql.ConflictColumns(columns...))
	return &UserNoteUpsertBulk{
		create: uncb,
	}
}

// UserNoteUpsertBulk is the builder for "upsert"-ing
// a bulk of UserNote nodes.
type UserNoteUpsertBulk struct {
	create *UserNoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserNoteUpsertBulk) UpdateNewValues() *UserNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(usernote.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserNoteUpsertBulk) Ignore() *UserNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNoteUpsertBulk) DoNothing() *UserNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNoteCreateBulk.OnConflict
// documentation for more info.
func (u *UserNoteUpsertBulk) Update(set func(*UserNoteUpsert)) *UserNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *UserNoteUpsertBulk) SetCreateTime(v time.Time) *UserNoteUpsertBulk {
	return u.Update(func(s *UserNoteUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserNoteUpsertBulk) UpdateCreateTime() *UserNoteUpsertBulk {
	return u.Update(func(s *UserNoteUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *UserNoteUpsertBulk) SetUpdateTime(v time.Time) *UserNoteUpsertBulk {
	return u.Update(func(s *UserNoteUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserNoteUpsertBulk) UpdateUpdateTime() *UserNoteUpsertBulk {
	return u.Update(func(s *UserNoteUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *UserNoteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserNoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
