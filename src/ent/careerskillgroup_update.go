// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/careerskillgroup"
	"github.com/sky0621/cv-admin/src/ent/predicate"
)

// CareerSkillGroupUpdate is the builder for updating CareerSkillGroup entities.
type CareerSkillGroupUpdate struct {
	config
	hooks    []Hook
	mutation *CareerSkillGroupMutation
}

// Where appends a list predicates to the CareerSkillGroupUpdate builder.
func (csgu *CareerSkillGroupUpdate) Where(ps ...predicate.CareerSkillGroup) *CareerSkillGroupUpdate {
	csgu.mutation.Where(ps...)
	return csgu
}

// SetUpdateTime sets the "update_time" field.
func (csgu *CareerSkillGroupUpdate) SetUpdateTime(t time.Time) *CareerSkillGroupUpdate {
	csgu.mutation.SetUpdateTime(t)
	return csgu
}

// Mutation returns the CareerSkillGroupMutation object of the builder.
func (csgu *CareerSkillGroupUpdate) Mutation() *CareerSkillGroupMutation {
	return csgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csgu *CareerSkillGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	csgu.defaults()
	if len(csgu.hooks) == 0 {
		affected, err = csgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CareerSkillGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csgu.mutation = mutation
			affected, err = csgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csgu.hooks) - 1; i >= 0; i-- {
			if csgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csgu *CareerSkillGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := csgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csgu *CareerSkillGroupUpdate) Exec(ctx context.Context) error {
	_, err := csgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csgu *CareerSkillGroupUpdate) ExecX(ctx context.Context) {
	if err := csgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csgu *CareerSkillGroupUpdate) defaults() {
	if _, ok := csgu.mutation.UpdateTime(); !ok {
		v := careerskillgroup.UpdateDefaultUpdateTime()
		csgu.mutation.SetUpdateTime(v)
	}
}

func (csgu *CareerSkillGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   careerskillgroup.Table,
			Columns: careerskillgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: careerskillgroup.FieldID,
			},
		},
	}
	if ps := csgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csgu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: careerskillgroup.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careerskillgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CareerSkillGroupUpdateOne is the builder for updating a single CareerSkillGroup entity.
type CareerSkillGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CareerSkillGroupMutation
}

// SetUpdateTime sets the "update_time" field.
func (csguo *CareerSkillGroupUpdateOne) SetUpdateTime(t time.Time) *CareerSkillGroupUpdateOne {
	csguo.mutation.SetUpdateTime(t)
	return csguo
}

// Mutation returns the CareerSkillGroupMutation object of the builder.
func (csguo *CareerSkillGroupUpdateOne) Mutation() *CareerSkillGroupMutation {
	return csguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csguo *CareerSkillGroupUpdateOne) Select(field string, fields ...string) *CareerSkillGroupUpdateOne {
	csguo.fields = append([]string{field}, fields...)
	return csguo
}

// Save executes the query and returns the updated CareerSkillGroup entity.
func (csguo *CareerSkillGroupUpdateOne) Save(ctx context.Context) (*CareerSkillGroup, error) {
	var (
		err  error
		node *CareerSkillGroup
	)
	csguo.defaults()
	if len(csguo.hooks) == 0 {
		node, err = csguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CareerSkillGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csguo.mutation = mutation
			node, err = csguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csguo.hooks) - 1; i >= 0; i-- {
			if csguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CareerSkillGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CareerSkillGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csguo *CareerSkillGroupUpdateOne) SaveX(ctx context.Context) *CareerSkillGroup {
	node, err := csguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csguo *CareerSkillGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := csguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csguo *CareerSkillGroupUpdateOne) ExecX(ctx context.Context) {
	if err := csguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csguo *CareerSkillGroupUpdateOne) defaults() {
	if _, ok := csguo.mutation.UpdateTime(); !ok {
		v := careerskillgroup.UpdateDefaultUpdateTime()
		csguo.mutation.SetUpdateTime(v)
	}
}

func (csguo *CareerSkillGroupUpdateOne) sqlSave(ctx context.Context) (_node *CareerSkillGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   careerskillgroup.Table,
			Columns: careerskillgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: careerskillgroup.FieldID,
			},
		},
	}
	id, ok := csguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CareerSkillGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, careerskillgroup.FieldID)
		for _, f := range fields {
			if !careerskillgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != careerskillgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: careerskillgroup.FieldUpdateTime,
		})
	}
	_node = &CareerSkillGroup{config: csguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careerskillgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
