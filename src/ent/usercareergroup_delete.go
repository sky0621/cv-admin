// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/usercareergroup"
)

// UserCareerGroupDelete is the builder for deleting a UserCareerGroup entity.
type UserCareerGroupDelete struct {
	config
	hooks    []Hook
	mutation *UserCareerGroupMutation
}

// Where appends a list predicates to the UserCareerGroupDelete builder.
func (ucgd *UserCareerGroupDelete) Where(ps ...predicate.UserCareerGroup) *UserCareerGroupDelete {
	ucgd.mutation.Where(ps...)
	return ucgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucgd *UserCareerGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucgd.sqlExec, ucgd.mutation, ucgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucgd *UserCareerGroupDelete) ExecX(ctx context.Context) int {
	n, err := ucgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucgd *UserCareerGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usercareergroup.Table, sqlgraph.NewFieldSpec(usercareergroup.FieldID, field.TypeInt))
	if ps := ucgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucgd.mutation.done = true
	return affected, err
}

// UserCareerGroupDeleteOne is the builder for deleting a single UserCareerGroup entity.
type UserCareerGroupDeleteOne struct {
	ucgd *UserCareerGroupDelete
}

// Where appends a list predicates to the UserCareerGroupDelete builder.
func (ucgdo *UserCareerGroupDeleteOne) Where(ps ...predicate.UserCareerGroup) *UserCareerGroupDeleteOne {
	ucgdo.ucgd.mutation.Where(ps...)
	return ucgdo
}

// Exec executes the deletion query.
func (ucgdo *UserCareerGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := ucgdo.ucgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usercareergroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucgdo *UserCareerGroupDeleteOne) ExecX(ctx context.Context) {
	if err := ucgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
