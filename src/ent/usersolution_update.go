// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/user"
	"github.com/sky0621/cv-admin/src/ent/usersolution"
)

// UserSolutionUpdate is the builder for updating UserSolution entities.
type UserSolutionUpdate struct {
	config
	hooks    []Hook
	mutation *UserSolutionMutation
}

// Where appends a list predicates to the UserSolutionUpdate builder.
func (usu *UserSolutionUpdate) Where(ps ...predicate.UserSolution) *UserSolutionUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdateTime sets the "update_time" field.
func (usu *UserSolutionUpdate) SetUpdateTime(t time.Time) *UserSolutionUpdate {
	usu.mutation.SetUpdateTime(t)
	return usu
}

// SetContent sets the "content" field.
func (usu *UserSolutionUpdate) SetContent(s string) *UserSolutionUpdate {
	usu.mutation.SetContent(s)
	return usu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (usu *UserSolutionUpdate) SetNillableContent(s *string) *UserSolutionUpdate {
	if s != nil {
		usu.SetContent(*s)
	}
	return usu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usu *UserSolutionUpdate) SetUserID(id int) *UserSolutionUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserSolutionUpdate) SetUser(u *User) *UserSolutionUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserSolutionMutation object of the builder.
func (usu *UserSolutionUpdate) Mutation() *UserSolutionMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserSolutionUpdate) ClearUser() *UserSolutionUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSolutionUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSolutionUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSolutionUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSolutionUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSolutionUpdate) defaults() {
	if _, ok := usu.mutation.UpdateTime(); !ok {
		v := usersolution.UpdateDefaultUpdateTime()
		usu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSolutionUpdate) check() error {
	if v, ok := usu.mutation.Content(); ok {
		if err := usersolution.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "UserSolution.content": %w`, err)}
		}
	}
	if _, ok := usu.mutation.UserID(); usu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSolution.user"`)
	}
	return nil
}

func (usu *UserSolutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersolution.Table, usersolution.Columns, sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdateTime(); ok {
		_spec.SetField(usersolution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := usu.mutation.Content(); ok {
		_spec.SetField(usersolution.FieldContent, field.TypeString, value)
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersolution.UserTable,
			Columns: []string{usersolution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersolution.UserTable,
			Columns: []string{usersolution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersolution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSolutionUpdateOne is the builder for updating a single UserSolution entity.
type UserSolutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSolutionMutation
}

// SetUpdateTime sets the "update_time" field.
func (usuo *UserSolutionUpdateOne) SetUpdateTime(t time.Time) *UserSolutionUpdateOne {
	usuo.mutation.SetUpdateTime(t)
	return usuo
}

// SetContent sets the "content" field.
func (usuo *UserSolutionUpdateOne) SetContent(s string) *UserSolutionUpdateOne {
	usuo.mutation.SetContent(s)
	return usuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (usuo *UserSolutionUpdateOne) SetNillableContent(s *string) *UserSolutionUpdateOne {
	if s != nil {
		usuo.SetContent(*s)
	}
	return usuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usuo *UserSolutionUpdateOne) SetUserID(id int) *UserSolutionUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserSolutionUpdateOne) SetUser(u *User) *UserSolutionUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserSolutionMutation object of the builder.
func (usuo *UserSolutionUpdateOne) Mutation() *UserSolutionMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserSolutionUpdateOne) ClearUser() *UserSolutionUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Where appends a list predicates to the UserSolutionUpdate builder.
func (usuo *UserSolutionUpdateOne) Where(ps ...predicate.UserSolution) *UserSolutionUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSolutionUpdateOne) Select(field string, fields ...string) *UserSolutionUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSolution entity.
func (usuo *UserSolutionUpdateOne) Save(ctx context.Context) (*UserSolution, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSolutionUpdateOne) SaveX(ctx context.Context) *UserSolution {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSolutionUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSolutionUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSolutionUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdateTime(); !ok {
		v := usersolution.UpdateDefaultUpdateTime()
		usuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSolutionUpdateOne) check() error {
	if v, ok := usuo.mutation.Content(); ok {
		if err := usersolution.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "UserSolution.content": %w`, err)}
		}
	}
	if _, ok := usuo.mutation.UserID(); usuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSolution.user"`)
	}
	return nil
}

func (usuo *UserSolutionUpdateOne) sqlSave(ctx context.Context) (_node *UserSolution, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersolution.Table, usersolution.Columns, sqlgraph.NewFieldSpec(usersolution.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSolution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersolution.FieldID)
		for _, f := range fields {
			if !usersolution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersolution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdateTime(); ok {
		_spec.SetField(usersolution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.Content(); ok {
		_spec.SetField(usersolution.FieldContent, field.TypeString, value)
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersolution.UserTable,
			Columns: []string{usersolution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersolution.UserTable,
			Columns: []string{usersolution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSolution{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersolution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
