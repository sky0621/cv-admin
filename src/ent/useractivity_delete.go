// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/ent/predicate"
	"github.com/sky0621/cv-admin/src/ent/useractivity"
)

// UserActivityDelete is the builder for deleting a UserActivity entity.
type UserActivityDelete struct {
	config
	hooks    []Hook
	mutation *UserActivityMutation
}

// Where appends a list predicates to the UserActivityDelete builder.
func (uad *UserActivityDelete) Where(ps ...predicate.UserActivity) *UserActivityDelete {
	uad.mutation.Where(ps...)
	return uad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uad *UserActivityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserActivityMutation](ctx, uad.sqlExec, uad.mutation, uad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uad *UserActivityDelete) ExecX(ctx context.Context) int {
	n, err := uad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uad *UserActivityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(useractivity.Table, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt))
	if ps := uad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uad.mutation.done = true
	return affected, err
}

// UserActivityDeleteOne is the builder for deleting a single UserActivity entity.
type UserActivityDeleteOne struct {
	uad *UserActivityDelete
}

// Where appends a list predicates to the UserActivityDelete builder.
func (uado *UserActivityDeleteOne) Where(ps ...predicate.UserActivity) *UserActivityDeleteOne {
	uado.uad.mutation.Where(ps...)
	return uado
}

// Exec executes the deletion query.
func (uado *UserActivityDeleteOne) Exec(ctx context.Context) error {
	n, err := uado.uad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{useractivity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uado *UserActivityDeleteOne) ExecX(ctx context.Context) {
	if err := uado.Exec(ctx); err != nil {
		panic(err)
	}
}
