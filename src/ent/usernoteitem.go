// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/ent/usernote"
	"github.com/sky0621/cv-admin/src/ent/usernoteitem"
)

// UserNoteItem is the model entity for the UserNoteItem schema.
type UserNoteItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNoteItemQuery when eager-loading is set.
	Edges        UserNoteItemEdges `json:"edges"`
	user_note_id *int
}

// UserNoteItemEdges holds the relations/edges for other nodes in the graph.
type UserNoteItemEdges struct {
	// Note holds the value of the note edge.
	Note *UserNote `json:"note,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NoteOrErr returns the Note value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNoteItemEdges) NoteOrErr() (*UserNote, error) {
	if e.loadedTypes[0] {
		if e.Note == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usernote.Label}
		}
		return e.Note, nil
	}
	return nil, &NotLoadedError{edge: "note"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNoteItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernoteitem.FieldID:
			values[i] = new(sql.NullInt64)
		case usernoteitem.FieldText:
			values[i] = new(sql.NullString)
		case usernoteitem.FieldCreateTime, usernoteitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case usernoteitem.ForeignKeys[0]: // user_note_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserNoteItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNoteItem fields.
func (uni *UserNoteItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernoteitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uni.ID = int(value.Int64)
		case usernoteitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uni.CreateTime = value.Time
			}
		case usernoteitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uni.UpdateTime = value.Time
			}
		case usernoteitem.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				uni.Text = value.String
			}
		case usernoteitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_note_id", value)
			} else if value.Valid {
				uni.user_note_id = new(int)
				*uni.user_note_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNote queries the "note" edge of the UserNoteItem entity.
func (uni *UserNoteItem) QueryNote() *UserNoteQuery {
	return (&UserNoteItemClient{config: uni.config}).QueryNote(uni)
}

// Update returns a builder for updating this UserNoteItem.
// Note that you need to call UserNoteItem.Unwrap() before calling this method if this UserNoteItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (uni *UserNoteItem) Update() *UserNoteItemUpdateOne {
	return (&UserNoteItemClient{config: uni.config}).UpdateOne(uni)
}

// Unwrap unwraps the UserNoteItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uni *UserNoteItem) Unwrap() *UserNoteItem {
	_tx, ok := uni.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNoteItem is not a transactional entity")
	}
	uni.config.driver = _tx.drv
	return uni
}

// String implements the fmt.Stringer.
func (uni *UserNoteItem) String() string {
	var builder strings.Builder
	builder.WriteString("UserNoteItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uni.ID))
	builder.WriteString("create_time=")
	builder.WriteString(uni.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(uni.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(uni.Text)
	builder.WriteByte(')')
	return builder.String()
}

// UserNoteItems is a parsable slice of UserNoteItem.
type UserNoteItems []*UserNoteItem

func (uni UserNoteItems) config(cfg config) {
	for _i := range uni {
		uni[_i].config = cfg
	}
}
