// Code generated by ent, DO NOT EDIT.

package careerskillgroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the careerskillgroup type in the database.
	Label = "career_skill_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// EdgeCareer holds the string denoting the career edge name in mutations.
	EdgeCareer = "career"
	// EdgeCareerSkills holds the string denoting the careerskills edge name in mutations.
	EdgeCareerSkills = "careerSkills"
	// Table holds the table name of the careerskillgroup in the database.
	Table = "career_skill_groups"
	// CareerTable is the table that holds the career relation/edge.
	CareerTable = "career_skill_groups"
	// CareerInverseTable is the table name for the UserCareer entity.
	// It exists in this package in order to avoid circular dependency with the "usercareer" package.
	CareerInverseTable = "user_careers"
	// CareerColumn is the table column denoting the career relation/edge.
	CareerColumn = "career_id"
	// CareerSkillsTable is the table that holds the careerSkills relation/edge.
	CareerSkillsTable = "career_skills"
	// CareerSkillsInverseTable is the table name for the CareerSkill entity.
	// It exists in this package in order to avoid circular dependency with the "careerskill" package.
	CareerSkillsInverseTable = "career_skills"
	// CareerSkillsColumn is the table column denoting the careerSkills relation/edge.
	CareerSkillsColumn = "career_skill_group_id"
)

// Columns holds all SQL columns for careerskillgroup fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldLabel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "career_skill_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"career_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// LabelValidator is a validator for the "label" field. It is called by the builders before save.
	LabelValidator func(string) error
)

// OrderOption defines the ordering options for the CareerSkillGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByCareerField orders the results by career field.
func ByCareerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCareerSkillsCount orders the results by careerSkills count.
func ByCareerSkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareerSkillsStep(), opts...)
	}
}

// ByCareerSkills orders the results by careerSkills terms.
func ByCareerSkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCareerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CareerTable, CareerColumn),
	)
}
func newCareerSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerSkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareerSkillsTable, CareerSkillsColumn),
	)
}
