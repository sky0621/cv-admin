// Code generated by ent, DO NOT EDIT.

package usercareer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usercareer type in the database.
	Label = "user_career"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// EdgeCareerGroup holds the string denoting the careergroup edge name in mutations.
	EdgeCareerGroup = "careerGroup"
	// EdgeCareerDescriptions holds the string denoting the careerdescriptions edge name in mutations.
	EdgeCareerDescriptions = "careerDescriptions"
	// EdgeCareerTasks holds the string denoting the careertasks edge name in mutations.
	EdgeCareerTasks = "careerTasks"
	// EdgeCareerSkillGroups holds the string denoting the careerskillgroups edge name in mutations.
	EdgeCareerSkillGroups = "careerSkillGroups"
	// Table holds the table name of the usercareer in the database.
	Table = "user_careers"
	// CareerGroupTable is the table that holds the careerGroup relation/edge.
	CareerGroupTable = "user_careers"
	// CareerGroupInverseTable is the table name for the UserCareerGroup entity.
	// It exists in this package in order to avoid circular dependency with the "usercareergroup" package.
	CareerGroupInverseTable = "user_career_groups"
	// CareerGroupColumn is the table column denoting the careerGroup relation/edge.
	CareerGroupColumn = "career_group_id"
	// CareerDescriptionsTable is the table that holds the careerDescriptions relation/edge.
	CareerDescriptionsTable = "user_career_descriptions"
	// CareerDescriptionsInverseTable is the table name for the UserCareerDescription entity.
	// It exists in this package in order to avoid circular dependency with the "usercareerdescription" package.
	CareerDescriptionsInverseTable = "user_career_descriptions"
	// CareerDescriptionsColumn is the table column denoting the careerDescriptions relation/edge.
	CareerDescriptionsColumn = "career_id"
	// CareerTasksTable is the table that holds the careerTasks relation/edge.
	CareerTasksTable = "career_tasks"
	// CareerTasksInverseTable is the table name for the CareerTask entity.
	// It exists in this package in order to avoid circular dependency with the "careertask" package.
	CareerTasksInverseTable = "career_tasks"
	// CareerTasksColumn is the table column denoting the careerTasks relation/edge.
	CareerTasksColumn = "career_id"
	// CareerSkillGroupsTable is the table that holds the careerSkillGroups relation/edge.
	CareerSkillGroupsTable = "career_skill_groups"
	// CareerSkillGroupsInverseTable is the table name for the CareerSkillGroup entity.
	// It exists in this package in order to avoid circular dependency with the "careerskillgroup" package.
	CareerSkillGroupsInverseTable = "career_skill_groups"
	// CareerSkillGroupsColumn is the table column denoting the careerSkillGroups relation/edge.
	CareerSkillGroupsColumn = "career_id"
)

// Columns holds all SQL columns for usercareer fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldFrom,
	FieldTo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_careers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"career_group_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// FromValidator is a validator for the "from" field. It is called by the builders before save.
	FromValidator func(string) error
	// ToValidator is a validator for the "to" field. It is called by the builders before save.
	ToValidator func(string) error
)

// OrderOption defines the ordering options for the UserCareer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}

// ByCareerGroupField orders the results by careerGroup field.
func ByCareerGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerGroupStep(), sql.OrderByField(field, opts...))
	}
}

// ByCareerDescriptionsCount orders the results by careerDescriptions count.
func ByCareerDescriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareerDescriptionsStep(), opts...)
	}
}

// ByCareerDescriptions orders the results by careerDescriptions terms.
func ByCareerDescriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerDescriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCareerTasksCount orders the results by careerTasks count.
func ByCareerTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareerTasksStep(), opts...)
	}
}

// ByCareerTasks orders the results by careerTasks terms.
func ByCareerTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCareerSkillGroupsCount orders the results by careerSkillGroups count.
func ByCareerSkillGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareerSkillGroupsStep(), opts...)
	}
}

// ByCareerSkillGroups orders the results by careerSkillGroups terms.
func ByCareerSkillGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerSkillGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCareerGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CareerGroupTable, CareerGroupColumn),
	)
}
func newCareerDescriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerDescriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareerDescriptionsTable, CareerDescriptionsColumn),
	)
}
func newCareerTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareerTasksTable, CareerTasksColumn),
	)
}
func newCareerSkillGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerSkillGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareerSkillGroupsTable, CareerSkillGroupsColumn),
	)
}
