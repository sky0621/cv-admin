// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリアグループを一意に識別するID
type CareerGroupId = int

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`

	// スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// スキルグループラベル
	Label *SkillGroupLabel `json:"label,omitempty"`

	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキル群
type CareerSkills = []CareerSkill

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description,omitempty"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = int

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキルグループラベル
type SkillGroupLabel = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// ユーザーを一意に識別するキー
	Id *UserId `json:"id,omitempty"`

	// 職業
	Job *Job `json:"job,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// PR
	Pr *PR `json:"pr,omitempty"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *[]string `json:"description,omitempty"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// ユーザーを一意に識別するキー
type UserId = int

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// 生年月日の「年」
type Year = int

// １ユーザーのアクティビティ群
type N200OKUserActivities = []UserActivity

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = []UserCareer

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = []UserQualification

// １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAttributeJSONBody defines parameters for PutUsersByUserIdAttribute.
type PutUsersByUserIdAttributeJSONBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONBody defines parameters for PostUsersByUserIdCareergroups.
type PostUsersByUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupId.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PostUsersByUserIdNotesJSONBody defines parameters for PostUsersByUserIdNotes.
type PostUsersByUserIdNotesJSONBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONBody defines parameters for PutUsersByUserIdNotesByNoteId.
type PutUsersByUserIdNotesByNoteIdJSONBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = UserNoteItems

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = PutUsersByUserIdAttributeJSONBody

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = PostUsersByUserIdCareergroupsJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = PostUsersByUserIdNotesJSONBody

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = PutUsersByUserIdNotesByNoteIdJSONBody

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"itdO1/4bAAD//0NTa+w4TwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
