// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescription = []string

// キャリアグループを一意に識別するID
type CareerGroupId = int

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// １キャリアのスキルグループ
type CareerSkillGroup struct {
	// スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = int

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// １スキルの属性
type Skill struct {
	// スキルを一意に識別するキー
	Id *SkillId `json:"id,omitempty"`

	// スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// スキルグループラベル
type SkillGroupLabel = string

// スキルを一意に識別するキー
type SkillId = int

// スキルキー
type SkillKey = string

// スキル名
type SkillName = string

// １スキルタグの属性
type SkillTag struct {
	// スキルタグを一意に識別するキー
	Id *SkillTagId `json:"id,omitempty"`

	// スキルタグキー
	Key *SkillTagKey `json:"key,omitempty"`

	// スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// スキルタグを一意に識別するキー
type SkillTagId = int

// スキルタグキー
type SkillTagKey = string

// スキルタグ名
type SkillTagName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescription = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// ユーザーを一意に識別するキー
	Id *UserId `json:"id,omitempty"`

	// 職業
	Job *Job `json:"job,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// PR
	Pr *PR `json:"pr,omitempty"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// ユーザーを一意に識別するキー
type UserId = int

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// １ユーザーのスキルを使用Version・使用期間別に保持したもの
type UserSkill struct {
	// スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url      *Url                `json:"url,omitempty"`
	Versions *[]UserSkillVersion `json:"versions,omitempty"`
}

// １ユーザーのスキルタグ及び配下のスキル群を使用Version・使用期間別に保持したもの
type UserSkillTag struct {
	Skills *[]UserSkill `json:"skills,omitempty"`

	// スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// スキルタグ名
	TagName *SkillTagName `json:"tagName,omitempty"`
}

// １ユーザーのスキルVersionを使用期間別に保持したもの
type UserSkillVersion struct {
	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`

	// スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// 生年月日の「年」
type Year = int

// １スキルの属性
type N200OKSkill = Skill

// N200OKSkillRecords defines model for 200-OK-SkillRecords.
type N200OKSkillRecords = []Skill

// N200OKSkillTagRecords defines model for 200-OK-SkillTagRecords.
type N200OKSkillTagRecords = []SkillTag

// N200OKUserActivities defines model for 200-OK-UserActivities.
type N200OKUserActivities = []UserActivity

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// N200OKUserCareerGroups defines model for 200-OK-UserCareerGroups.
type N200OKUserCareerGroups = []UserCareerGroup

// N200OKUserCareers defines model for 200-OK-UserCareers.
type N200OKUserCareers = []UserCareer

// N200OKUserNoteItems defines model for 200-OK-UserNoteItems.
type N200OKUserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// N200OKUserNotes defines model for 200-OK-UserNotes.
type N200OKUserNotes = []UserNote

// N200OKUserQualifications defines model for 200-OK-UserQualifications.
type N200OKUserQualifications = []UserQualification

// N200OKUserSkills defines model for 200-OK-UserSkills.
type N200OKUserSkills = []UserSkillTag

// １スキルの属性
type N201CreatedSkill = Skill

// N201CreatedSkillRecords defines model for 201-Created-SkillRecords.
type N201CreatedSkillRecords = []Skill

// １スキルタグの属性
type N201CreatedSkillTag = SkillTag

// １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// PostSkillsJSONBody defines parameters for PostSkills.
type PostSkillsJSONBody = Skill

// PostSkilltagsJSONBody defines parameters for PostSkilltags.
type PostSkilltagsJSONBody = SkillTag

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAttributeJSONBody defines parameters for PutUsersByUserIdAttribute.
type PutUsersByUserIdAttributeJSONBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONBody defines parameters for PostUsersByUserIdCareergroups.
type PostUsersByUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupId.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PostUsersByUserIdNotesJSONBody defines parameters for PostUsersByUserIdNotes.
type PostUsersByUserIdNotesJSONBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONBody defines parameters for PutUsersByUserIdNotesByNoteId.
type PutUsersByUserIdNotesByNoteIdJSONBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = PostSkillsJSONBody

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = PostSkilltagsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = PutUsersByUserIdAttributeJSONBody

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = PostUsersByUserIdCareergroupsJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = PostUsersByUserIdNotesJSONBody

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = PutUsersByUserIdNotesByNoteIdJSONBody

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bvw/AAD//9X708I8ZAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
