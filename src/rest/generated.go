// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescription = []string

// キャリアグループを一意に識別するID
type CareerGroupId = int

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`

	// スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// １キャリアのスキルグループ
type CareerSkillGroup struct {
	// スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = int

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// １スキルの属性
type Skill struct {
	// スキルを一意に識別するキー
	Id *SkillId `json:"id,omitempty"`

	// スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// スキルグループラベル
type SkillGroupLabel = string

// スキルを一意に識別するキー
type SkillId = int

// スキルキー
type SkillKey = string

// スキル名
type SkillName = string

// スキルタグキー
type SkillTagKey = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescription = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// ユーザーを一意に識別するキー
	Id *UserId `json:"id,omitempty"`

	// 職業
	Job *Job `json:"job,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// PR
	Pr *PR `json:"pr,omitempty"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// ユーザーを一意に識別するキー
type UserId = int

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// 生年月日の「年」
type Year = int

// １スキルの属性
type N200OKSkill = Skill

// N200OKSkillRecords defines model for 200-OK-SkillRecords.
type N200OKSkillRecords = []Skill

// N200OKUserActivities defines model for 200-OK-UserActivities.
type N200OKUserActivities = []UserActivity

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// N200OKUserCareerGroups defines model for 200-OK-UserCareerGroups.
type N200OKUserCareerGroups = []UserCareerGroup

// N200OKUserCareers defines model for 200-OK-UserCareers.
type N200OKUserCareers = []UserCareer

// N200OKUserNoteItems defines model for 200-OK-UserNoteItems.
type N200OKUserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// N200OKUserNotes defines model for 200-OK-UserNotes.
type N200OKUserNotes = []UserNote

// N200OKUserQualifications defines model for 200-OK-UserQualifications.
type N200OKUserQualifications = []UserQualification

// １スキルの属性
type N201CreatedSkill = Skill

// N201CreatedSkillRecords defines model for 201-Created-SkillRecords.
type N201CreatedSkillRecords = []Skill

// １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// PostSkillsJSONBody defines parameters for PostSkills.
type PostSkillsJSONBody = Skill

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAttributeJSONBody defines parameters for PutUsersByUserIdAttribute.
type PutUsersByUserIdAttributeJSONBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONBody defines parameters for PostUsersByUserIdCareergroups.
type PostUsersByUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupId.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PostUsersByUserIdNotesJSONBody defines parameters for PostUsersByUserIdNotes.
type PostUsersByUserIdNotesJSONBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONBody defines parameters for PutUsersByUserIdNotesByNoteId.
type PutUsersByUserIdNotesByNoteIdJSONBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = PostSkillsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = PutUsersByUserIdAttributeJSONBody

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = PostUsersByUserIdCareergroupsJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = PostUsersByUserIdNotesJSONBody

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = PutUsersByUserIdNotesByNoteIdJSONBody

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// 指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
