// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescription = []string

// キャリアグループを一意に識別するID
type CareerGroupId = int

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// １キャリアのスキルグループ
type CareerSkillGroup struct {
	// スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = int

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// １スキルの属性
type Skill struct {
	// スキルを一意に識別するキー
	Id *SkillId `json:"id,omitempty"`

	// スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// スキルグループラベル
type SkillGroupLabel = string

// スキルを一意に識別するキー
type SkillId = int

// スキルキー
type SkillKey = string

// スキル名
type SkillName = string

// １スキルタグの属性
type SkillTag struct {
	// スキルタグを一意に識別するキー
	Id *SkillTagId `json:"id,omitempty"`

	// スキルタグキー
	Key *SkillTagKey `json:"key,omitempty"`

	// スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// スキルタグを一意に識別するキー
type SkillTagId = int

// スキルタグキー
type SkillTagKey = string

// スキルタグ名
type SkillTagName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescription = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// ユーザーを一意に識別するキー
	Id *UserId `json:"id,omitempty"`

	// 職業
	Job *Job `json:"job,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// PR
	Pr *PR `json:"pr,omitempty"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// ユーザーを一意に識別するキー
type UserId = int

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// URL
	Url *Url `json:"url,omitempty"`
}

// 生年月日の「年」
type Year = int

// １スキルの属性
type N200OKSkill = Skill

// N200OKSkillRecords defines model for 200-OK-SkillRecords.
type N200OKSkillRecords = []Skill

// N200OKSkillTagRecords defines model for 200-OK-SkillTagRecords.
type N200OKSkillTagRecords = []SkillTag

// N200OKUserActivities defines model for 200-OK-UserActivities.
type N200OKUserActivities = []UserActivity

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// N200OKUserCareerGroups defines model for 200-OK-UserCareerGroups.
type N200OKUserCareerGroups = []UserCareerGroup

// N200OKUserCareers defines model for 200-OK-UserCareers.
type N200OKUserCareers = []UserCareer

// N200OKUserNoteItems defines model for 200-OK-UserNoteItems.
type N200OKUserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// N200OKUserNotes defines model for 200-OK-UserNotes.
type N200OKUserNotes = []UserNote

// N200OKUserQualifications defines model for 200-OK-UserQualifications.
type N200OKUserQualifications = []UserQualification

// １スキルの属性
type N201CreatedSkill = Skill

// N201CreatedSkillRecords defines model for 201-Created-SkillRecords.
type N201CreatedSkillRecords = []Skill

// １スキルタグの属性
type N201CreatedSkillTag = SkillTag

// １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// PostSkillsJSONBody defines parameters for PostSkills.
type PostSkillsJSONBody = Skill

// PostSkilltagsJSONBody defines parameters for PostSkilltags.
type PostSkilltagsJSONBody = SkillTag

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAttributeJSONBody defines parameters for PutUsersByUserIdAttribute.
type PutUsersByUserIdAttributeJSONBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONBody defines parameters for PostUsersByUserIdCareergroups.
type PostUsersByUserIdCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupId.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PostUsersByUserIdNotesJSONBody defines parameters for PostUsersByUserIdNotes.
type PostUsersByUserIdNotesJSONBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONBody defines parameters for PutUsersByUserIdNotesByNoteId.
type PutUsersByUserIdNotesByNoteIdJSONBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = PostSkillsJSONBody

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = PostSkilltagsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = PutUsersByUserIdAttributeJSONBody

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = PostUsersByUserIdCareergroupsJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdJSONBody

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = PostUsersByUserIdNotesJSONBody

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = PutUsersByUserIdNotesByNoteIdJSONBody

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
