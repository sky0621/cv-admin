// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActivityIcon アクティビティアイコン
type ActivityIcon = string

// ActivityName アクティビティ名
type ActivityName = string

// BelongTo 所属
type BelongTo = string

// BirthDay 生年月日
type BirthDay struct {
	// Day 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerDescription キャリア説明
type CareerDescription = []string

// CareerGroupID キャリアグループを一意に識別するID
type CareerGroupID = int

// CareerGroupLabel キャリアグループラベル
type CareerGroupLabel = string

// CareerName キャリア名
type CareerName = string

// CareerPeriodFrom キャリア期間年月From
type CareerPeriodFrom struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerPeriodTo キャリア期間年月To
type CareerPeriodTo struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerSkill １キャリアのスキル
type CareerSkill struct {
	// Skill １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// CareerSkillGroup １キャリアのスキルグループ
type CareerSkillGroup struct {
	// Label スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// CareerTask １キャリアのタスク
type CareerTask struct {
	// Description タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// Name タスク名
	Name *TaskName `json:"name,omitempty"`
}

// Day 生年月日の「日」
type Day = int

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// Job 職業
type Job = string

// Month 生年月日の「月」
type Month = int

// NoteID 注釈を一意に識別するID
type NoteID = int

// NoteItemText 注釈内の１要素
type NoteItemText = string

// NoteLabel ラベル
type NoteLabel = string

// NoteMemo メモ
type NoteMemo = string

// PR PR
type PR = string

// QualificationGotDate 取得日
type QualificationGotDate = openapi_types.Date

// QualificationMemo メモ
type QualificationMemo = string

// QualificationName 資格名
type QualificationName = string

// QualificationOrg 組織名
type QualificationOrg = string

// Skill １スキルの属性
type Skill struct {
	// Id スキルを一意に識別するキー
	SkillID *SkillID `json:"id,omitempty"`

	// Key スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// TagKey スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// SkillGroupLabel スキルグループラベル
type SkillGroupLabel = string

// SkillID スキルを一意に識別するキー
type SkillID = int

// SkillKey スキルキー
type SkillKey = string

// SkillName スキル名
type SkillName = string

// SkillTag １スキルタグの属性
type SkillTag struct {
	// Id スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"id,omitempty"`

	// Key スキルタグキー
	Key *SkillTagKey `json:"key,omitempty"`

	// Name スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// SkillTagID スキルタグを一意に識別するキー
type SkillTagID = int

// SkillTagKey スキルタグキー
type SkillTagKey = string

// SkillTagName スキルタグ名
type SkillTagName = string

// SkillVersion スキルバージョン
type SkillVersion = string

// TaskDescription タスク説明
type TaskDescription = []string

// TaskName タスク名
type TaskName = string

// Url URL
type Url = string

// UserActivity １ユーザーのアクティビティ
type UserActivity struct {
	// Icon アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// Name アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserAttribute １ユーザーの属性
type UserAttribute struct {
	// AvatarUrl URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// BelongTo 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// Birthday 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// Id ユーザーを一意に識別するキー
	UserID *UserID `json:"id,omitempty"`

	// Job 職業
	Job *Job `json:"job,omitempty"`

	// Name ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// Nickname ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// Pr PR
	Pr *PR `json:"pr,omitempty"`
}

// UserCareer １キャリアグループのキャリア
type UserCareer struct {
	// Description キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// Name キャリア名
	Name *CareerName `json:"name,omitempty"`

	// SkillGroups １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// Tasks １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// UserCareerGroup １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// Careers １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserCareerGroupOwn １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserID ユーザーを一意に識別するキー
type UserID = int

// UserName ユーザーの本名
type UserName = string

// UserNickName ユーザーのニックネーム
type UserNickName = string

// UserNote １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserNoteItem １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// Text 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// UserNoteOwn １ユーザーの注釈自身
type UserNoteOwn struct {
	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserQualification １ユーザーの資格情報
type UserQualification struct {
	// GotDate 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// Memo メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// Name 資格名
	Name *QualificationName `json:"name,omitempty"`

	// Organization 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserSkill １ユーザーのスキルを使用Version・使用期間別に保持したもの
type UserSkill struct {
	// Key スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// Url URL
	Url      *Url                `json:"url,omitempty"`
	Versions *[]UserSkillVersion `json:"versions,omitempty"`
}

// UserSkillTag １ユーザーのスキルタグ及び配下のスキル群を使用Version・使用期間別に保持したもの
type UserSkillTag struct {
	Skills *[]UserSkill `json:"skills,omitempty"`

	// TagKey スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// TagName スキルタグ名
	TagName *SkillTagName `json:"tagName,omitempty"`
}

// UserSkillVersion １ユーザーのスキルVersionを使用期間別に保持したもの
type UserSkillVersion struct {
	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// Year 生年月日の「年」
type Year = int

// CareerGroupId キャリアグループを一意に識別するID
type CareerGroupId = CareerGroupID

// NoteId 注釈を一意に識別するID
type NoteId = NoteID

// SkillId スキルを一意に識別するキー
type SkillId = SkillID

// UserId ユーザーを一意に識別するキー
type UserId = UserID

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = Skill

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = SkillTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserAttribute

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// ユーザー一覧取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)

}

type N400BadRequestJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type N404NotFoundJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type PostSkillrecordsRequestObject struct {
	Body *PostSkillrecordsJSONRequestBody
}

type PostSkillrecordsResponseObject interface {
	VisitPostSkillrecordsResponse(w http.ResponseWriter) error
}

type PostSkillrecords201JSONResponse []Skill

func (response PostSkillrecords201JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillrecords400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkillrecords400JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsRequestObject struct {
}

type GetSkillsResponseObject interface {
	VisitGetSkillsResponse(w http.ResponseWriter) error
}

type GetSkills200JSONResponse []Skill

func (response GetSkills200JSONResponse) VisitGetSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillsRequestObject struct {
	Body *PostSkillsJSONRequestBody
}

type PostSkillsResponseObject interface {
	VisitPostSkillsResponse(w http.ResponseWriter) error
}

type PostSkills201JSONResponse Skill

func (response PostSkills201JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkills400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkills400JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsBySkillIdRequestObject struct {
	BySkillId SkillId `json:"bySkillId"`
}

type GetSkillsBySkillIdResponseObject interface {
	VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error
}

type GetSkillsBySkillId200JSONResponse Skill

func (response GetSkillsBySkillId200JSONResponse) VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkilltagsRequestObject struct {
}

type GetSkilltagsResponseObject interface {
	VisitGetSkilltagsResponse(w http.ResponseWriter) error
}

type GetSkilltags200JSONResponse []SkillTag

func (response GetSkilltags200JSONResponse) VisitGetSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltagsRequestObject struct {
	Body *PostSkilltagsJSONRequestBody
}

type PostSkilltagsResponseObject interface {
	VisitPostSkilltagsResponse(w http.ResponseWriter) error
}

type PostSkilltags201JSONResponse SkillTag

func (response PostSkilltags201JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltags400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkilltags400JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []UserAttribute

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers201JSONResponse UserAttribute

func (response PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsers400JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type DeleteUsersByUserIdResponseObject interface {
	VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserId204Response struct {
}

func (response DeleteUsersByUserId204Response) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserId404JSONResponse) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdActivitiesResponseObject interface {
	VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdActivities200JSONResponse []UserActivity

func (response GetUsersByUserIdActivities200JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdActivities404JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdActivitiesJSONRequestBody
}

type PutUsersByUserIdActivitiesResponseObject interface {
	VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdActivities200JSONResponse []UserActivity

func (response PutUsersByUserIdActivities200JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdActivities400JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdActivities404JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdAttributeResponseObject interface {
	VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdAttribute200JSONResponse UserAttribute

func (response GetUsersByUserIdAttribute200JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdAttribute404JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdAttributeJSONRequestBody
}

type PutUsersByUserIdAttributeResponseObject interface {
	VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdAttribute200JSONResponse UserAttribute

func (response PutUsersByUserIdAttribute200JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdAttribute400JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdAttribute404JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdCareergroupsResponseObject interface {
	VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdCareergroups200JSONResponse []UserCareerGroup

func (response GetUsersByUserIdCareergroups200JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdCareergroups404JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdCareergroupsJSONRequestBody
}

type PostUsersByUserIdCareergroupsResponseObject interface {
	VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdCareergroups201JSONResponse UserCareerGroup

func (response PostUsersByUserIdCareergroups201JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroups400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdCareergroups400JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdCareergroups404JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId204Response struct {
}

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId204Response) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse UserCareerGroupOwn

func (response PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse []UserCareer

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdNotesResponseObject interface {
	VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdNotes200JSONResponse []UserNote

func (response GetUsersByUserIdNotes200JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdNotes404JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdNotesJSONRequestBody
}

type PostUsersByUserIdNotesResponseObject interface {
	VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdNotes201JSONResponse UserNote

func (response PostUsersByUserIdNotes201JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotes400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdNotes400JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdNotes404JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
}

type DeleteUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdNotesByNoteId204Response struct {
}

func (response DeleteUsersByUserIdNotesByNoteId204Response) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdNotesByNoteId404JSONResponse) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteId200JSONResponse UserNoteOwn

func (response PutUsersByUserIdNotesByNoteId200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteId400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteId404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItemsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdItemsResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteIdItems200JSONResponse []UserNoteItem

func (response PutUsersByUserIdNotesByNoteIdItems200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdQualificationsResponseObject interface {
	VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdQualifications200JSONResponse []UserQualification

func (response GetUsersByUserIdQualifications200JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdQualifications404JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdQualificationsJSONRequestBody
}

type PutUsersByUserIdQualificationsResponseObject interface {
	VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdQualifications200JSONResponse []UserQualification

func (response PutUsersByUserIdQualifications200JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdQualifications400JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdQualifications404JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkillsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdSkillsResponseObject interface {
	VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdSkills200JSONResponse []UserSkillTag

func (response GetUsersByUserIdSkills200JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkills404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdSkills404JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx context.Context, request PostSkillrecordsRequestObject) (PostSkillrecordsResponseObject, error)
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx context.Context, request GetSkillsRequestObject) (GetSkillsResponseObject, error)
	// スキル登録
	// (POST /skills)
	PostSkills(ctx context.Context, request PostSkillsRequestObject) (PostSkillsResponseObject, error)
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx context.Context, request GetSkillsBySkillIdRequestObject) (GetSkillsBySkillIdResponseObject, error)
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx context.Context, request GetSkilltagsRequestObject) (GetSkilltagsResponseObject, error)
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx context.Context, request PostSkilltagsRequestObject) (PostSkilltagsResponseObject, error)
	// ユーザー一覧取得
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx context.Context, request DeleteUsersByUserIdRequestObject) (DeleteUsersByUserIdResponseObject, error)
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx context.Context, request GetUsersByUserIdActivitiesRequestObject) (GetUsersByUserIdActivitiesResponseObject, error)
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx context.Context, request PutUsersByUserIdActivitiesRequestObject) (PutUsersByUserIdActivitiesResponseObject, error)
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx context.Context, request GetUsersByUserIdAttributeRequestObject) (GetUsersByUserIdAttributeResponseObject, error)
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx context.Context, request PutUsersByUserIdAttributeRequestObject) (PutUsersByUserIdAttributeResponseObject, error)
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx context.Context, request GetUsersByUserIdCareergroupsRequestObject) (GetUsersByUserIdCareergroupsResponseObject, error)
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx context.Context, request PostUsersByUserIdCareergroupsRequestObject) (PostUsersByUserIdCareergroupsResponseObject, error)
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject, error)
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx context.Context, request GetUsersByUserIdNotesRequestObject) (GetUsersByUserIdNotesResponseObject, error)
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx context.Context, request PostUsersByUserIdNotesRequestObject) (PostUsersByUserIdNotesResponseObject, error)
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx context.Context, request DeleteUsersByUserIdNotesByNoteIdRequestObject) (DeleteUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx context.Context, request PutUsersByUserIdNotesByNoteIdRequestObject) (PutUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx context.Context, request PutUsersByUserIdNotesByNoteIdItemsRequestObject) (PutUsersByUserIdNotesByNoteIdItemsResponseObject, error)
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx context.Context, request GetUsersByUserIdQualificationsRequestObject) (GetUsersByUserIdQualificationsResponseObject, error)
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx context.Context, request PutUsersByUserIdQualificationsRequestObject) (PutUsersByUserIdQualificationsResponseObject, error)
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx context.Context, request GetUsersByUserIdSkillsRequestObject) (GetUsersByUserIdSkillsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSkillrecords operation middleware
func (sh *strictHandler) PostSkillrecords(ctx echo.Context) error {
	var request PostSkillrecordsRequestObject

	var body PostSkillrecordsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkillrecords(ctx.Request().Context(), request.(PostSkillrecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkillrecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillrecordsResponseObject); ok {
		return validResponse.VisitPostSkillrecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkills operation middleware
func (sh *strictHandler) GetSkills(ctx echo.Context) error {
	var request GetSkillsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkills(ctx.Request().Context(), request.(GetSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsResponseObject); ok {
		return validResponse.VisitGetSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkills operation middleware
func (sh *strictHandler) PostSkills(ctx echo.Context) error {
	var request PostSkillsRequestObject

	var body PostSkillsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkills(ctx.Request().Context(), request.(PostSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillsResponseObject); ok {
		return validResponse.VisitPostSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkillsBySkillId operation middleware
func (sh *strictHandler) GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error {
	var request GetSkillsBySkillIdRequestObject

	request.BySkillId = bySkillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkillsBySkillId(ctx.Request().Context(), request.(GetSkillsBySkillIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkillsBySkillId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsBySkillIdResponseObject); ok {
		return validResponse.VisitGetSkillsBySkillIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkilltags operation middleware
func (sh *strictHandler) GetSkilltags(ctx echo.Context) error {
	var request GetSkilltagsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkilltags(ctx.Request().Context(), request.(GetSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkilltagsResponseObject); ok {
		return validResponse.VisitGetSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkilltags operation middleware
func (sh *strictHandler) PostSkilltags(ctx echo.Context) error {
	var request PostSkilltagsRequestObject

	var body PostSkilltagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkilltags(ctx.Request().Context(), request.(PostSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkilltagsResponseObject); ok {
		return validResponse.VisitPostSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(ctx echo.Context) error {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx.Request().Context(), request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		return validResponse.VisitPostUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserId operation middleware
func (sh *strictHandler) DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error {
	var request DeleteUsersByUserIdRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserId(ctx.Request().Context(), request.(DeleteUsersByUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdActivities operation middleware
func (sh *strictHandler) GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdActivities(ctx.Request().Context(), request.(GetUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdActivities operation middleware
func (sh *strictHandler) PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdActivitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdActivities(ctx.Request().Context(), request.(PutUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdAttribute operation middleware
func (sh *strictHandler) GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdAttribute(ctx.Request().Context(), request.(GetUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdAttribute operation middleware
func (sh *strictHandler) PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdAttributeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdAttribute(ctx.Request().Context(), request.(PutUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdCareergroups(ctx.Request().Context(), request.(GetUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdCareergroupsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdCareergroups(ctx.Request().Context(), request.(PostUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupIdCareers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdNotes operation middleware
func (sh *strictHandler) GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdNotes(ctx.Request().Context(), request.(GetUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdNotes operation middleware
func (sh *strictHandler) PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdNotesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdNotes(ctx.Request().Context(), request.(PostUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request DeleteUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(DeleteUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteIdItems operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdItemsRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteIdItems(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteIdItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdItemsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdQualifications operation middleware
func (sh *strictHandler) GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdQualifications(ctx.Request().Context(), request.(GetUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdQualifications operation middleware
func (sh *strictHandler) PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdQualificationsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdQualifications(ctx.Request().Context(), request.(PutUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdSkills operation middleware
func (sh *strictHandler) GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdSkillsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdSkills(ctx.Request().Context(), request.(GetUsersByUserIdSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdSkillsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vpk+mmIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
