// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActivityIcon アクティビティアイコン
type ActivityIcon = string

// ActivityName アクティビティ名
type ActivityName = string

// BelongTo 所属
type BelongTo = string

// BirthDay 生年月日
type BirthDay struct {
	// Day 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerDescription キャリア説明
type CareerDescription = []string

// CareerGroupID キャリアグループを一意に識別するID
type CareerGroupID = int

// CareerGroupLabel キャリアグループラベル
type CareerGroupLabel = string

// CareerName キャリア名
type CareerName = string

// CareerPeriodFrom キャリア期間年月From
type CareerPeriodFrom struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerPeriodTo キャリア期間年月To
type CareerPeriodTo struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerSkill １キャリアのスキル
type CareerSkill struct {
	// Skill １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// CareerSkillGroup １キャリアのスキルグループ
type CareerSkillGroup struct {
	// Label スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// CareerTask １キャリアのタスク
type CareerTask struct {
	// Description タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// Name タスク名
	Name *TaskName `json:"name,omitempty"`
}

// Day 生年月日の「日」
type Day = int

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// Job 職業
type Job = string

// Month 生年月日の「月」
type Month = int

// NoteID 注釈を一意に識別するID
type NoteID = int

// NoteItemText 注釈内の１要素
type NoteItemText = string

// NoteLabel ラベル
type NoteLabel = string

// NoteMemo メモ
type NoteMemo = string

// PR PR
type PR = string

// QualificationGotDate 取得日
type QualificationGotDate = openapi_types.Date

// QualificationMemo メモ
type QualificationMemo = string

// QualificationName 資格名
type QualificationName = string

// QualificationOrg 組織名
type QualificationOrg = string

// Skill １スキルの属性
type Skill struct {
	// Id スキルを一意に識別するキー
	SkillID *SkillID `json:"id,omitempty"`

	// Key スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// TagKey スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// SkillGroupLabel スキルグループラベル
type SkillGroupLabel = string

// SkillID スキルを一意に識別するキー
type SkillID = int

// SkillKey スキルキー
type SkillKey = string

// SkillName スキル名
type SkillName = string

// SkillTag １スキルタグの属性
type SkillTag struct {
	// Id スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"id,omitempty"`

	// Key スキルタグキー
	Key *SkillTagKey `json:"key,omitempty"`

	// Name スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// SkillTagID スキルタグを一意に識別するキー
type SkillTagID = int

// SkillTagKey スキルタグキー
type SkillTagKey = string

// SkillTagName スキルタグ名
type SkillTagName = string

// SkillVersion スキルバージョン
type SkillVersion = string

// TaskDescription タスク説明
type TaskDescription = []string

// TaskName タスク名
type TaskName = string

// Url URL
type Url = string

// UserActivity １ユーザーのアクティビティ
type UserActivity struct {
	// Icon アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// Name アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserAttribute １ユーザーの属性
type UserAttribute struct {
	// AvatarUrl URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// BelongTo 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// Birthday 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// Id ユーザーを一意に識別するキー
	UserID *UserID `json:"id,omitempty"`

	// Job 職業
	Job *Job `json:"job,omitempty"`

	// Name ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// Nickname ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// Pr PR
	Pr *PR `json:"pr,omitempty"`
}

// UserCareer １キャリアグループのキャリア
type UserCareer struct {
	// Description キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// Name キャリア名
	Name *CareerName `json:"name,omitempty"`

	// SkillGroups １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// Tasks １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// UserCareerGroup １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// Careers １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserCareerGroupOwn １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserID ユーザーを一意に識別するキー
type UserID = int

// UserName ユーザーの本名
type UserName = string

// UserNickName ユーザーのニックネーム
type UserNickName = string

// UserNote １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserNoteItem １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// Text 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// UserNoteOwn １ユーザーの注釈自身
type UserNoteOwn struct {
	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserQualification １ユーザーの資格情報
type UserQualification struct {
	// GotDate 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// Memo メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// Name 資格名
	Name *QualificationName `json:"name,omitempty"`

	// Organization 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserSkill １ユーザーのスキルを使用Version・使用期間別に保持したもの
type UserSkill struct {
	// Key スキルキー
	Key *SkillKey `json:"key,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// Url URL
	Url      *Url                `json:"url,omitempty"`
	Versions *[]UserSkillVersion `json:"versions,omitempty"`
}

// UserSkillTag １ユーザーのスキルタグ及び配下のスキル群を使用Version・使用期間別に保持したもの
type UserSkillTag struct {
	Skills *[]UserSkill `json:"skills,omitempty"`

	// TagKey スキルタグキー
	TagKey *SkillTagKey `json:"tagKey,omitempty"`

	// TagName スキルタグ名
	TagName *SkillTagName `json:"tagName,omitempty"`
}

// UserSkillVersion １ユーザーのスキルVersionを使用期間別に保持したもの
type UserSkillVersion struct {
	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// Year 生年月日の「年」
type Year = int

// CareerGroupId キャリアグループを一意に識別するID
type CareerGroupId = CareerGroupID

// NoteId 注釈を一意に識別するID
type NoteId = NoteID

// SkillId スキルを一意に識別するキー
type SkillId = SkillID

// UserId ユーザーを一意に識別するキー
type UserId = UserID

// N200OKSkill １スキルの属性
type N200OKSkill = Skill

// N200OKSkillRecords defines model for 200-OK-SkillRecords.
type N200OKSkillRecords = []Skill

// N200OKSkillTagRecords defines model for 200-OK-SkillTagRecords.
type N200OKSkillTagRecords = []SkillTag

// N200OKUserActivities defines model for 200-OK-UserActivities.
type N200OKUserActivities = []UserActivity

// N200OKUserAttribute １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// N200OKUserCareerGroupOwn １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// N200OKUserCareerGroups defines model for 200-OK-UserCareerGroups.
type N200OKUserCareerGroups = []UserCareerGroup

// N200OKUserCareers defines model for 200-OK-UserCareers.
type N200OKUserCareers = []UserCareer

// N200OKUserNoteItems defines model for 200-OK-UserNoteItems.
type N200OKUserNoteItems = []UserNoteItem

// N200OKUserNoteOwn １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// N200OKUserNotes defines model for 200-OK-UserNotes.
type N200OKUserNotes = []UserNote

// N200OKUserQualifications defines model for 200-OK-UserQualifications.
type N200OKUserQualifications = []UserQualification

// N200OKUserSkills defines model for 200-OK-UserSkills.
type N200OKUserSkills = []UserSkillTag

// N201CreatedSkill １スキルの属性
type N201CreatedSkill = Skill

// N201CreatedSkillRecords defines model for 201-Created-SkillRecords.
type N201CreatedSkillRecords = []Skill

// N201CreatedSkillTag １スキルタグの属性
type N201CreatedSkillTag = SkillTag

// N201CreatedUserAttribute １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = Skill

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = SkillTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserAttribute

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = UserCareerGroupOwn

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)

}

type N200OKSkillJSONResponse Skill

type N200OKSkillRecordsJSONResponse []Skill

type N200OKSkillTagRecordsJSONResponse []SkillTag

type N200OKUserActivitiesJSONResponse []UserActivity

type N200OKUserAttributeJSONResponse UserAttribute

type N200OKUserCareerGroupOwnJSONResponse UserCareerGroupOwn

type N200OKUserCareerGroupsJSONResponse []UserCareerGroup

type N200OKUserCareersJSONResponse []UserCareer

type N200OKUserNoteItemsJSONResponse []UserNoteItem

type N200OKUserNoteOwnJSONResponse UserNoteOwn

type N200OKUserNotesJSONResponse []UserNote

type N200OKUserQualificationsJSONResponse []UserQualification

type N200OKUserSkillsJSONResponse []UserSkillTag

type N201CreatedSkillJSONResponse Skill

type N201CreatedSkillRecordsJSONResponse []Skill

type N201CreatedSkillTagJSONResponse SkillTag

type N201CreatedUserAttributeJSONResponse UserAttribute

type N400BadRequestJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type N404NotFoundJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type PostSkillrecordsRequestObject struct {
	Body *PostSkillrecordsJSONRequestBody
}

type PostSkillrecordsResponseObject interface {
	VisitPostSkillrecordsResponse(w http.ResponseWriter) error
}

type PostSkillrecords201JSONResponse struct {
	N201CreatedSkillRecordsJSONResponse
}

func (response PostSkillrecords201JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillrecords400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkillrecords400JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsRequestObject struct {
}

type GetSkillsResponseObject interface {
	VisitGetSkillsResponse(w http.ResponseWriter) error
}

type GetSkills200JSONResponse struct{ N200OKSkillRecordsJSONResponse }

func (response GetSkills200JSONResponse) VisitGetSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillsRequestObject struct {
	Body *PostSkillsJSONRequestBody
}

type PostSkillsResponseObject interface {
	VisitPostSkillsResponse(w http.ResponseWriter) error
}

type PostSkills201JSONResponse struct{ N201CreatedSkillJSONResponse }

func (response PostSkills201JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkills400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkills400JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsBySkillIdRequestObject struct {
	BySkillId SkillId `json:"bySkillId"`
}

type GetSkillsBySkillIdResponseObject interface {
	VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error
}

type GetSkillsBySkillId200JSONResponse struct{ N200OKSkillJSONResponse }

func (response GetSkillsBySkillId200JSONResponse) VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkilltagsRequestObject struct {
}

type GetSkilltagsResponseObject interface {
	VisitGetSkilltagsResponse(w http.ResponseWriter) error
}

type GetSkilltags200JSONResponse struct {
	N200OKSkillTagRecordsJSONResponse
}

func (response GetSkilltags200JSONResponse) VisitGetSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltagsRequestObject struct {
	Body *PostSkilltagsJSONRequestBody
}

type PostSkilltagsResponseObject interface {
	VisitPostSkilltagsResponse(w http.ResponseWriter) error
}

type PostSkilltags201JSONResponse struct {
	N201CreatedSkillTagJSONResponse
}

func (response PostSkilltags201JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltags400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkilltags400JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers201JSONResponse struct {
	N201CreatedUserAttributeJSONResponse
}

func (response PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsers400JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type DeleteUsersByUserIdResponseObject interface {
	VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserId204Response struct {
}

func (response DeleteUsersByUserId204Response) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserId404JSONResponse) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdActivitiesResponseObject interface {
	VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdActivities200JSONResponse struct {
	N200OKUserActivitiesJSONResponse
}

func (response GetUsersByUserIdActivities200JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdActivities404JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdActivitiesJSONRequestBody
}

type PutUsersByUserIdActivitiesResponseObject interface {
	VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdActivities200JSONResponse struct {
	N200OKUserActivitiesJSONResponse
}

func (response PutUsersByUserIdActivities200JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdActivities400JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdActivities404JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdAttributeResponseObject interface {
	VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdAttribute200JSONResponse struct {
	N200OKUserAttributeJSONResponse
}

func (response GetUsersByUserIdAttribute200JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdAttribute404JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdAttributeJSONRequestBody
}

type PutUsersByUserIdAttributeResponseObject interface {
	VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdAttribute200JSONResponse struct {
	N200OKUserAttributeJSONResponse
}

func (response PutUsersByUserIdAttribute200JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdAttribute400JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdAttribute404JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdCareergroupsResponseObject interface {
	VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdCareergroups200JSONResponse struct {
	N200OKUserCareerGroupsJSONResponse
}

func (response GetUsersByUserIdCareergroups200JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdCareergroups404JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdCareergroupsJSONRequestBody
}

type PostUsersByUserIdCareergroupsResponseObject interface {
	VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdCareergroups201Response struct {
}

func (response PostUsersByUserIdCareergroups201Response) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersByUserIdCareergroups400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdCareergroups400JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdCareergroups404JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId204Response struct {
}

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId204Response) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse struct {
	N200OKUserCareerGroupOwnJSONResponse
}

func (response PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse struct{ N200OKUserCareersJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdNotesResponseObject interface {
	VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdNotes200JSONResponse struct{ N200OKUserNotesJSONResponse }

func (response GetUsersByUserIdNotes200JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdNotes404JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdNotesJSONRequestBody
}

type PostUsersByUserIdNotesResponseObject interface {
	VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdNotes201Response struct {
}

func (response PostUsersByUserIdNotes201Response) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersByUserIdNotes400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdNotes400JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdNotes404JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
}

type DeleteUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdNotesByNoteId204Response struct {
}

func (response DeleteUsersByUserIdNotesByNoteId204Response) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdNotesByNoteId404JSONResponse) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteId200JSONResponse struct{ N200OKUserNoteOwnJSONResponse }

func (response PutUsersByUserIdNotesByNoteId200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteId400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteId404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItemsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdItemsResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteIdItems200JSONResponse struct {
	N200OKUserNoteItemsJSONResponse
}

func (response PutUsersByUserIdNotesByNoteIdItems200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdQualificationsResponseObject interface {
	VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdQualifications200JSONResponse struct {
	N200OKUserQualificationsJSONResponse
}

func (response GetUsersByUserIdQualifications200JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdQualifications404JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdQualificationsJSONRequestBody
}

type PutUsersByUserIdQualificationsResponseObject interface {
	VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdQualifications200JSONResponse struct {
	N200OKUserQualificationsJSONResponse
}

func (response PutUsersByUserIdQualifications200JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdQualifications400JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdQualifications404JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkillsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdSkillsResponseObject interface {
	VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdSkills200JSONResponse struct{ N200OKUserSkillsJSONResponse }

func (response GetUsersByUserIdSkills200JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkills404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdSkills404JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx context.Context, request PostSkillrecordsRequestObject) (PostSkillrecordsResponseObject, error)
	// 全スキル取得
	// (GET /skills)
	GetSkills(ctx context.Context, request GetSkillsRequestObject) (GetSkillsResponseObject, error)
	// スキル登録
	// (POST /skills)
	PostSkills(ctx context.Context, request PostSkillsRequestObject) (PostSkillsResponseObject, error)
	// 【未実装】指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx context.Context, request GetSkillsBySkillIdRequestObject) (GetSkillsBySkillIdResponseObject, error)
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx context.Context, request GetSkilltagsRequestObject) (GetSkilltagsResponseObject, error)
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx context.Context, request PostSkilltagsRequestObject) (PostSkilltagsResponseObject, error)
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx context.Context, request DeleteUsersByUserIdRequestObject) (DeleteUsersByUserIdResponseObject, error)
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx context.Context, request GetUsersByUserIdActivitiesRequestObject) (GetUsersByUserIdActivitiesResponseObject, error)
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx context.Context, request PutUsersByUserIdActivitiesRequestObject) (PutUsersByUserIdActivitiesResponseObject, error)
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx context.Context, request GetUsersByUserIdAttributeRequestObject) (GetUsersByUserIdAttributeResponseObject, error)
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx context.Context, request PutUsersByUserIdAttributeRequestObject) (PutUsersByUserIdAttributeResponseObject, error)
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx context.Context, request GetUsersByUserIdCareergroupsRequestObject) (GetUsersByUserIdCareergroupsResponseObject, error)
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx context.Context, request PostUsersByUserIdCareergroupsRequestObject) (PostUsersByUserIdCareergroupsResponseObject, error)
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject, error)
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx context.Context, request GetUsersByUserIdNotesRequestObject) (GetUsersByUserIdNotesResponseObject, error)
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx context.Context, request PostUsersByUserIdNotesRequestObject) (PostUsersByUserIdNotesResponseObject, error)
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx context.Context, request DeleteUsersByUserIdNotesByNoteIdRequestObject) (DeleteUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx context.Context, request PutUsersByUserIdNotesByNoteIdRequestObject) (PutUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx context.Context, request PutUsersByUserIdNotesByNoteIdItemsRequestObject) (PutUsersByUserIdNotesByNoteIdItemsResponseObject, error)
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx context.Context, request GetUsersByUserIdQualificationsRequestObject) (GetUsersByUserIdQualificationsResponseObject, error)
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx context.Context, request PutUsersByUserIdQualificationsRequestObject) (PutUsersByUserIdQualificationsResponseObject, error)
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx context.Context, request GetUsersByUserIdSkillsRequestObject) (GetUsersByUserIdSkillsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSkillrecords operation middleware
func (sh *strictHandler) PostSkillrecords(ctx echo.Context) error {
	var request PostSkillrecordsRequestObject

	var body PostSkillrecordsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkillrecords(ctx.Request().Context(), request.(PostSkillrecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkillrecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillrecordsResponseObject); ok {
		return validResponse.VisitPostSkillrecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkills operation middleware
func (sh *strictHandler) GetSkills(ctx echo.Context) error {
	var request GetSkillsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkills(ctx.Request().Context(), request.(GetSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsResponseObject); ok {
		return validResponse.VisitGetSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkills operation middleware
func (sh *strictHandler) PostSkills(ctx echo.Context) error {
	var request PostSkillsRequestObject

	var body PostSkillsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkills(ctx.Request().Context(), request.(PostSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillsResponseObject); ok {
		return validResponse.VisitPostSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkillsBySkillId operation middleware
func (sh *strictHandler) GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error {
	var request GetSkillsBySkillIdRequestObject

	request.BySkillId = bySkillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkillsBySkillId(ctx.Request().Context(), request.(GetSkillsBySkillIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkillsBySkillId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsBySkillIdResponseObject); ok {
		return validResponse.VisitGetSkillsBySkillIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkilltags operation middleware
func (sh *strictHandler) GetSkilltags(ctx echo.Context) error {
	var request GetSkilltagsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkilltags(ctx.Request().Context(), request.(GetSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkilltagsResponseObject); ok {
		return validResponse.VisitGetSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkilltags operation middleware
func (sh *strictHandler) PostSkilltags(ctx echo.Context) error {
	var request PostSkilltagsRequestObject

	var body PostSkilltagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkilltags(ctx.Request().Context(), request.(PostSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkilltagsResponseObject); ok {
		return validResponse.VisitPostSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(ctx echo.Context) error {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx.Request().Context(), request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		return validResponse.VisitPostUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserId operation middleware
func (sh *strictHandler) DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error {
	var request DeleteUsersByUserIdRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserId(ctx.Request().Context(), request.(DeleteUsersByUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdActivities operation middleware
func (sh *strictHandler) GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdActivities(ctx.Request().Context(), request.(GetUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdActivities operation middleware
func (sh *strictHandler) PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdActivitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdActivities(ctx.Request().Context(), request.(PutUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdAttribute operation middleware
func (sh *strictHandler) GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdAttribute(ctx.Request().Context(), request.(GetUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdAttribute operation middleware
func (sh *strictHandler) PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdAttributeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdAttribute(ctx.Request().Context(), request.(PutUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdCareergroups(ctx.Request().Context(), request.(GetUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdCareergroupsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdCareergroups(ctx.Request().Context(), request.(PostUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupIdCareers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdNotes operation middleware
func (sh *strictHandler) GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdNotes(ctx.Request().Context(), request.(GetUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdNotes operation middleware
func (sh *strictHandler) PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdNotesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdNotes(ctx.Request().Context(), request.(PostUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request DeleteUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(DeleteUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteIdItems operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdItemsRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteIdItems(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteIdItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdItemsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdQualifications operation middleware
func (sh *strictHandler) GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdQualifications(ctx.Request().Context(), request.(GetUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdQualifications operation middleware
func (sh *strictHandler) PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdQualificationsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdQualifications(ctx.Request().Context(), request.(PutUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdSkills operation middleware
func (sh *strictHandler) GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdSkillsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdSkills(ctx.Request().Context(), request.(GetUsersByUserIdSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdSkillsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WyvRN8XCPifSrp+u/zcAAP//RjYO7zlkAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
