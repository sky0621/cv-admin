// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActivityIcon アクティビティアイコン
type ActivityIcon = string

// ActivityName アクティビティ名
type ActivityName = string

// AppealContent アピール事項
type AppealContent = string

// BelongTo 所属
type BelongTo = string

// BirthDay 生年月日
type BirthDay struct {
	// Day 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerDescription キャリア説明
type CareerDescription = []string

// CareerGroupID キャリアグループを一意に識別するID
type CareerGroupID = int

// CareerGroupLabel キャリアグループラベル
type CareerGroupLabel = string

// CareerID キャリアを一意に識別するID
type CareerID = int

// CareerName キャリア名
type CareerName = string

// CareerPeriodFrom キャリア期間年月From
type CareerPeriodFrom struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerPeriodMonth キャリア期間(月)
type CareerPeriodMonth = int

// CareerPeriodTo キャリア期間年月To
type CareerPeriodTo struct {
	// Month 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// Year 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// CareerSkill １キャリアのスキル
type CareerSkill struct {
	// Skill １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// CareerSkillGroup １キャリアのスキルグループ
type CareerSkillGroup struct {
	// Label スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// CareerTask １キャリアのタスク
type CareerTask struct {
	// Description タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// Name タスク名
	Name *TaskName `json:"name,omitempty"`
}

// Day 生年月日の「日」
type Day = int

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// Job 職業
type Job = string

// Month 生年月日の「月」
type Month = int

// NoteID 注釈を一意に識別するID
type NoteID = int

// NoteItemText 注釈内の１要素
type NoteItemText = string

// NoteLabel ラベル
type NoteLabel = string

// NoteMemo メモ
type NoteMemo = string

// PR PR
type PR = string

// QualificationGotDate 取得日
type QualificationGotDate = openapi_types.Date

// QualificationMemo メモ
type QualificationMemo = string

// QualificationName 資格名
type QualificationName = string

// QualificationOrg 組織名
type QualificationOrg = string

// Skill １スキルの属性
type Skill struct {
	// Id スキルを一意に識別するキー
	SkillID *SkillID `json:"id,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// TagId スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"tagId,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// SkillGroupLabel スキルグループラベル
type SkillGroupLabel = string

// SkillID スキルを一意に識別するキー
type SkillID = int

// SkillName スキル名
type SkillName = string

// SkillTag １スキルタグの属性
type SkillTag struct {
	// Id スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"id,omitempty"`

	// Name スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// SkillTagID スキルタグを一意に識別するキー
type SkillTagID = int

// SkillTagName スキルタグ名
type SkillTagName = string

// SkillVersion スキルバージョン
type SkillVersion = string

// SolutionContent 課題解決事例
type SolutionContent = string

// TaskDescription タスク説明
type TaskDescription = []string

// TaskName タスク名
type TaskName = string

// Url URL
type Url = string

// UserActivity １ユーザーのアクティビティ
type UserActivity struct {
	// Icon アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// Name アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserAppeal １ユーザーのアピール事項
type UserAppeal struct {
	// Content アピール事項
	Content *AppealContent `json:"content,omitempty"`
}

// UserAttribute １ユーザーの属性
type UserAttribute struct {
	// AvatarUrl URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// BelongTo 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// Birthday 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// Id ユーザーを一意に識別するキー
	UserID *UserID `json:"id,omitempty"`

	// Job 職業
	Job *Job `json:"job,omitempty"`

	// Name ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// Nickname ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// Pr PR
	Pr *PR `json:"pr,omitempty"`
}

// UserCareer １キャリアグループのキャリア
type UserCareer struct {
	// Description キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// Id キャリアを一意に識別するID
	CareerID *CareerID `json:"id,omitempty"`

	// Name キャリア名
	Name *CareerName `json:"name,omitempty"`

	// SkillGroups １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// Tasks １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// UserCareerGroup １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// Careers １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// Id キャリアグループを一意に識別するID
	CareerGroupID *CareerGroupID `json:"id,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserCareerGroupOwn １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// Id キャリアグループを一意に識別するID
	CareerGroupID *CareerGroupID `json:"id,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserID ユーザーを一意に識別するキー
type UserID = int

// UserName ユーザーの本名
type UserName = string

// UserNickName ユーザーのニックネーム
type UserNickName = string

// UserNote １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserNoteItem １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// Text 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// UserNoteOwn １ユーザーの注釈自身
type UserNoteOwn struct {
	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserQualification １ユーザーの資格情報
type UserQualification struct {
	// GotDate 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// Memo メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// Name 資格名
	Name *QualificationName `json:"name,omitempty"`

	// Organization 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserSkill １ユーザーのスキルを使用Version・使用期間別に保持したもの
type UserSkill struct {
	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// Period キャリア期間(月)
	Period *CareerPeriodMonth `json:"period,omitempty"`

	// Url URL
	Url      *Url                `json:"url,omitempty"`
	Versions *[]UserSkillVersion `json:"versions,omitempty"`
}

// UserSkillTag １ユーザーのスキルタグ及び配下のスキル群を使用Version・使用期間別に保持したもの
type UserSkillTag struct {
	Skills *[]UserSkill `json:"skills,omitempty"`

	// TagName スキルタグ名
	TagName *SkillTagName `json:"tagName,omitempty"`
}

// UserSkillVersion １ユーザーのスキルVersionを使用期間別に保持したもの
type UserSkillVersion struct {
	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// Period キャリア期間(月)
	Period *CareerPeriodMonth `json:"period,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// UserSolution １ユーザーの課題解決事例
type UserSolution struct {
	// Content 課題解決事例
	Content *SolutionContent `json:"content,omitempty"`
}

// Year 生年月日の「年」
type Year = int

// CareerGroupId キャリアグループを一意に識別するID
type CareerGroupId = CareerGroupID

// CareerId キャリアを一意に識別するID
type CareerId = CareerID

// NoteId 注釈を一意に識別するID
type NoteId = NoteID

// SkillId スキルを一意に識別するキー
type SkillId = SkillID

// SkillTagId スキルタグを一意に識別するキー
type SkillTagId = SkillTagID

// SkillTagIdQuery スキルタグを一意に識別するキー
type SkillTagIdQuery = SkillTagID

// UserId ユーザーを一意に識別するキー
type UserId = UserID

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// GetSkillsParams defines parameters for GetSkills.
type GetSkillsParams struct {
	Tag *SkillTagIdQuery `form:"tag,omitempty" json:"tag,omitempty"`
}

// PostSkillsParams defines parameters for PostSkills.
type PostSkillsParams struct {
	Tag *SkillTagIdQuery `form:"tag,omitempty" json:"tag,omitempty"`
}

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAppealsJSONBody defines parameters for PutUsersByUserIdAppeals.
type PutUsersByUserIdAppealsJSONBody = []UserAppeal

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PutUsersByUserIdSolutionsJSONBody defines parameters for PutUsersByUserIdSolutions.
type PutUsersByUserIdSolutionsJSONBody = []UserSolution

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = Skill

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = SkillTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserAttribute

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAppealsJSONRequestBody defines body for PutUsersByUserIdAppeals for application/json ContentType.
type PutUsersByUserIdAppealsJSONRequestBody = PutUsersByUserIdAppealsJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = UserCareerGroupOwn

// PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PostUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = UserCareer

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// PutUsersByUserIdSolutionsJSONRequestBody defines body for PutUsersByUserIdSolutions for application/json ContentType.
type PutUsersByUserIdSolutionsJSONRequestBody = PutUsersByUserIdSolutionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// スキル群取得
	// (GET /skills)
	GetSkills(ctx echo.Context, params GetSkillsParams) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context, params PostSkillsParams) error
	// 指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// 指定スキルタグ取得
	// (GET /skilltags/{bySkillTagId})
	GetSkilltagsBySkillTagId(ctx echo.Context, bySkillTagId SkillTagId) error
	// ユーザー一覧取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アピール事項群取得
	// (GET /users/{byUserId}/appeals)
	GetUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error
	// アピール事項群最新化
	// (PUT /users/{byUserId}/appeals)
	PutUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリアグループ取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId})
	GetUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリアグループ内の１キャリア登録
	// (POST /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリア取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId}/careers/{byCareerId})
	GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId, byCareerId CareerId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
	// 課題解決事例群取得
	// (GET /users/{byUserId}/solutions)
	GetUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error
	// 課題解決事例群最新化
	// (PUT /users/{byUserId}/solutions)
	PutUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSkillsParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkills(ctx, params)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSkillsParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkills(ctx, params)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillId", runtime.ParamLocationPath, ctx.Param("bySkillId"), &bySkillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// GetSkilltagsBySkillTagId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltagsBySkillTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillTagId" -------------
	var bySkillTagId SkillTagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bySkillTagId", runtime.ParamLocationPath, ctx.Param("bySkillTagId"), &bySkillTagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillTagId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSkilltagsBySkillTagId(ctx, bySkillTagId)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAppeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAppeals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAppeals(ctx, byUserId)
	return err
}

// PutUsersByUserIdAppeals converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAppeals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAppeals(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PostUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerGroupId", runtime.ParamLocationPath, ctx.Param("byCareerGroupId"), &byCareerGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// ------------- Path parameter "byCareerId" -------------
	var byCareerId CareerId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCareerId", runtime.ParamLocationPath, ctx.Param("byCareerId"), &byCareerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx, byUserId, byCareerGroupId, byCareerId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNoteId", runtime.ParamLocationPath, ctx.Param("byNoteId"), &byNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// GetUsersByUserIdSolutions converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSolutions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserIdSolutions(ctx, byUserId)
	return err
}

// PutUsersByUserIdSolutions converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdSolutions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserId", runtime.ParamLocationPath, ctx.Param("byUserId"), &byUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserIdSolutions(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.GET(baseURL+"/skilltags/:bySkillTagId", wrapper.GetSkilltagsBySkillTagId)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/appeals", wrapper.GetUsersByUserIdAppeals)
	router.PUT(baseURL+"/users/:byUserId/appeals", wrapper.PutUsersByUserIdAppeals)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.GET(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.GetUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.POST(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PostUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers/:byCareerId", wrapper.GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)
	router.GET(baseURL+"/users/:byUserId/solutions", wrapper.GetUsersByUserIdSolutions)
	router.PUT(baseURL+"/users/:byUserId/solutions", wrapper.PutUsersByUserIdSolutions)

}

type N400BadRequestJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type N404NotFoundJSONResponse struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

type PostSkillrecordsRequestObject struct {
	Body *PostSkillrecordsJSONRequestBody
}

type PostSkillrecordsResponseObject interface {
	VisitPostSkillrecordsResponse(w http.ResponseWriter) error
}

type PostSkillrecords201JSONResponse []Skill

func (response PostSkillrecords201JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillrecords400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkillrecords400JSONResponse) VisitPostSkillrecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsRequestObject struct {
	Params GetSkillsParams
}

type GetSkillsResponseObject interface {
	VisitGetSkillsResponse(w http.ResponseWriter) error
}

type GetSkills200JSONResponse []Skill

func (response GetSkills200JSONResponse) VisitGetSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillsRequestObject struct {
	Params PostSkillsParams
	Body   *PostSkillsJSONRequestBody
}

type PostSkillsResponseObject interface {
	VisitPostSkillsResponse(w http.ResponseWriter) error
}

type PostSkills201JSONResponse Skill

func (response PostSkills201JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkills400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkills400JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsBySkillIdRequestObject struct {
	BySkillId SkillId `json:"bySkillId"`
}

type GetSkillsBySkillIdResponseObject interface {
	VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error
}

type GetSkillsBySkillId200JSONResponse Skill

func (response GetSkillsBySkillId200JSONResponse) VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsBySkillId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetSkillsBySkillId404JSONResponse) VisitGetSkillsBySkillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSkilltagsRequestObject struct {
}

type GetSkilltagsResponseObject interface {
	VisitGetSkilltagsResponse(w http.ResponseWriter) error
}

type GetSkilltags200JSONResponse []SkillTag

func (response GetSkilltags200JSONResponse) VisitGetSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltagsRequestObject struct {
	Body *PostSkilltagsJSONRequestBody
}

type PostSkilltagsResponseObject interface {
	VisitPostSkilltagsResponse(w http.ResponseWriter) error
}

type PostSkilltags201JSONResponse SkillTag

func (response PostSkilltags201JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkilltags400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostSkilltags400JSONResponse) VisitPostSkilltagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkilltagsBySkillTagIdRequestObject struct {
	BySkillTagId SkillTagId `json:"bySkillTagId"`
}

type GetSkilltagsBySkillTagIdResponseObject interface {
	VisitGetSkilltagsBySkillTagIdResponse(w http.ResponseWriter) error
}

type GetSkilltagsBySkillTagId200JSONResponse SkillTag

func (response GetSkilltagsBySkillTagId200JSONResponse) VisitGetSkilltagsBySkillTagIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkilltagsBySkillTagId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetSkilltagsBySkillTagId404JSONResponse) VisitGetSkilltagsBySkillTagIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []UserAttribute

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers201JSONResponse UserAttribute

func (response PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsers400JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type DeleteUsersByUserIdResponseObject interface {
	VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserId204Response struct {
}

func (response DeleteUsersByUserId204Response) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserId404JSONResponse) VisitDeleteUsersByUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdActivitiesResponseObject interface {
	VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdActivities200JSONResponse []UserActivity

func (response GetUsersByUserIdActivities200JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdActivities404JSONResponse) VisitGetUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivitiesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdActivitiesJSONRequestBody
}

type PutUsersByUserIdActivitiesResponseObject interface {
	VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdActivities200JSONResponse []UserActivity

func (response PutUsersByUserIdActivities200JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdActivities400JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdActivities404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdActivities404JSONResponse) VisitPutUsersByUserIdActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAppealsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdAppealsResponseObject interface {
	VisitGetUsersByUserIdAppealsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdAppeals200JSONResponse []UserAppeal

func (response GetUsersByUserIdAppeals200JSONResponse) VisitGetUsersByUserIdAppealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAppeals404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdAppeals404JSONResponse) VisitGetUsersByUserIdAppealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAppealsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdAppealsJSONRequestBody
}

type PutUsersByUserIdAppealsResponseObject interface {
	VisitPutUsersByUserIdAppealsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdAppeals200JSONResponse []UserAppeal

func (response PutUsersByUserIdAppeals200JSONResponse) VisitPutUsersByUserIdAppealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAppeals400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdAppeals400JSONResponse) VisitPutUsersByUserIdAppealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAppeals404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdAppeals404JSONResponse) VisitPutUsersByUserIdAppealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdAttributeResponseObject interface {
	VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdAttribute200JSONResponse UserAttribute

func (response GetUsersByUserIdAttribute200JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdAttribute404JSONResponse) VisitGetUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttributeRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdAttributeJSONRequestBody
}

type PutUsersByUserIdAttributeResponseObject interface {
	VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdAttribute200JSONResponse UserAttribute

func (response PutUsersByUserIdAttribute200JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdAttribute400JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdAttribute404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdAttribute404JSONResponse) VisitPutUsersByUserIdAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdCareergroupsResponseObject interface {
	VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdCareergroups200JSONResponse []UserCareerGroup

func (response GetUsersByUserIdCareergroups200JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdCareergroups404JSONResponse) VisitGetUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroupsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdCareergroupsJSONRequestBody
}

type PostUsersByUserIdCareergroupsResponseObject interface {
	VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdCareergroups201JSONResponse UserCareerGroup

func (response PostUsersByUserIdCareergroups201JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroups400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdCareergroups400JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroups404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdCareergroups404JSONResponse) VisitPostUsersByUserIdCareergroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
}

type DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId204Response struct {
}

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId204Response) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
}

type GetUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitGetUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdCareergroupsByCareerGroupId200JSONResponse UserCareerGroup

func (response GetUsersByUserIdCareergroupsByCareerGroupId200JSONResponse) VisitGetUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitGetUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse UserCareerGroupOwn

func (response PutUsersByUserIdCareergroupsByCareerGroupId200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupId404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
}

type PostUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject interface {
	VisitPostUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdCareergroupsByCareerGroupIdCareers201JSONResponse UserCareer

func (response PostUsersByUserIdCareergroupsByCareerGroupIdCareers201JSONResponse) VisitPostUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse) VisitPostUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	Body            *PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject interface {
	VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse []UserCareer

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers200JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers400JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdCareergroupsByCareerGroupIdCareers404JSONResponse) VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdRequestObject struct {
	ByUserId        UserId        `json:"byUserId"`
	ByCareerGroupId CareerGroupId `json:"byCareerGroupId"`
	ByCareerId      CareerId      `json:"byCareerId"`
}

type GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponseObject interface {
	VisitGetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId200JSONResponse UserCareer

func (response GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId200JSONResponse) VisitGetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId404JSONResponse) VisitGetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdNotesResponseObject interface {
	VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdNotes200JSONResponse []UserNote

func (response GetUsersByUserIdNotes200JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdNotes404JSONResponse) VisitGetUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotesRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PostUsersByUserIdNotesJSONRequestBody
}

type PostUsersByUserIdNotesResponseObject interface {
	VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error
}

type PostUsersByUserIdNotes201JSONResponse UserNote

func (response PostUsersByUserIdNotes201JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotes400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostUsersByUserIdNotes400JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersByUserIdNotes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PostUsersByUserIdNotes404JSONResponse) VisitPostUsersByUserIdNotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
}

type DeleteUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type DeleteUsersByUserIdNotesByNoteId204Response struct {
}

func (response DeleteUsersByUserIdNotesByNoteId204Response) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteUsersByUserIdNotesByNoteId404JSONResponse) VisitDeleteUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteId200JSONResponse UserNoteOwn

func (response PutUsersByUserIdNotesByNoteId200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteId400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteId404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItemsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	ByNoteId NoteId `json:"byNoteId"`
	Body     *PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
}

type PutUsersByUserIdNotesByNoteIdItemsResponseObject interface {
	VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdNotesByNoteIdItems200JSONResponse []UserNoteItem

func (response PutUsersByUserIdNotesByNoteIdItems200JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems400JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdNotesByNoteIdItems404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdNotesByNoteIdItems404JSONResponse) VisitPutUsersByUserIdNotesByNoteIdItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdQualificationsResponseObject interface {
	VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdQualifications200JSONResponse []UserQualification

func (response GetUsersByUserIdQualifications200JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdQualifications404JSONResponse) VisitGetUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualificationsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdQualificationsJSONRequestBody
}

type PutUsersByUserIdQualificationsResponseObject interface {
	VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdQualifications200JSONResponse []UserQualification

func (response PutUsersByUserIdQualifications200JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdQualifications400JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdQualifications404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdQualifications404JSONResponse) VisitPutUsersByUserIdQualificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkillsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdSkillsResponseObject interface {
	VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdSkills200JSONResponse []UserSkillTag

func (response GetUsersByUserIdSkills200JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSkills404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdSkills404JSONResponse) VisitGetUsersByUserIdSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSolutionsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
}

type GetUsersByUserIdSolutionsResponseObject interface {
	VisitGetUsersByUserIdSolutionsResponse(w http.ResponseWriter) error
}

type GetUsersByUserIdSolutions200JSONResponse []UserSolution

func (response GetUsersByUserIdSolutions200JSONResponse) VisitGetUsersByUserIdSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUserIdSolutions404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetUsersByUserIdSolutions404JSONResponse) VisitGetUsersByUserIdSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdSolutionsRequestObject struct {
	ByUserId UserId `json:"byUserId"`
	Body     *PutUsersByUserIdSolutionsJSONRequestBody
}

type PutUsersByUserIdSolutionsResponseObject interface {
	VisitPutUsersByUserIdSolutionsResponse(w http.ResponseWriter) error
}

type PutUsersByUserIdSolutions200JSONResponse []UserSolution

func (response PutUsersByUserIdSolutions200JSONResponse) VisitPutUsersByUserIdSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdSolutions400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutUsersByUserIdSolutions400JSONResponse) VisitPutUsersByUserIdSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersByUserIdSolutions404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutUsersByUserIdSolutions404JSONResponse) VisitPutUsersByUserIdSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx context.Context, request PostSkillrecordsRequestObject) (PostSkillrecordsResponseObject, error)
	// スキル群取得
	// (GET /skills)
	GetSkills(ctx context.Context, request GetSkillsRequestObject) (GetSkillsResponseObject, error)
	// スキル登録
	// (POST /skills)
	PostSkills(ctx context.Context, request PostSkillsRequestObject) (PostSkillsResponseObject, error)
	// 指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx context.Context, request GetSkillsBySkillIdRequestObject) (GetSkillsBySkillIdResponseObject, error)
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx context.Context, request GetSkilltagsRequestObject) (GetSkilltagsResponseObject, error)
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx context.Context, request PostSkilltagsRequestObject) (PostSkilltagsResponseObject, error)
	// 指定スキルタグ取得
	// (GET /skilltags/{bySkillTagId})
	GetSkilltagsBySkillTagId(ctx context.Context, request GetSkilltagsBySkillTagIdRequestObject) (GetSkilltagsBySkillTagIdResponseObject, error)
	// ユーザー一覧取得
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx context.Context, request DeleteUsersByUserIdRequestObject) (DeleteUsersByUserIdResponseObject, error)
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx context.Context, request GetUsersByUserIdActivitiesRequestObject) (GetUsersByUserIdActivitiesResponseObject, error)
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx context.Context, request PutUsersByUserIdActivitiesRequestObject) (PutUsersByUserIdActivitiesResponseObject, error)
	// アピール事項群取得
	// (GET /users/{byUserId}/appeals)
	GetUsersByUserIdAppeals(ctx context.Context, request GetUsersByUserIdAppealsRequestObject) (GetUsersByUserIdAppealsResponseObject, error)
	// アピール事項群最新化
	// (PUT /users/{byUserId}/appeals)
	PutUsersByUserIdAppeals(ctx context.Context, request PutUsersByUserIdAppealsRequestObject) (PutUsersByUserIdAppealsResponseObject, error)
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx context.Context, request GetUsersByUserIdAttributeRequestObject) (GetUsersByUserIdAttributeResponseObject, error)
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx context.Context, request PutUsersByUserIdAttributeRequestObject) (PutUsersByUserIdAttributeResponseObject, error)
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx context.Context, request GetUsersByUserIdCareergroupsRequestObject) (GetUsersByUserIdCareergroupsResponseObject, error)
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx context.Context, request PostUsersByUserIdCareergroupsRequestObject) (PostUsersByUserIdCareergroupsResponseObject, error)
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// １キャリアグループ取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId})
	GetUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request GetUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (GetUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject, error)
	// １キャリアグループ内の１キャリア登録
	// (POST /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx context.Context, request PostUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject) (PostUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject, error)
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx context.Context, request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject) (PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject, error)
	// １キャリア取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId}/careers/{byCareerId})
	GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx context.Context, request GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdRequestObject) (GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponseObject, error)
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx context.Context, request GetUsersByUserIdNotesRequestObject) (GetUsersByUserIdNotesResponseObject, error)
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx context.Context, request PostUsersByUserIdNotesRequestObject) (PostUsersByUserIdNotesResponseObject, error)
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx context.Context, request DeleteUsersByUserIdNotesByNoteIdRequestObject) (DeleteUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx context.Context, request PutUsersByUserIdNotesByNoteIdRequestObject) (PutUsersByUserIdNotesByNoteIdResponseObject, error)
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx context.Context, request PutUsersByUserIdNotesByNoteIdItemsRequestObject) (PutUsersByUserIdNotesByNoteIdItemsResponseObject, error)
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx context.Context, request GetUsersByUserIdQualificationsRequestObject) (GetUsersByUserIdQualificationsResponseObject, error)
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx context.Context, request PutUsersByUserIdQualificationsRequestObject) (PutUsersByUserIdQualificationsResponseObject, error)
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx context.Context, request GetUsersByUserIdSkillsRequestObject) (GetUsersByUserIdSkillsResponseObject, error)
	// 課題解決事例群取得
	// (GET /users/{byUserId}/solutions)
	GetUsersByUserIdSolutions(ctx context.Context, request GetUsersByUserIdSolutionsRequestObject) (GetUsersByUserIdSolutionsResponseObject, error)
	// 課題解決事例群最新化
	// (PUT /users/{byUserId}/solutions)
	PutUsersByUserIdSolutions(ctx context.Context, request PutUsersByUserIdSolutionsRequestObject) (PutUsersByUserIdSolutionsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSkillrecords operation middleware
func (sh *strictHandler) PostSkillrecords(ctx echo.Context) error {
	var request PostSkillrecordsRequestObject

	var body PostSkillrecordsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkillrecords(ctx.Request().Context(), request.(PostSkillrecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkillrecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillrecordsResponseObject); ok {
		return validResponse.VisitPostSkillrecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkills operation middleware
func (sh *strictHandler) GetSkills(ctx echo.Context, params GetSkillsParams) error {
	var request GetSkillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkills(ctx.Request().Context(), request.(GetSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsResponseObject); ok {
		return validResponse.VisitGetSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkills operation middleware
func (sh *strictHandler) PostSkills(ctx echo.Context, params PostSkillsParams) error {
	var request PostSkillsRequestObject

	request.Params = params

	var body PostSkillsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkills(ctx.Request().Context(), request.(PostSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillsResponseObject); ok {
		return validResponse.VisitPostSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkillsBySkillId operation middleware
func (sh *strictHandler) GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error {
	var request GetSkillsBySkillIdRequestObject

	request.BySkillId = bySkillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkillsBySkillId(ctx.Request().Context(), request.(GetSkillsBySkillIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkillsBySkillId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsBySkillIdResponseObject); ok {
		return validResponse.VisitGetSkillsBySkillIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkilltags operation middleware
func (sh *strictHandler) GetSkilltags(ctx echo.Context) error {
	var request GetSkilltagsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkilltags(ctx.Request().Context(), request.(GetSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkilltagsResponseObject); ok {
		return validResponse.VisitGetSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSkilltags operation middleware
func (sh *strictHandler) PostSkilltags(ctx echo.Context) error {
	var request PostSkilltagsRequestObject

	var body PostSkilltagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkilltags(ctx.Request().Context(), request.(PostSkilltagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkilltags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkilltagsResponseObject); ok {
		return validResponse.VisitPostSkilltagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSkilltagsBySkillTagId operation middleware
func (sh *strictHandler) GetSkilltagsBySkillTagId(ctx echo.Context, bySkillTagId SkillTagId) error {
	var request GetSkilltagsBySkillTagIdRequestObject

	request.BySkillTagId = bySkillTagId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkilltagsBySkillTagId(ctx.Request().Context(), request.(GetSkilltagsBySkillTagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkilltagsBySkillTagId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkilltagsBySkillTagIdResponseObject); ok {
		return validResponse.VisitGetSkilltagsBySkillTagIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(ctx echo.Context) error {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx.Request().Context(), request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		return validResponse.VisitPostUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserId operation middleware
func (sh *strictHandler) DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error {
	var request DeleteUsersByUserIdRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserId(ctx.Request().Context(), request.(DeleteUsersByUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdActivities operation middleware
func (sh *strictHandler) GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdActivities(ctx.Request().Context(), request.(GetUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdActivities operation middleware
func (sh *strictHandler) PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdActivitiesRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdActivitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdActivities(ctx.Request().Context(), request.(PutUsersByUserIdActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdActivitiesResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdActivitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdAppeals operation middleware
func (sh *strictHandler) GetUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdAppealsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdAppeals(ctx.Request().Context(), request.(GetUsersByUserIdAppealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdAppeals")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdAppealsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdAppealsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdAppeals operation middleware
func (sh *strictHandler) PutUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdAppealsRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdAppealsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdAppeals(ctx.Request().Context(), request.(PutUsersByUserIdAppealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdAppeals")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdAppealsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdAppealsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdAttribute operation middleware
func (sh *strictHandler) GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdAttribute(ctx.Request().Context(), request.(GetUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdAttribute operation middleware
func (sh *strictHandler) PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdAttributeRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdAttributeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdAttribute(ctx.Request().Context(), request.(PutUsersByUserIdAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdAttribute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdAttributeResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdAttributeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdCareergroups(ctx.Request().Context(), request.(GetUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdCareergroups operation middleware
func (sh *strictHandler) PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdCareergroupsRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdCareergroupsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdCareergroups(ctx.Request().Context(), request.(PostUsersByUserIdCareergroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdCareergroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdCareergroupsResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdCareergroupsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(DeleteUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) GetUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request GetUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(GetUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupId operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupId(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdCareergroupsByCareerGroupIdCareers operation middleware
func (sh *strictHandler) PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PostUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx.Request().Context(), request.(PostUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdCareergroupsByCareerGroupIdCareers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers operation middleware
func (sh *strictHandler) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error {
	var request PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId

	var body PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx.Request().Context(), request.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdCareergroupsByCareerGroupIdCareers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdCareergroupsByCareerGroupIdCareersResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdCareergroupsByCareerGroupIdCareersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId operation middleware
func (sh *strictHandler) GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId, byCareerId CareerId) error {
	var request GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdRequestObject

	request.ByUserId = byUserId
	request.ByCareerGroupId = byCareerGroupId
	request.ByCareerId = byCareerId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx.Request().Context(), request.(GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdNotes operation middleware
func (sh *strictHandler) GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdNotes(ctx.Request().Context(), request.(GetUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersByUserIdNotes operation middleware
func (sh *strictHandler) PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error {
	var request PostUsersByUserIdNotesRequestObject

	request.ByUserId = byUserId

	var body PostUsersByUserIdNotesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersByUserIdNotes(ctx.Request().Context(), request.(PostUsersByUserIdNotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersByUserIdNotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersByUserIdNotesResponseObject); ok {
		return validResponse.VisitPostUsersByUserIdNotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request DeleteUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(DeleteUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitDeleteUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteId operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteId(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdNotesByNoteIdItems operation middleware
func (sh *strictHandler) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error {
	var request PutUsersByUserIdNotesByNoteIdItemsRequestObject

	request.ByUserId = byUserId
	request.ByNoteId = byNoteId

	var body PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdNotesByNoteIdItems(ctx.Request().Context(), request.(PutUsersByUserIdNotesByNoteIdItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdNotesByNoteIdItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdNotesByNoteIdItemsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdNotesByNoteIdItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdQualifications operation middleware
func (sh *strictHandler) GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdQualifications(ctx.Request().Context(), request.(GetUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdQualifications operation middleware
func (sh *strictHandler) PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdQualificationsRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdQualificationsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdQualifications(ctx.Request().Context(), request.(PutUsersByUserIdQualificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdQualifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdQualificationsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdQualificationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdSkills operation middleware
func (sh *strictHandler) GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdSkillsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdSkills(ctx.Request().Context(), request.(GetUsersByUserIdSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdSkillsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersByUserIdSolutions operation middleware
func (sh *strictHandler) GetUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error {
	var request GetUsersByUserIdSolutionsRequestObject

	request.ByUserId = byUserId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUserIdSolutions(ctx.Request().Context(), request.(GetUsersByUserIdSolutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUserIdSolutions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersByUserIdSolutionsResponseObject); ok {
		return validResponse.VisitGetUsersByUserIdSolutionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutUsersByUserIdSolutions operation middleware
func (sh *strictHandler) PutUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error {
	var request PutUsersByUserIdSolutionsRequestObject

	request.ByUserId = byUserId

	var body PutUsersByUserIdSolutionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersByUserIdSolutions(ctx.Request().Context(), request.(PutUsersByUserIdSolutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersByUserIdSolutions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersByUserIdSolutionsResponseObject); ok {
		return validResponse.VisitPutUsersByUserIdSolutionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4cI/6M2wfrfrRqteqv5fAAAA///0da5vzXoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
