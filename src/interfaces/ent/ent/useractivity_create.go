// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky0621/cv-admin/src/interfaces/ent/ent/useractivity"
)

// UserActivityCreate is the builder for creating a UserActivity entity.
type UserActivityCreate struct {
	config
	mutation *UserActivityMutation
	hooks    []Hook
}

// Mutation returns the UserActivityMutation object of the builder.
func (uac *UserActivityCreate) Mutation() *UserActivityMutation {
	return uac.mutation
}

// Save creates the UserActivity in the database.
func (uac *UserActivityCreate) Save(ctx context.Context) (*UserActivity, error) {
	var (
		err  error
		node *UserActivity
	)
	if len(uac.hooks) == 0 {
		if err = uac.check(); err != nil {
			return nil, err
		}
		node, err = uac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uac.check(); err != nil {
				return nil, err
			}
			uac.mutation = mutation
			if node, err = uac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uac.hooks) - 1; i >= 0; i-- {
			if uac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserActivity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserActivityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserActivityCreate) SaveX(ctx context.Context) *UserActivity {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserActivityCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserActivityCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserActivityCreate) check() error {
	return nil
}

func (uac *UserActivityCreate) sqlSave(ctx context.Context) (*UserActivity, error) {
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uac *UserActivityCreate) createSpec() (*UserActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &UserActivity{config: uac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useractivity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useractivity.FieldID,
			},
		}
	)
	return _node, _spec
}

// UserActivityCreateBulk is the builder for creating many UserActivity entities in bulk.
type UserActivityCreateBulk struct {
	config
	builders []*UserActivityCreate
}

// Save creates the UserActivity entities in the database.
func (uacb *UserActivityCreateBulk) Save(ctx context.Context) ([]*UserActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserActivity, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserActivityCreateBulk) SaveX(ctx context.Context) []*UserActivity {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserActivityCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
