// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/sky0621/cv-admin/src/interfaces/ent/ent/careerskill"
)

// CareerSkill is the model entity for the CareerSkill schema.
type CareerSkill struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CareerSkill) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case careerskill.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CareerSkill", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CareerSkill fields.
func (cs *CareerSkill) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case careerskill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this CareerSkill.
// Note that you need to call CareerSkill.Unwrap() before calling this method if this CareerSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CareerSkill) Update() *CareerSkillUpdateOne {
	return (&CareerSkillClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CareerSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CareerSkill) Unwrap() *CareerSkill {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CareerSkill is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CareerSkill) String() string {
	var builder strings.Builder
	builder.WriteString("CareerSkill(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteByte(')')
	return builder.String()
}

// CareerSkills is a parsable slice of CareerSkill.
type CareerSkills []*CareerSkill

func (cs CareerSkills) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
