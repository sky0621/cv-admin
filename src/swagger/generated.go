// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescriptions = []string

// キャリアグループを一意に識別するID
type CareerGroupId = string

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`

	// スキルバージョン
	Version *SkillVersion `json:"version"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// スキルグループラベル
	Label *SkillGroupLabel `json:"label"`

	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキルグループ群
type CareerSkillGroups = interface{}

// １キャリアのスキル群
type CareerSkills = interface{}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int32

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキルグループラベル
type SkillGroupLabel = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーを一意に識別するキー
	Key *UserKey `json:"key,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescriptions `json:"description"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *CareerSkillGroups `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *UserCareers `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// １ユーザーのキャリアグループのキャリア群
type UserCareers = []UserCareer

// ユーザーを一意に識別するキー
type UserKey = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKUserActivities = UserActivities

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = UserCareers

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = UserQualifications

// １ユーザーの属性
type N201CreatedUserAttribute = UserAttribute

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserKeyActivitiesJSONBody defines parameters for PutUsersByUserKeyActivities.
type PutUsersByUserKeyActivitiesJSONBody = UserActivities

// PutUsersByUserKeyAttributesJSONBody defines parameters for PutUsersByUserKeyAttributes.
type PutUsersByUserKeyAttributesJSONBody = UserAttribute

// PostUsersByUserKeyCareergroupsJSONBody defines parameters for PostUsersByUserKeyCareergroups.
type PostUsersByUserKeyCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserKeyCareergroupsByCidJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCid.
type PutUsersByUserKeyCareergroupsByCidJSONBody = UserCareerGroupOwn

// PutUsersByUserKeyCareergroupsByCidCareersJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCidCareers.
type PutUsersByUserKeyCareergroupsByCidCareersJSONBody = UserCareers

// PostUsersByUserKeyNotesJSONBody defines parameters for PostUsersByUserKeyNotes.
type PostUsersByUserKeyNotesJSONBody = UserNote

// PutUsersByUserKeyNotesByNidJSONBody defines parameters for PutUsersByUserKeyNotesByNid.
type PutUsersByUserKeyNotesByNidJSONBody = UserNoteOwn

// PutUsersByUserKeyNotesByNidItemsJSONBody defines parameters for PutUsersByUserKeyNotesByNidItems.
type PutUsersByUserKeyNotesByNidItemsJSONBody = UserNoteItems

// PutUsersByUserKeyQualificationsJSONBody defines parameters for PutUsersByUserKeyQualifications.
type PutUsersByUserKeyQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserKeyActivitiesJSONRequestBody defines body for PutUsersByUserKeyActivities for application/json ContentType.
type PutUsersByUserKeyActivitiesJSONRequestBody = PutUsersByUserKeyActivitiesJSONBody

// PutUsersByUserKeyAttributesJSONRequestBody defines body for PutUsersByUserKeyAttributes for application/json ContentType.
type PutUsersByUserKeyAttributesJSONRequestBody = PutUsersByUserKeyAttributesJSONBody

// PostUsersByUserKeyCareergroupsJSONRequestBody defines body for PostUsersByUserKeyCareergroups for application/json ContentType.
type PostUsersByUserKeyCareergroupsJSONRequestBody = PostUsersByUserKeyCareergroupsJSONBody

// PutUsersByUserKeyCareergroupsByCidJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCid for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidJSONRequestBody = PutUsersByUserKeyCareergroupsByCidJSONBody

// PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCidCareers for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody = PutUsersByUserKeyCareergroupsByCidCareersJSONBody

// PostUsersByUserKeyNotesJSONRequestBody defines body for PostUsersByUserKeyNotes for application/json ContentType.
type PostUsersByUserKeyNotesJSONRequestBody = PostUsersByUserKeyNotesJSONBody

// PutUsersByUserKeyNotesByNidJSONRequestBody defines body for PutUsersByUserKeyNotesByNid for application/json ContentType.
type PutUsersByUserKeyNotesByNidJSONRequestBody = PutUsersByUserKeyNotesByNidJSONBody

// PutUsersByUserKeyNotesByNidItemsJSONRequestBody defines body for PutUsersByUserKeyNotesByNidItems for application/json ContentType.
type PutUsersByUserKeyNotesByNidItemsJSONRequestBody = PutUsersByUserKeyNotesByNidItemsJSONBody

// PutUsersByUserKeyQualificationsJSONRequestBody defines body for PutUsersByUserKeyQualifications for application/json ContentType.
type PutUsersByUserKeyQualificationsJSONRequestBody = PutUsersByUserKeyQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{byUserKey})
	DeleteUsersByUserKey(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群取得
	// (GET /users/{byUserKey}/activities)
	GetUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群最新化
	// (PUT /users/{byUserKey}/activities)
	PutUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// 属性取得
	// (GET /users/{byUserKey}/attributes)
	GetUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// 属性更新
	// (PUT /users/{byUserKey}/attributes)
	PutUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ群取得
	// (GET /users/{byUserKey}/careergroups)
	GetUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ新規登録
	// (POST /users/{byUserKey}/careergroups)
	PostUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ削除
	// (DELETE /users/{byUserKey}/careergroups/{byCid})
	DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{byUserKey}/careergroups/{byCid})
	PutUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserKey}/careergroups/{byCid}/careers)
	PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserKey}/notes)
	GetUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈新規登録
	// (POST /users/{byUserKey}/notes)
	PostUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈削除
	// (DELETE /users/{byUserKey}/notes/{byNid})
	DeleteUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈更新
	// (PUT /users/{byUserKey}/notes/{byNid})
	PutUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{byUserKey}/notes/{byNid}/items)
	PutUsersByUserKeyNotesByNidItems(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserKey}/qualifications)
	GetUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
	// 資格情報群最新化
	// (PUT /users/{byUserKey}/qualifications)
	PutUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKey(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCidCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCidCareers(ctx, byUserKey, byCid)
	return err
}

// GetUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNidItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNidItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNidItems(ctx, byUserKey, byNid)
	return err
}

// GetUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserKey", wrapper.DeleteUsersByUserKey)
	router.GET(baseURL+"/users/:byUserKey/activities", wrapper.GetUsersByUserKeyActivities)
	router.PUT(baseURL+"/users/:byUserKey/activities", wrapper.PutUsersByUserKeyActivities)
	router.GET(baseURL+"/users/:byUserKey/attributes", wrapper.GetUsersByUserKeyAttributes)
	router.PUT(baseURL+"/users/:byUserKey/attributes", wrapper.PutUsersByUserKeyAttributes)
	router.GET(baseURL+"/users/:byUserKey/careergroups", wrapper.GetUsersByUserKeyCareergroups)
	router.POST(baseURL+"/users/:byUserKey/careergroups", wrapper.PostUsersByUserKeyCareergroups)
	router.DELETE(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.DeleteUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.PutUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid/careers", wrapper.PutUsersByUserKeyCareergroupsByCidCareers)
	router.GET(baseURL+"/users/:byUserKey/notes", wrapper.GetUsersByUserKeyNotes)
	router.POST(baseURL+"/users/:byUserKey/notes", wrapper.PostUsersByUserKeyNotes)
	router.DELETE(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.DeleteUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.PutUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid/items", wrapper.PutUsersByUserKeyNotesByNidItems)
	router.GET(baseURL+"/users/:byUserKey/qualifications", wrapper.GetUsersByUserKeyQualifications)
	router.PUT(baseURL+"/users/:byUserKey/qualifications", wrapper.PutUsersByUserKeyQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//ZQW87f5RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
