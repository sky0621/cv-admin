// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// アクティビティアイコン
type ActivityIcon = string

// アクティビティ名
type ActivityName = string

// 所属
type BelongTo = string

// 生年月日
type BirthDay struct {
	// 生年月日の「日」
	Day *Day `json:"day,omitempty"`

	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア説明
type CareerDescriptions = []string

// キャリアグループを一意に識別するID
type CareerGroupId = string

// キャリアグループラベル
type CareerGroupLabel = string

// キャリア名
type CareerName = string

// キャリア期間年月From
type CareerPeriodFrom struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// キャリア期間年月To
type CareerPeriodTo struct {
	// 生年月日の「月」
	Month *Month `json:"month,omitempty"`

	// 生年月日の「年」
	Year *Year `json:"year,omitempty"`
}

// １キャリアのスキル
type CareerSkill struct {
	// スキル名
	Name *SkillName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`

	// スキルバージョン
	Version *SkillVersion `json:"version"`
}

// CareerSkillGroup defines model for CareerSkillGroup.
type CareerSkillGroup struct {
	// スキルグループラベル
	Label *SkillGroupLabel `json:"label"`

	// １キャリアのスキル群
	Skills *CareerSkills `json:"skills,omitempty"`
}

// １キャリアのスキルグループ群
type CareerSkillGroups = interface{}

// １キャリアのスキル群
type CareerSkills = interface{}

// １キャリアのタスク
type CareerTask struct {
	// タスク説明
	Description *TaskDescriptions `json:"description"`

	// タスク名
	Name *TaskName `json:"name,omitempty"`
}

// １キャリアのタスク群
type CareerTasks = []CareerTask

// ClientError defines model for ClientError.
type ClientError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 生年月日の「日」
type Day = int32

// エラーメッセージ
type ErrorMessage = string

// 職業
type Job = string

// 生年月日の「月」
type Month = int32

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	// エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// 注釈を一意に識別するID
type NoteId = string

// 注釈内の１要素
type NoteItemText = string

// ラベル
type NoteLabel = string

// メモ
type NoteMemo = string

// PR
type PR = string

// 取得日
type QualificationGotDate = openapi_types.Date

// メモ
type QualificationMemo = string

// 資格名
type QualificationName = string

// 組織名
type QualificationOrg = string

// スキルグループラベル
type SkillGroupLabel = string

// スキル名
type SkillName = string

// スキルバージョン
type SkillVersion = string

// タスク説明
type TaskDescriptions = []string

// タスク名
type TaskName = string

// URL
type Url = string

// １ユーザーのアクティビティ群
type UserActivities = []UserActivity

// １ユーザーのアクティビティ
type UserActivity struct {
	// アクティビティアイコン
	Icon *ActivityIcon `json:"icon"`

	// アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの属性
type UserAttribute struct {
	// URL
	AvatarUrl *Url `json:"avatarUrl"`

	// 所属
	BelongTo *BelongTo `json:"belongTo"`

	// 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// 職業
	Job *Job `json:"job"`

	// ユーザーを一意に識別するキー
	Key *UserKey `json:"key,omitempty"`

	// ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname"`

	// PR
	Pr *PR `json:"pr"`
}

// １キャリアグループのキャリア
type UserCareer struct {
	// キャリア説明
	Description *CareerDescriptions `json:"description"`

	// キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// キャリア名
	Name *CareerName `json:"name,omitempty"`

	// １キャリアのスキルグループ群
	SkillGroups *CareerSkillGroups `json:"skillGroups,omitempty"`

	// １キャリアのタスク群
	Tasks *CareerTasks `json:"tasks,omitempty"`

	// キャリア期間年月To
	To *CareerPeriodTo `json:"to"`
}

// １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// １ユーザーのキャリアグループのキャリア群
	Careers *UserCareers `json:"careers,omitempty"`

	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// １ユーザーのキャリアグループ群
type UserCareerGroups = []UserCareerGroup

// １ユーザーのキャリアグループのキャリア群
type UserCareers = []UserCareer

// ユーザーを一意に識別するキー
type UserKey = string

// ユーザーの本名
type UserName = string

// ユーザーのニックネーム
type UserNickName = string

// １ユーザーの注釈
type UserNote struct {
	// １ユーザーの注釈内の要素群
	Items *UserNoteItems `json:"items,omitempty"`

	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// １ユーザーの注釈内の要素群
type UserNoteItems = []UserNoteItem

// １ユーザーの注釈自身
type UserNoteOwn struct {
	// ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// メモ
	Memo *NoteMemo `json:"memo"`
}

// １ユーザーの注釈群
type UserNotes = []UserNote

// １ユーザーの資格情報
type UserQualification struct {
	// 取得日
	GotDate *QualificationGotDate `json:"gotDate"`

	// メモ
	Memo *QualificationMemo `json:"memo"`

	// 資格名
	Name *QualificationName `json:"name,omitempty"`

	// 組織名
	Organization *QualificationOrg `json:"organization"`

	// URL
	Url *Url `json:"url"`
}

// １ユーザーの資格情報群
type UserQualifications = []UserQualification

// 生年月日の「年」
type Year = int32

// １ユーザーのアクティビティ群
type N200OKUserActivities = UserActivities

// １ユーザーの属性
type N200OKUserAttribute = UserAttribute

// １ユーザーのキャリアグループ自身
type N200OKUserCareerGroupOwn = UserCareerGroupOwn

// １ユーザーのキャリアグループ群
type N200OKUserCareerGroups = UserCareerGroups

// １ユーザーのキャリアグループのキャリア群
type N200OKUserCareers = UserCareers

// １ユーザーの注釈内の要素群
type N200OKUserNoteItems = UserNoteItems

// １ユーザーの注釈自身
type N200OKUserNoteOwn = UserNoteOwn

// １ユーザーの注釈群
type N200OKUserNotes = UserNotes

// １ユーザーの資格情報群
type N200OKUserQualifications = UserQualifications

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest = ClientError

// N404NotFound defines model for 404-NotFound.
type N404NotFound = NotFoundError

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = UserAttribute

// PutUsersByUserKeyActivitiesJSONBody defines parameters for PutUsersByUserKeyActivities.
type PutUsersByUserKeyActivitiesJSONBody = UserActivities

// PutUsersByUserKeyAttributesJSONBody defines parameters for PutUsersByUserKeyAttributes.
type PutUsersByUserKeyAttributesJSONBody = UserAttribute

// PostUsersByUserKeyCareergroupsJSONBody defines parameters for PostUsersByUserKeyCareergroups.
type PostUsersByUserKeyCareergroupsJSONBody = UserCareerGroup

// PutUsersByUserKeyCareergroupsByCidJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCid.
type PutUsersByUserKeyCareergroupsByCidJSONBody = UserCareerGroupOwn

// PutUsersByUserKeyCareergroupsByCidCareersJSONBody defines parameters for PutUsersByUserKeyCareergroupsByCidCareers.
type PutUsersByUserKeyCareergroupsByCidCareersJSONBody = UserCareers

// PostUsersByUserKeyNotesJSONBody defines parameters for PostUsersByUserKeyNotes.
type PostUsersByUserKeyNotesJSONBody = UserNote

// PutUsersByUserKeyNotesByNidJSONBody defines parameters for PutUsersByUserKeyNotesByNid.
type PutUsersByUserKeyNotesByNidJSONBody = UserNoteOwn

// PutUsersByUserKeyNotesByNidItemsJSONBody defines parameters for PutUsersByUserKeyNotesByNidItems.
type PutUsersByUserKeyNotesByNidItemsJSONBody = UserNoteItems

// PutUsersByUserKeyQualificationsJSONBody defines parameters for PutUsersByUserKeyQualifications.
type PutUsersByUserKeyQualificationsJSONBody = UserQualifications

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// PutUsersByUserKeyActivitiesJSONRequestBody defines body for PutUsersByUserKeyActivities for application/json ContentType.
type PutUsersByUserKeyActivitiesJSONRequestBody = PutUsersByUserKeyActivitiesJSONBody

// PutUsersByUserKeyAttributesJSONRequestBody defines body for PutUsersByUserKeyAttributes for application/json ContentType.
type PutUsersByUserKeyAttributesJSONRequestBody = PutUsersByUserKeyAttributesJSONBody

// PostUsersByUserKeyCareergroupsJSONRequestBody defines body for PostUsersByUserKeyCareergroups for application/json ContentType.
type PostUsersByUserKeyCareergroupsJSONRequestBody = PostUsersByUserKeyCareergroupsJSONBody

// PutUsersByUserKeyCareergroupsByCidJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCid for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidJSONRequestBody = PutUsersByUserKeyCareergroupsByCidJSONBody

// PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody defines body for PutUsersByUserKeyCareergroupsByCidCareers for application/json ContentType.
type PutUsersByUserKeyCareergroupsByCidCareersJSONRequestBody = PutUsersByUserKeyCareergroupsByCidCareersJSONBody

// PostUsersByUserKeyNotesJSONRequestBody defines body for PostUsersByUserKeyNotes for application/json ContentType.
type PostUsersByUserKeyNotesJSONRequestBody = PostUsersByUserKeyNotesJSONBody

// PutUsersByUserKeyNotesByNidJSONRequestBody defines body for PutUsersByUserKeyNotesByNid for application/json ContentType.
type PutUsersByUserKeyNotesByNidJSONRequestBody = PutUsersByUserKeyNotesByNidJSONBody

// PutUsersByUserKeyNotesByNidItemsJSONRequestBody defines body for PutUsersByUserKeyNotesByNidItems for application/json ContentType.
type PutUsersByUserKeyNotesByNidItemsJSONRequestBody = PutUsersByUserKeyNotesByNidItemsJSONBody

// PutUsersByUserKeyQualificationsJSONRequestBody defines body for PutUsersByUserKeyQualifications for application/json ContentType.
type PutUsersByUserKeyQualificationsJSONRequestBody = PutUsersByUserKeyQualificationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー新規登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザー削除
	// (DELETE /users/{byUserKey})
	DeleteUsersByUserKey(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群取得
	// (GET /users/{byUserKey}/activities)
	GetUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// アクティビティ群最新化
	// (PUT /users/{byUserKey}/activities)
	PutUsersByUserKeyActivities(ctx echo.Context, byUserKey UserKey) error
	// 属性取得
	// (GET /users/{byUserKey}/attributes)
	GetUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// 属性更新
	// (PUT /users/{byUserKey}/attributes)
	PutUsersByUserKeyAttributes(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ群取得
	// (GET /users/{byUserKey}/careergroups)
	GetUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ新規登録
	// (POST /users/{byUserKey}/careergroups)
	PostUsersByUserKeyCareergroups(ctx echo.Context, byUserKey UserKey) error
	// キャリアグループ削除
	// (DELETE /users/{byUserKey}/careergroups/{byCid})
	DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ更新
	// (PUT /users/{byUserKey}/careergroups/{byCid})
	PutUsersByUserKeyCareergroupsByCid(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserKey}/careergroups/{byCid}/careers)
	PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context, byUserKey UserKey, byCid CareerGroupId) error
	// 注釈群取得
	// (GET /users/{byUserKey}/notes)
	GetUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈新規登録
	// (POST /users/{byUserKey}/notes)
	PostUsersByUserKeyNotes(ctx echo.Context, byUserKey UserKey) error
	// 注釈削除
	// (DELETE /users/{byUserKey}/notes/{byNid})
	DeleteUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈更新
	// (PUT /users/{byUserKey}/notes/{byNid})
	PutUsersByUserKeyNotesByNid(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 注釈内要素群最新化
	// (PUT /users/{byUserKey}/notes/{byNid}/items)
	PutUsersByUserKeyNotesByNidItems(ctx echo.Context, byUserKey UserKey, byNid NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserKey}/qualifications)
	GetUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
	// 資格情報群最新化
	// (PUT /users/{byUserKey}/qualifications)
	PutUsersByUserKeyQualifications(ctx echo.Context, byUserKey UserKey) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKey(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyActivities(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyAttributes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyAttributes(ctx, byUserKey)
	return err
}

// GetUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyCareergroups(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCid(ctx, byUserKey, byCid)
	return err
}

// PutUsersByUserKeyCareergroupsByCidCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyCareergroupsByCidCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byCid" -------------
	var byCid CareerGroupId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byCid", runtime.ParamLocationPath, ctx.Param("byCid"), &byCid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyCareergroupsByCidCareers(ctx, byUserKey, byCid)
	return err
}

// GetUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// PostUsersByUserKeyNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserKeyNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersByUserKeyNotes(ctx, byUserKey)
	return err
}

// DeleteUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNid(ctx, byUserKey, byNid)
	return err
}

// PutUsersByUserKeyNotesByNidItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyNotesByNidItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// ------------- Path parameter "byNid" -------------
	var byNid NoteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "byNid", runtime.ParamLocationPath, ctx.Param("byNid"), &byNid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyNotesByNidItems(ctx, byUserKey, byNid)
	return err
}

// GetUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// PutUsersByUserKeyQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserKeyQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserKey" -------------
	var byUserKey UserKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "byUserKey", runtime.ParamLocationPath, ctx.Param("byUserKey"), &byUserKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersByUserKeyQualifications(ctx, byUserKey)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserKey", wrapper.DeleteUsersByUserKey)
	router.GET(baseURL+"/users/:byUserKey/activities", wrapper.GetUsersByUserKeyActivities)
	router.PUT(baseURL+"/users/:byUserKey/activities", wrapper.PutUsersByUserKeyActivities)
	router.GET(baseURL+"/users/:byUserKey/attributes", wrapper.GetUsersByUserKeyAttributes)
	router.PUT(baseURL+"/users/:byUserKey/attributes", wrapper.PutUsersByUserKeyAttributes)
	router.GET(baseURL+"/users/:byUserKey/careergroups", wrapper.GetUsersByUserKeyCareergroups)
	router.POST(baseURL+"/users/:byUserKey/careergroups", wrapper.PostUsersByUserKeyCareergroups)
	router.DELETE(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.DeleteUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid", wrapper.PutUsersByUserKeyCareergroupsByCid)
	router.PUT(baseURL+"/users/:byUserKey/careergroups/:byCid/careers", wrapper.PutUsersByUserKeyCareergroupsByCidCareers)
	router.GET(baseURL+"/users/:byUserKey/notes", wrapper.GetUsersByUserKeyNotes)
	router.POST(baseURL+"/users/:byUserKey/notes", wrapper.PostUsersByUserKeyNotes)
	router.DELETE(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.DeleteUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid", wrapper.PutUsersByUserKeyNotesByNid)
	router.PUT(baseURL+"/users/:byUserKey/notes/:byNid/items", wrapper.PutUsersByUserKeyNotesByNidItems)
	router.GET(baseURL+"/users/:byUserKey/qualifications", wrapper.GetUsersByUserKeyQualifications)
	router.PUT(baseURL+"/users/:byUserKey/qualifications", wrapper.PutUsersByUserKeyQualifications)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
